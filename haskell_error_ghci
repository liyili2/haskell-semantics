allow: DeriveAnyClass, ConstrainedClassMethods AllowAmbiguousTypes ScopedTypeVariables FlexibleContexts

1. Haskell export system problem. Does not check the name of the export module for a type/class-method. in ghci 8.0 version.

ex: module AStack( Stack(G.Empty), Test(AStack.xx), G.pop, top, size ) the AStack and G cannot be checked

2. Haskell module if the module name is omitted, it means that the module is a main and it does not show in any haskell documents. 

3. Haskell does not check if the exported module is a name replaced with the old name, and the new name might collipse with another existing name

4. Haskell does not check how many times a module is imported. The sum of all these modules is the result

5, undefinedness: if a module can import the same module twice, then if one is qualified and the other is not, the imported module entities will become unqualified.

6. Haskell document said that it is not OK to have a ModId.con format in a type Con in a export list, but the GHC allows this.

7. Haskell does not say that you cannot import a same module in a module twice, for example, you can:

import A (x)
import A as B (y)

So, assume this is indicated but not specified in Haskell, then the following is an error:

module C (module A,x) where  
import A (x)
;import A as B (y)

;x = 5

this does not give an warning saying that x in C is conflicting with the x in module A

8. In haskell document, it says:

The form “module M” names the set of all entities that are in scope with both an unqualified name “e” and a qualified name “M.e”. This set may be empty. For example:


However, the following does not work

module C (module A) where  
import qualified A (x)


module D where
import C
a = x ---> error

9. Haskell unnecessary restriction. If module A has defined a class named ClassA, and module B defines a type name ClassA. If module B imports all items from module A, the place that can use a type name with ClassA will give an error of getting confused with ClassA as a class in module A, which is completely unnecessary, since the place can be used as a type and a class are clearly distinguished in Haskell.

10. if use deriving in a data type with a user defined type classes, need to add {-# LANGUAGE DeriveAnyClass #-}. this means that the definition is very restrictive to the built-in type classes of Haskell. In addition, if we define a type class without the definition of functions, and make an instance for it, the derivation will give warning saying that there is no definition for the type classes, which is wrong.

11, irrefutable pattern fails
ex:

fun1 [] (~1) = 1 ; fun1 (x:xs) (~1) = 1 + fun1 xs 1

but if we input fun1 [1,2,3,4] 4, the function works which is bad for irrefutable pattern.

12, empty type classes
 if class A 
; class A f => C f where
    f2 :: f a -> a

this is not allowed in haskell. 

so am empty type class in Haskell will be recognized having typevar as *

the document does not specify this.

The same in defining data type and newtype. 

If we have data R a b = A Int 

then a and b will have default kind *

13, haskell function type is not assotiative. ??


14, haskell type system does not guarantee that if a program type checked, then running the program will not fail unexpectedly, because in a let binding, you can have let [x,1,y] = [1,1], and the program will type check but getting x and y will result in failure. Non-exhaustive patterns.

15, inherited classes mistakes. 

In some cases, circular checks fail in Haskell for contexts.

for example:

; class S a where {f1 :: S a => a -> Int }
;
; class S a => F a where {f3 :: a -> a -> Int }

this program is valid and compiled in haskell, but

; class F a => S a where {f1 :: a -> Int }
;
; class S a => F a where {f3 :: a -> a -> Int }

This program will be claimed to have a circular contexts


16, AllowAmbiguousTypes and ConstrainedClassMethods FlexibleContexts problems:
These three extensions together give the possibility of having the following type classes:
;class G f where {f1:: G f => Int -> Int;f1 1 = 1; f1 2 = 2}
;instance G (R a) where {f1 1 = 1; f1 n = 2}
; g (A 1) = f1 1

You can have defined a type class without type-var in f1. In using the type-class, it will give error message saying that it cannot solve the type-var f. This is odd, and I think type-class is better to be required to having type variable appeared in at least one of the type-variable. 

17, FlexibleContexts and ConstrainedClassMethods can actually allow circular type-class but Haskell does not check it. Like:

data R a = A Int | B Int | C a 
;class Q f where {f2:: G f => f a -> Int;
                  f3:: f b -> Int}

;class Q f => G f where {f1:: f a -> Int}

;instance Q R where {f2 (A 1) = 1; f2 (C x) = 3; f3 (A 1) = 2; f3 (C x) = 3}
;instance G R where {f1 x = 4}

This code is valid in haskell, which should not since in order to have Q R, we need to have instance of G R but in order to have G R we also need to have implementation of Q R which is circular. 

18, we have the following code:

;f4:: G f => f a -> Int
;f4 x = 4

;g (C x) = f4 (C x)

This code will have a warning saying that no instance for G R

however, if we have the following code:

;class Q f where {f2:: G f => f a -> Int;
                  f3:: f b -> Int}

;class G f where {f1:: f a -> Int}

;instance Q R where {f2 x = 1; f3 (A 1) = 2; f3 (C x) = 3}

data R a = A Int | B Int | C a 
;class Q f where {f2:: G f => f a -> Int;
                  f3:: f b -> Int}

;class Q f => G f where {f1:: f a -> Int}

;instance Q R where {f2 (C x) = 1; f3 (A 1) = 2; f3 (C x) = 3}

;g x = f2 x

this code can actually be compiled. This is due to no circular check. 

19. Haskell allows ConstrainedClassMethods like f :: G a => a -> Int

However, a coder can do the following:

    data R a = A Int | B Int | C a 
    data S a = E Int | F Int | G a
    data F f a = D (f a)

     class G f where {f1:: f a -> Int}
    instance G (F f) where {f1 x = 1}

     f :: G (q R) => (R Int) -> q t a -> Int
    f x y = 1

    g x = f (A 1) (D (G 1))

the definition of method f is a valid code. You can define constraint like G (q R), the R is a type name. The meaning of having constraint like G (q R) is very weird. The R here is a type name but it only serves kind information here. Since R has kind * -> *, it means that q having a kind (* -> *) -> *. Since class G requires its type var to have * -> *, so the kind for q is actually (* -> *) -> * -> *. 
 If we have G (q a), then Haskell will only assume that it has kind * -> * -> *. The only purpose of R is serving the kind indicator. It does not restrict anything about q. People are free to put anything they want for q without mention type R at all. 

20. strange example:

first, 

    data R a = A Int | B Int | C a 
    ;data F f x y a = D (f a) | E (x a) | F (y a)
    ;class T a where {f3 :: a -> Int}
      ;class G f where {f1:: f a -> Int; f2 :: T (f a) => f a -> Int}
    ;instance G R where {f1 x = 1; f2 (A x) = 2; f2 (B y) = 3; f2 (C x) = 4}
     ;f :: G f => f a -> a -> Int
     ;f x y = 1
     ;g x = f2 (C x)

This example will not give us error message that the instance of f2 in g does not have T (R a) instance. However, the following code:

    data R a = A Int | B Int | C a 
    ;data F f x y a = D (f a) | E (x a) | F (y a)
    ;class T a where {f3 :: a -> Int}
      ;class G f where {f1:: f a -> Int; f2 :: T (f a) => f a -> Int}
    ;instance G R where {f1 x = 1; f2 (A x) = 2; f2 (B y) = 3; f2 (C x) = 4}
     ;f :: G f => f a -> a -> Int
     ;f x y = 1
     ;g x = f2 (A x)

will give us error message that the use of f2 in g needs a instance of T (R a), which is bad. It means that Haskell does not check the usage of a type-var in a class once the kind of type-var is shifted used in an extended type-class-constraint. 

21, kind inference not listing implication.

First, Haskell type-inferencing algorithm requires kind inference check. For example, if we have the following function:

f :: x a b -> Int

then, Haskell will assume that a and b having kind *, and x having kind * -> * -> *. 

So, in this case:

When we have the following datatype:

data A x y = A x | B y, 

the constrcts from the datatype can be put into the function f. 

However, if we have the following datatype:

data A x y = A (x y)

the datatype cannot be plugged into the function f because the kind checking indicate that the datatype A having kind (* -> *) -> * -> *. 

The property in Haskell provides an additional and unnecessary restriction on the items that can be plugged into function f.

22, unspecified restriction on Haskell. type in Haskell is just a type synonym. data is a way to define actually datatype. In dealing with the type variables. If we have:

    ;data R f b = A Int | B b | C b
    ;type X f g = R Int Int
    ;data T f x = D (f x) | E x
    ;data Q f = F (T (R f) Int)

One can define the Q f to be F (T (R f) Int), but we cannot replace the X with R here like:
    ;data Q f = F (T (X f) Int)

Haskell requires type to have complete arguments in a data type decl, but it does not require a use of actually data type to have the restriction? Why? This behavior is strange, and it is not listed in any Haskell documentation and is not coherent with the basic idea of Haskell.

Howeve, the kind of type-vars in a data/type can be affected due to multually recursive data-types, like:

    ;data A a f = A (B a f)
    ;data B a f = B (A (f a) f)

The f vars in datatypes A and B are now * -> *, but if we have only data A a f = A (X a f), the kind of f is *.

23, FlexibleInstances failure

data S a = A Int | B a
   ;class A a where {f1 :: a -> b ->  Int}
   ;class A a => B a where {f2 :: a -> Int}
  ;instance A (a -> Int) where {f1 x y = 1}
  ;instance B (a -> Int) where {f2 x = 1}
  ;g x = f2 (\y -> if x == y then "1" else "2")

if we have the above definition. It is very clear that the function for f2  (\y -> if x == y then "1" else "2") is not a -> Int, so Haskell does not check the type for a lambda term?

Due to the failure, we do not consider FlexibleInstances in our semantics.


24. in Haskell documentation, it says that "Instance declarations are not explicitly named in import or export lists. Every module exports all of its instance declarations and every import brings all instance declarations into scope."

However, the following code:

module Euler1 (R(..), A(..), B(..)) where
{
   data R a = A Int | B a
   ;class A a where {f1 :: a -> Int}
   ;class A a => B a where {f2 :: a -> Int}
}

module Euler2 () where
{
import Euler1;
instance A (R a) where {f1 x = 1}
}

module Euler3 () where
{import Euler1;
instance A (R a) where {f1 x = 2}
}

module AStack() where  
{
;import Euler2
;import Euler3
;g x = f1 x
} 

The Haskell GHC will give error message saying that the f1 is not in scope. However, if we add Euler1 in the import of AStack. like: 

module AStack() where  
{
 import Euler1
;import Euler2
;import Euler3
;g x = f1 x
} 

Then, Haskell GHC will let the code compile. Why? Because the AStack imports the original class in Euler1? So importing instance or not depends on if a module has imported the original class? This does not specify in the documentation.

25. Another problem following the error #24 is here. If the AStack module has imported the Euler1 module in #24, the code will be compiled successfully. However, there is an problem. Since AStack imports Euler2 and Euler3, they both have instance of A class with type R. However, in this case, the code should have an error, because the AStack cannot determine which f1 the module is calling (from Euler2 or Euler3). 

module AStack() where  
{
;import Euler1
;import Euler2
;import Euler3
;g x = f1 x
} 

According to the Haskell documentation: "for a given type and class, there cannot be more than one instance declaration for that combination of type and class anywhere in the program. "

Then, it means that AStack module should be rejucted because it imports two different instaces for the same type-class with the same type in the line of code g x = f1 x.



module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    "~Int" Int -> Int {cons("Int198Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int153Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int1394Syn")}
    Int "/Int" Int -> Int {left, cons("Int1427Syn")}
    Int "%Int" Int -> Int {left, cons("Int1243Syn")}
    Int "divInt" Int -> Int {left, cons("Int1303Syn")}
    Int "modInt" Int -> Int {left, cons("Int1395Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1509Syn")}
    Int "-Int" Int -> Int {left, cons("Int1225Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int182Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1453Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int197Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int168Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int166Syn")}
}

context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1265Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1346Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1524Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool179Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1502Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1344Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1604Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1282Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1558Syn")}
}

context-free priorities
{
    "--Float" Float -> Float {cons("Float1507Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float15Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float1435Syn")}
    Float "/Float" Float -> Float {left, cons("Float146Syn")}
    Float "%Float" Float -> Float {left, cons("Float1300Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1353Syn")}
    Float "-Float" Float -> Float {left, cons("Float1508Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1349Syn")}
    K "=/=K" K -> Bool {left, cons("Bool1405Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1349Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool1373Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1239Syn")}
    K "=/=K" K -> Bool {left, cons("Bool1405Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1604Syn")}
    "notBool" Bool -> Bool {cons("Bool1265Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1524Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1502Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1344Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool179Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1346Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool1373Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1239Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map1397Syn")}
} > {
    Map Map -> Map {left, cons("Map1445Syn")}
}

context-free start-symbols
Op AExp Import Ddecls Var ConOp String VarSym VarList OptContext DdClassList OptImpSpec OptComma ConIdInner LExp QOp TyVarTuple Bool Alts TopDdecls OptBangAType ExpList Classes OptDdecls Constrs Constr SContext Exports QConOp OptBangATypes FieldDdeclList QVar KLabel Float OptDderiving Fexp Id Module IDdeclsList OptExpComma Map PatList TopDdecl IDdecls DzFloat TypeTuple Set OptConstrs Expent Stmts Inst MInt FaType Guards GTyCon TyCon K APatList CDdeclsList SubConstr SimpleType QVarList QCon NewConstr Char BType OptSemicolon CNameList TyVars Export ExpTuple OptQVarList CallConv FPat CDdecl OptAsModId Context Con Vars OptCNameList PatTuple SimpleClassList Dderiving VarId KResult QConId FieldDdecl Type GConSym ImportList DdClass Impent ATypes InfixExp StmtList OptQualified ImpSpec Types Pat QTyCls ImpDdecl Alt GuardList SimpleClass FunLhs TyCls Ops LPat FPats Literal VarIdInner GenDdecl Stream TyVar Guard GCon List DzString AType DzBool ConSym VarOp FType OptExp FrType APats QVarOp IDdecl OptVarList Class CName APat KItem ATypeList CDdecls OptBang OptSContext CusFloat KList Int Stmt LiteralInner AAPat ExportList GdRhs Safety Rhs DzInt Body OptIDdecls Bag QConSym Ddecl Fixity FDdecl ModId OptCDdecls Integer QVarId QVarSym ImpDdecls IOError DdeclsList ConId QTyCon Exp K
context-free syntax
    "case" InsertDzExp "of" "{" InsertDzAlts "}" -> LExp {cons("LExp10Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem12Syn")}
    "(,{,})" -> GCon {cons("GCon13Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int14Syn")}
    ImpSpec -> OptImpSpec {}
    Integer -> LiteralInner {}
    {Type ","}* -> Types {cons("Types1ListSyn")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map16Syn")}
    QVar "=" Pat -> FPat {cons("FPat17Syn")}
    Map "=Map" Map -> Bool {cons("Bool18Syn")}
    Set "=Set" Set -> Bool {cons("Bool19Syn")}
    Type "," TypeTuple -> TypeTuple {cons("TypeTuple122Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List120Syn")}
    "" -> OptCNameList {cons("OptCNameList123Syn")}
    GdRhs OptDdecls -> Rhs {cons("Rhs124Syn")}
    "{" InsertDzCDdeclsList "}" -> CDdecls {cons("CDdecls126Syn")}
    ".List" -> List {cons("List125Syn")}
    TyCls OptVarList -> Import {cons("Import127Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream128Syn")}
    Pat "->" Exp -> Alt {cons("Alt129Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String130Syn")}
    FaType "->" FType -> FType {cons("FType132Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool133Syn")}
    "export" InsertDzCallConv InsertDzSafety InsertDzExpent InsertDzVar "::" FType -> FDdecl {cons("FDdecl134Syn")}
    "[]" -> GCon {cons("GCon135Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int136Syn")}
    QCon -> GCon {}
    "" -> OptContext {cons("OptContext137Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String138Syn")}
    Set "-Set" Set -> Set {cons("Set139Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel140Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream142Syn")}
    Vars "::" "!" AType -> FieldDdecl {cons("FieldDdecl143Syn")}
    String "=/=String" String -> Bool {left, cons("Bool144Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id145Syn")}
    CusFloat -> LiteralInner {}
    ConIdInner "##" -> ConId {cons("ConId147Syn")}
    "module" InsertDzModId InsertDzExports "where" Body -> Module {cons("Module148Syn")}
    Pat "," Pat -> PatTuple {cons("PatTuple149Syn")}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int150Syn")}
    "" -> OptAsModId {cons("OptAsModId152Syn")}
    QTyCls -> DdClass {}
    QCon "{" InsertDzFPats "}" -> APat {cons("APat154Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int155Syn")}
    "`" InsertDzVarId "`" -> VarOp {cons("VarOp156Syn")}
    "[]" -> GTyCon {cons("GTyCon157Syn")}
    ConId "." ModId -> ModId {cons("ModId158Syn")}
    LPat -> Pat {}
    "infixl" -> Fixity {cons("Fixity159Syn")}
    "[" InsertDzPat "]" -> APat {cons("APat160Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map162Syn")}
    Var Rhs -> IDdecl {cons("IDdecl163Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List164Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float165Syn")}
    GenDdecl -> Ddecl {}
    "`" InsertDzConId "`" -> ConOp {cons("ConOp167Syn")}
    "(" InsertDzQVarSym ")" -> QVar {cons("QVar169Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float170Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList172Syn")}
    QConSym -> GConSym {}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool173Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int174Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int175Syn")}
    VarIdInner -> VarId {}
    "[" InsertDzType "]" -> AType {cons("AType176Syn")}
    "[" InsertDzExpList "]" -> AExp {cons("AExp177Syn")}
    "cool" "(" InsertDzK ")" -> K {cons("K178Syn")}
    "let" Ddecls -> Guard {cons("Guard180Syn")}
    Var -> Vars {}
    Pat "->" InsertDzExp "where" Ddecls -> Alt {cons("Alt183Syn")}
    LPat InsertDzQConOp Pat -> Pat {cons("Pat184Syn")}
    "(" InsertDzQVarList ")" -> OptQVarList {cons("OptQVarList185Syn")}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool186Syn")}
    Set "<=Set" Set -> Bool {cons("Bool187Syn")}
    {Ddecl ";"}* -> DdeclsList {cons("DdeclsList1ListSyn")}
    "infixr" -> Fixity {cons("Fixity188Syn")}
    "" -> GenDdecl {cons("GenDdecl189Syn")}
    "()" -> FrType {cons("FrType190Syn")}
    LExp InsertDzQOp InfixExp -> InfixExp {cons("InfixExp192Syn")}
    Exp "," Exp -> ExpTuple {cons("ExpTuple193Syn")}
    "(" InsertDzVarList ")" -> OptVarList {cons("OptVarList194Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K195Syn")}
    "class" InsertDzOptSContext InsertDzTyCls InsertDzTyVar OptCDdecls -> TopDdecl {cons("TopDdecl196Syn")}
    List "=List" List -> Bool {cons("Bool199Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1200Syn")}
    "qualified" -> OptQualified {cons("OptQualified1202Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1203Syn")}
    "module" InsertDzModId "where" Body -> Module {cons("Module1204Syn")}
    VarSym -> VarOp {}
    "{" InsertDzIDdeclsList "}" -> IDdecls {cons("IDdecls1207Syn")}
    AAPat -> LPat {}
    Map "[" InsertDzK "]" -> K {cons("K1206Syn")}
    "{" InsertDzImpDdecls "}" -> Body {cons("Body1208Syn")}
    {AAPat ""}* -> APats {cons("APats1ListSyn")}
    VarOp -> Op {}
    "(" InsertDzCNameList ")" -> OptCNameList {cons("OptCNameList1209Syn")}
    Exp -> ExpList {}
    Con "{" InsertDzFieldDdeclList "}" -> Constr {cons("Constr1220Syn")}
    "hiding" "(" InsertDzImportList InsertDzOptComma ")" -> ImpSpec {cons("ImpSpec1222Syn")}
    GTyCon -> AType {}
    QTyCon OptCNameList -> Export {cons("Export1223Syn")}
    ";" -> Stmt {cons("Stmt1224Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1226Syn")}
    "newtype" InsertDzOptContext InsertDzSimpleType "=" InsertDzNewConstr OptDderiving -> TopDdecl {cons("TopDdecl1228Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1227Syn")}
    SimpleClass -> SContext {}
    VarSym -> QVarSym {}
    ModId "." VarId -> QVarId {cons("QVarId1229Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1230Syn")}
    QTyCls TyVar -> Class {cons("Class1232Syn")}
    ConSym -> ConOp {}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1233Syn")}
    K -> KList {}
    AType -> BType {}
    KList "=/=KList" KList -> Bool {cons("Bool1234Syn")}
    VarId -> Var {}
    {SimpleClass ","}* -> SimpleClassList {cons("SimpleClassList1ListSyn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1235Syn")}
    "import" InsertDzCallConv InsertDzImpent InsertDzVar "::" FType -> FDdecl {cons("FDdecl1236Syn")}
    Vars "::" Type -> FieldDdecl {cons("FieldDdecl1237Syn")}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1238Syn")}
    AExp -> Fexp {}
    Literal -> APat {}
    Var Rhs -> CDdecl {cons("CDdecl1242Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1244Syn")}
    "#ELOOP" -> IOError {cons("IOError1245Syn")}
    "jvm" -> CallConv {cons("CallConv1246Syn")}
    Var -> Import {}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1247Syn")}
    AType -> ATypes {}
    {Import ","}* -> ImportList {cons("ImportList1ListSyn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1248Syn")}
    TyVar "," TyVar -> TyVarTuple {cons("TyVarTuple1249Syn")}
    "{" InsertDzTopDdecls "}" -> Body {cons("Body1250Syn")}
    "EXPENT" -> Expent {cons("Expent1252Syn")}
    "#configuration" -> Bag {cons("Bag1253Syn")}
    "where" IDdecls -> OptIDdecls {cons("OptIDdecls1254Syn")}
    "(" InsertDzInfixExp InsertDzQOp ")" -> AExp {cons("AExp1255Syn")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1256Syn")}
    "if" InsertDzExp InsertDzOptSemicolon "then" InsertDzExp InsertDzOptSemicolon "else" Exp -> LExp {cons("LExp1257Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1258Syn")}
    KItem -> K {}
    "(..)" -> OptQVarList {cons("OptQVarList1259Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1260Syn")}
    Con -> CName {}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1262Syn")}
    "(..)" -> OptCNameList {cons("OptCNameList1263Syn")}
    "(" InsertDzTyVarTuple ")" -> Inst {cons("Inst1264Syn")}
    Pat InsertDzVarOp Pat -> FunLhs {cons("FunLhs1266Syn")}
    ConId -> Con {}
    QTyCls TyVar -> SimpleClass {cons("SimpleClass1268Syn")}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1267Syn")}
    Context "=>" -> OptContext {cons("OptContext1269Syn")}
    {CDdecl ";"}* -> CDdeclsList {cons("CDdeclsList1ListSyn")}
    Map "<=Map" Map -> Bool {cons("Bool1270Syn")}
    "" -> OptCDdecls {cons("OptCDdecls1272Syn")}
    "" -> OptQualified {cons("OptQualified1273Syn")}
    Var "," Vars -> Vars {cons("Vars1274Syn")}
    QConOp -> QOp {}
    "-" -> VarSym {cons("VarSym1275Syn")}
    "" -> IDdecl {cons("IDdecl1276Syn")}
    "(..)" -> OptVarList {cons("OptVarList1277Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1278Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1279Syn")}
    GCon -> APat {}
    String "==String" String -> Bool {left, cons("Bool1280Syn")}
    String "+String" String -> String {left, cons("String1283Syn")}
    K "in" Set -> Bool {cons("Bool1284Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1286Syn")}
    ".Map" -> Map {cons("Map1285Syn")}
    KList "==KList" KList -> Bool {cons("Bool1287Syn")}
    String -> LiteralInner {}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1289Syn")}
    "" -> ImpDdecl {cons("ImpDdecl1290Syn")}
    LExp -> InfixExp {}
    InfixExp -> Guard {}
    LiteralInner "#" -> Literal {cons("Literal1292Syn")}
    {TopDdecl ";"}* -> TopDdecls {cons("TopDdecls1ListSyn")}
    "do" "{" InsertDzStmts "}" -> LExp {cons("LExp1293Syn")}
    "=" InsertDzExp OptDdecls -> Rhs {cons("Rhs1294Syn")}
    QTyCon ATypeList -> FaType {cons("FaType1295Syn")}
    {Var ","}* -> VarList {cons("VarList1ListSyn")}
    GenDdecl -> CDdecl {}
    "~" AAPat -> APat {cons("APat1296Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1297Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1298Syn")}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1299Syn")}
    Dderiving -> OptDderiving {}
    Con AType -> NewConstr {cons("NewConstr1302Syn")}
    {ImpDdecl ";"}* -> ImpDdecls {cons("ImpDdecls1ListSyn")}
    Float ">Float" Float -> Bool {left, cons("Bool1304Syn")}
    "size" -> VarIdInner {cons("VarIdInner1305Syn")}
    Vars "::" InsertDzContext "=>" Type -> GenDdecl {cons("GenDdecl1306Syn")}
    "-" InfixExp -> InfixExp {cons("InfixExp1307Syn")}
    Fixity InsertDzInteger Ops -> GenDdecl {cons("GenDdecl1308Syn")}
    ConId -> QConId {}
    Pat "<-" InfixExp -> Guard {cons("Guard1309Syn")}
    {AType ""}* -> ATypeList {cons("ATypeList1ListSyn")}
    "type" InsertDzSimpleType "=" Type -> TopDdecl {cons("TopDdecl1320Syn")}
    "countAllOccurrences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1322Syn")}
    Exp "," ExpList -> ExpList {cons("ExpList1323Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1325Syn")}
    "(->)" -> GTyCon {cons("GTyCon1326Syn")}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1324Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1327Syn")}
    LiteralInner "##" -> Literal {cons("Literal1328Syn")}
    TyCon -> QTyCon {}
    QTyCon -> GTyCon {}
    TyVar "," TyVarTuple -> TyVarTuple {cons("TyVarTuple1329Syn")}
    {DdClass ","}* -> DdClassList {cons("DdClassList1ListSyn")}
    Float "==Float" Float -> Bool {left, cons("Bool1330Syn")}
    Pat "," PatTuple -> PatTuple {cons("PatTuple1332Syn")}
    "[" InsertDzTyVar "]" -> Inst {cons("Inst1333Syn")}
    "" -> OptExp {cons("OptExp1334Syn")}
    "where" CDdecls -> OptCDdecls {cons("OptCDdecls1335Syn")}
    FunLhs Rhs -> IDdecl {cons("IDdecl1336Syn")}
    Class -> Context {}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1337Syn")}
    Op -> Ops {}
    ConId -> TyCls {}
    "(" InsertDzTypeTuple ")" -> AType {cons("AType1338Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1340Syn")}
    "-" CusFloat -> LPat {cons("LPat1342Syn")}
    String "<=String" String -> Bool {cons("Bool1343Syn")}
    Var -> CName {}
    "choice" "(" InsertDzMap ")" -> K {cons("K1345Syn")}
    "[" InsertDzExp InsertDzOptExpComma ".." InsertDzOptExp "]" -> AExp {cons("AExp1347Syn")}
    Pat -> PatList {}
    K "=K" K -> Bool {cons("Bool1348Syn")}
    {TyVar ""}* -> TyVars {cons("TyVars1ListSyn")}
    Con "{" InsertDzVar "::" InsertDzType "}" -> NewConstr {cons("NewConstr1350Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1352Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1354Syn")}
    Fexp -> LExp {}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1355Syn")}
    "" -> OptComma {cons("OptComma1356Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1357Syn")}
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream1358Syn")}
    K "inKList" KList -> Bool {cons("Bool1359Syn")}
    Exp ";" -> Stmt {cons("Stmt1360Syn")}
    "[" InsertDzPatList "]" -> APat {cons("APat1362Syn")}
    GCon APatList -> LPat {cons("LPat1363Syn")}
    QVarSym -> QVarOp {}
    Exp "," ExpTuple -> ExpTuple {cons("ExpTuple1364Syn")}
    Body -> Module {}
    "#EISDIR" -> IOError {cons("IOError1365Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float1367Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map1366Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1368Syn")}
    String "<String" String -> Bool {cons("Bool1369Syn")}
    Var -> APat {}
    Var "@" AAPat -> APat {cons("APat1370Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1372Syn")}
    InfixExp -> Exp {}
    "#EBADF" -> IOError {cons("IOError1374Syn")}
    "(" InsertDzVarSym ")" -> Var {cons("Var1375Syn")}
    Constr "|" Constrs -> Constrs {cons("Constrs1376Syn")}
    "(" InsertDzPatTuple ")" -> APat {cons("APat1377Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool1378Syn")}
    "#stderr" -> Int {cons("Int1380Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool1379Syn")}
    {OptBangAType ""}* -> OptBangATypes {cons("OptBangATypes1ListSyn")}
    Map "-Map" Map -> Map {cons("Map1382Syn")}
    "(" InsertDzExportList ",)" -> Exports {cons("Exports1383Syn")}
    BType AType -> BType {cons("BType1384Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1385Syn")}
    ConSym -> QConSym {}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String1386Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool1387Syn")}
    "{" InsertDzImpDdecls ";" InsertDzTopDdecls "}" -> Body {cons("Body1388Syn")}
    GTyCon -> Inst {}
    "(" InsertDzQOp InsertDzInfixExp ")" -> AExp {cons("AExp1389Syn")}
    DzInt -> Int {}
    "#freezer" K -> KLabel {cons("KLabel1390Syn")}
    VarId -> QVarId {}
    BType "->" Type -> Type {cons("Type1392Syn")}
    ";" -> OptSemicolon {cons("OptSemicolon1393Syn")}
    "|" GuardList -> Guards {cons("Guards1396Syn")}
    "default" Types -> TopDdecl {cons("TopDdecl1398Syn")}
    K "|->" K -> Map {cons("Map1397Syn")}
    Ddecl -> TopDdecl {}
    "size" "(" InsertDzList ")" -> Int {cons("Int1399Syn")}
    Int "=Int" Int -> Bool {cons("Bool1400Syn")}
    Alt ";" Alts -> Alts {cons("Alts1402Syn")}
    GConSym -> QConOp {}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1403Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1404Syn")}
    Classes -> Context {}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList1406Syn")}
    VarIdInner "#" -> VarId {cons("VarId1407Syn")}
    ModId "." VarSym -> QVarSym {cons("QVarSym1408Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String1409Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1420Syn")}
    "as" ModId -> OptAsModId {cons("OptAsModId1422Syn")}
    AAPat APats -> APatList {cons("APatList1423Syn")}
    Int "<Int" Int -> Bool {left, cons("Bool1424Syn")}
    GCon -> AExp {}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float1425Syn")}
    "`" InsertDzQConId "`" -> QConOp {cons("QConOp1426Syn")}
    {Export ","}* -> ExportList {cons("ExportList1ListSyn")}
    "\\" InsertDzAPats "->" Exp -> LExp {cons("LExp1428Syn")}
    {QVar ","}* -> QVarList {cons("QVarList1ListSyn")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int1429Syn")}
    StmtList InsertDzExp OptSemicolon -> Stmts {cons("Stmts1430Syn")}
    "let" InsertDzDdecls ";" -> Stmt {cons("Stmt1433Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List1432Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String1434Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1436Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String1437Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1438Syn")}
    Constr -> Constrs {}
    DzBool -> Bool {}
    {FieldDdecl ","}* -> FieldDdeclList {cons("FieldDdeclList1ListSyn")}
    "!" -> OptBang {cons("OptBang1439Syn")}
    KList "=KList" KList -> Bool {cons("Bool1440Syn")}
    "(" InsertDzGTyCon InsertDzTyVars ")" -> Inst {cons("Inst1442Syn")}
    QVar -> Export {}
    AType ATypes -> ATypes {cons("ATypes1444Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1443Syn")}
    SubConstr InsertDzConOp SubConstr -> Constr {cons("Constr1447Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1446Syn")}
    Map Map -> Map {left, cons("Map1445Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1449Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1448Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1450Syn")}
    ":" -> GConSym {cons("GConSym1452Syn")}
    "#noIO" -> Stream {cons("Stream1454Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1456Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1455Syn")}
    "#EACCES" -> IOError {cons("IOError1457Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1458Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1459Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1460Syn")}
    ConId -> ModId {}
    Set Set -> Set {left, cons("Set1462Syn")}
    "," Exp -> OptExpComma {cons("OptExpComma1463Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1464Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1465Syn")}
    TyCls -> QTyCls {}
    "(" InsertDzImportList InsertDzOptComma ")" -> ImpSpec {cons("ImpSpec1466Syn")}
    "deriving" DdClass -> Dderiving {cons("Dderiving1467Syn")}
    K "#inKList" KList -> Bool {cons("Bool1468Syn")}
    BType -> SubConstr {}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1469Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1470Syn")}
    VarId -> TyVar {}
    Pat "," PatList -> PatList {cons("PatList1473Syn")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1472Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1474Syn")}
    "stdcall" -> CallConv {cons("CallConv1475Syn")}
    "`" InsertDzQVarId "`" -> QVarOp {cons("QVarOp1476Syn")}
    "(" InsertDzGConSym ")" -> QCon {cons("QCon1477Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1478Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1479Syn")}
    "" -> OptImpSpec {cons("OptImpSpec1480Syn")}
    "" -> OptSContext {cons("OptSContext1482Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1483Syn")}
    Alt -> Alts {}
    "import" InsertDzCallConv InsertDzSafety InsertDzImpent InsertDzVar "::" FType -> FDdecl {cons("FDdecl1484Syn")}
    DzString -> String {}
    VarIdInner "##" -> VarId {cons("VarId1487Syn")}
    "let" InsertDzDdecls "in" Exp -> LExp {cons("LExp1488Syn")}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1486Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1489Syn")}
    "" -> OptDderiving {cons("OptDderiving1490Syn")}
    DzFloat -> Float {}
    ConIdInner "#" -> ConId {cons("ConId1492Syn")}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1493Syn")}
    "(" InsertDzExpTuple ")" -> AExp {cons("AExp1494Syn")}
    TyVar -> AType {}
    "deriving" DdClassList -> Dderiving {cons("Dderiving1495Syn")}
    "(" InsertDzAPat ")" -> AAPat {cons("AAPat1Bracket")}
    "infix" -> Fixity {cons("Fixity1496Syn")}
    FunLhs Rhs -> CDdecl {cons("CDdecl1497Syn")}
    "dotnet" -> CallConv {cons("CallConv1498Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1499Syn")}
    "#stdin" -> Int {cons("Int1500Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1503Syn")}
    "" -> OptIDdecls {cons("OptIDdecls1504Syn")}
    Var APatList -> FunLhs {cons("FunLhs1505Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1506Syn")}
    TyCon TyVars -> SimpleType {cons("SimpleType1520Syn")}
    ConId -> TyCon {}
    Type "," Type -> TypeTuple {cons("TypeTuple1522Syn")}
    ConIdInner -> ConId {}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1525Syn")}
    ModId "." ConSym -> QConSym {cons("QConSym1526Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1527Syn")}
    "(" InsertDzPat ")" -> APat {cons("APat1528Syn")}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1529Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1530Syn")}
    ".Set" -> Set {cons("Set1532Syn")}
    LiteralInner -> Literal {}
    QTyCls "(" InsertDzTyVar InsertDzATypes ")" -> Class {cons("Class1533Syn")}
    List List -> List {left, cons("List1534Syn")}
    ModId "." TyCls -> QTyCls {cons("QTyCls1535Syn")}
    "foreign" FDdecl -> TopDdecl {cons("TopDdecl1536Syn")}
    "()" -> GTyCon {cons("GTyCon1537Syn")}
    "=" Constrs -> OptConstrs {cons("OptConstrs1538Syn")}
    "(" InsertDzTyVar "->" InsertDzTyVar ")" -> Inst {cons("Inst1539Syn")}
    Pat "<-" InsertDzExp ";" -> Stmt {cons("Stmt1540Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1542Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1543Syn")}
    "{" InsertDzDdeclsList "}" -> Ddecls {cons("Ddecls1544Syn")}
    "cplusplus" -> CallConv {cons("CallConv1545Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1546Syn")}
    "(" InsertDzExportList ")" -> Exports {cons("Exports1547Syn")}
    String ">=String" String -> Bool {cons("Bool1548Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1549Syn")}
    QVar -> AExp {}
    Int "==Int" Int -> Bool {left, cons("Bool1550Syn")}
    "(" InsertDzFexp ")" AExp -> Fexp {cons("Fexp1552Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1553Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1554Syn")}
    FaType -> FrType {}
    Guard "," GuardList -> GuardList {cons("GuardList1555Syn")}
    "data" InsertDzOptContext InsertDzSimpleType InsertDzOptConstrs OptDderiving -> TopDdecl {cons("TopDdecl1556Syn")}
    "#ENOENT" -> IOError {cons("IOError1557Syn")}
    {Stmt ""}* -> StmtList {cons("StmtList1ListSyn")}
    "#EINVAL" -> IOError {cons("IOError1559Syn")}
    String ">String" String -> Bool {cons("Bool1560Syn")}
    {CName ","}* -> CNameList {cons("CNameList1ListSyn")}
    "safe" -> Safety {cons("Safety1562Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1563Syn")}
    ConOp -> Op {}
    List "[" InsertDzInt "]" -> K {cons("K1564Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1565Syn")}
    "#stdout" -> Int {cons("Int1566Syn")}
    "(,{,})" -> GTyCon {cons("GTyCon1567Syn")}
    Con OptBangATypes -> Constr {cons("Constr1568Syn")}
    "#noparse" -> IOError {cons("IOError1569Syn")}
    "" -> OptDdecls {cons("OptDdecls1570Syn")}
    {Class ","}* -> Classes {cons("Classes1ListSyn")}
    ModId "." ConId -> QConId {cons("QConId1572Syn")}
    Guards "=" InsertDzExp GdRhs -> GdRhs {cons("GdRhs1573Syn")}
    FunLhs Rhs -> Ddecl {cons("Ddecl1575Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1574Syn")}
    Pat Rhs -> Ddecl {cons("Ddecl1576Syn")}
    "-" Integer -> LPat {cons("LPat1577Syn")}
    SContext "=>" -> OptSContext {cons("OptSContext1578Syn")}
    FrType -> FType {}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1579Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1580Syn")}
    "(" InsertDzType ")" -> AType {cons("AType1582Syn")}
    "instance" InsertDzOptSContext InsertDzQTyCls InsertDzInst OptIDdecls -> TopDdecl {cons("TopDdecl1583Syn")}
    "" -> OptConstrs {cons("OptConstrs1584Syn")}
    "(" InsertDzConSym ")" -> Con {cons("Con1585Syn")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1586Syn")}
    BType -> Type {}
    KResult -> KItem {}
    Int -> Integer {}
    "getKLabel" K -> KLabel {cons("KLabel1587Syn")}
    "ccall" -> CallConv {cons("CallConv1588Syn")}
    ModId "." TyCon -> QTyCon {cons("QTyCon1589Syn")}
    Guard -> GuardList {}
    Guards "=" Exp -> GdRhs {cons("GdRhs1590Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1592Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1593Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1594Syn")}
    QVarId -> QVar {}
    QConId -> QCon {}
    "import" InsertDzOptQualified InsertDzModId InsertDzOptAsModId OptImpSpec -> ImpDdecl {cons("ImpDdecl1595Syn")}
    OptBang AType -> OptBangAType {cons("OptBangAType1596Syn")}
    InfixExp "::" InsertDzContext "=>" Type -> Exp {cons("Exp1597Syn")}
    "" -> OptBang {cons("OptBang1598Syn")}
    Exp -> OptExp {}
    "()" -> GCon {cons("GCon1599Syn")}
    "#EOF" -> IOError {cons("IOError1602Syn")}
    "Float2String" "(" InsertDzFloat "," InsertDzString ")" -> String {cons("String1600Syn")}
    Op "," Ops -> Ops {cons("Ops1603Syn")}
    SimpleClassList -> SContext {}
    {IDdecl ";"}* -> IDdeclsList {cons("IDdeclsList1ListSyn")}
    "" -> OptExpComma {cons("OptExpComma1605Syn")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1606Syn")}
    "(" InsertDzFunLhs ")" APatList -> FunLhs {cons("FunLhs1607Syn")}
    "unsafe" -> Safety {cons("Safety1608Syn")}
    "(" InsertDzExp ")" -> AExp {cons("AExp1609Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1620Syn")}
    TyCon OptCNameList -> Import {cons("Import1622Syn")}
    Vars "::" Type -> GenDdecl {cons("GenDdecl1623Syn")}
    Fixity Ops -> GenDdecl {cons("GenDdecl1624Syn")}
    "" -> OptSemicolon {cons("OptSemicolon1625Syn")}
    "," -> OptComma {cons("OptComma1626Syn")}
    "module" ModId -> Export {cons("Export1627Syn")}
    "where" Ddecls -> OptDdecls {cons("OptDdecls1628Syn")}
    QVarOp -> QOp {}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1629Syn")}
    "#ESPIPE" -> IOError {cons("IOError1630Syn")}
    Literal -> AExp {}
    "!" AType -> SubConstr {cons("SubConstr1632Syn")}
    K "in" List -> Bool {cons("Bool1633Syn")}
    QTyCls OptQVarList -> Export {cons("Export1634Syn")}
    {FPat ","}* -> FPats {cons("FPats1ListSyn")}
    "IMPENT" -> Impent {cons("Impent1635Syn")}
    InfixExp "::" Type -> Exp {cons("Exp1636Syn")}
    Pat -> InsertDzPat
    Ddecls -> InsertDzDdecls
    QTyCls -> InsertDzQTyCls
    Var -> InsertDzVar
    ConOp -> InsertDzConOp
    String -> InsertDzString
    VarSym -> InsertDzVarSym
    VarList -> InsertDzVarList
    OptContext -> InsertDzOptContext
    OptComma -> InsertDzOptComma
    FunLhs -> InsertDzFunLhs
    TyCls -> InsertDzTyCls
    QOp -> InsertDzQOp
    TyVarTuple -> InsertDzTyVarTuple
    Alts -> InsertDzAlts
    Bool -> InsertDzBool
    FPats -> InsertDzFPats
    TopDdecls -> InsertDzTopDdecls
    ExpList -> InsertDzExpList
    TyVar -> InsertDzTyVar
    List -> InsertDzList
    VarOp -> InsertDzVarOp
    ConSym -> InsertDzConSym
    OptExp -> InsertDzOptExp
    APats -> InsertDzAPats
    Exports -> InsertDzExports
    QConOp -> InsertDzQConOp
    FieldDdeclList -> InsertDzFieldDdeclList
    KLabel -> InsertDzKLabel
    Float -> InsertDzFloat
    Fexp -> InsertDzFexp
    Id -> InsertDzId
    IDdeclsList -> InsertDzIDdeclsList
    APat -> InsertDzAPat
    Map -> InsertDzMap
    KItem -> InsertDzKItem
    OptExpComma -> InsertDzOptExpComma
    PatList -> InsertDzPatList
    TypeTuple -> InsertDzTypeTuple
    Set -> InsertDzSet
    Expent -> InsertDzExpent
    Stmts -> InsertDzStmts
    OptConstrs -> InsertDzOptConstrs
    Inst -> InsertDzInst
    OptSContext -> InsertDzOptSContext
    GTyCon -> InsertDzGTyCon
    K -> InsertDzK
    KList -> InsertDzKList
    CDdeclsList -> InsertDzCDdeclsList
    Int -> InsertDzInt
    SimpleType -> InsertDzSimpleType
    QVarList -> InsertDzQVarList
    ExportList -> InsertDzExportList
    NewConstr -> InsertDzNewConstr
    Char -> InsertDzChar
    OptSemicolon -> InsertDzOptSemicolon
    CNameList -> InsertDzCNameList
    TyVars -> InsertDzTyVars
    ExpTuple -> InsertDzExpTuple
    CallConv -> InsertDzCallConv
    Safety -> InsertDzSafety
    OptAsModId -> InsertDzOptAsModId
    Context -> InsertDzContext
    PatTuple -> InsertDzPatTuple
    VarId -> InsertDzVarId
    ModId -> InsertDzModId
    Integer -> InsertDzInteger
    QConId -> InsertDzQConId
    Type -> InsertDzType
    GConSym -> InsertDzGConSym
    QVarId -> InsertDzQVarId
    QVarSym -> InsertDzQVarSym
    ImpDdecls -> InsertDzImpDdecls
    DdeclsList -> InsertDzDdeclsList
    ImportList -> InsertDzImportList
    ConId -> InsertDzConId
    Impent -> InsertDzImpent
    ATypes -> InsertDzATypes
    Exp -> InsertDzExp
    InfixExp -> InsertDzInfixExp
    OptQualified -> InsertDzOptQualified


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    Op        -> K
    AExp        -> K
    Import        -> K
    Ddecls        -> K
    Var        -> K
    ConOp        -> K
    String        -> K
    VarSym        -> K
    OptContext        -> K
    OptImpSpec        -> K
    OptComma        -> K
    ConIdInner        -> K
    LExp        -> K
    QOp        -> K
    TyVarTuple        -> K
    Bool        -> K
    Alts        -> K
    OptBangAType        -> K
    ExpList        -> K
    OptDdecls        -> K
    Constrs        -> K
    Constr        -> K
    SContext        -> K
    Exports        -> K
    QConOp        -> K
    QVar        -> K
    Float        -> K
    OptDderiving        -> K
    Fexp        -> K
    Id        -> K
    Module        -> K
    OptExpComma        -> K
    Map        -> K
    PatList        -> K
    TopDdecl        -> K
    IDdecls        -> K
    DzFloat        -> K
    TypeTuple        -> K
    Set        -> K
    OptConstrs        -> K
    Expent        -> K
    Stmts        -> K
    Inst        -> K
    MInt        -> K
    FaType        -> K
    Guards        -> K
    GTyCon        -> K
    TyCon        -> K
    APatList        -> K
    SubConstr        -> K
    SimpleType        -> K
    QCon        -> K
    NewConstr        -> K
    Char        -> K
    BType        -> K
    OptSemicolon        -> K
    Export        -> K
    ExpTuple        -> K
    OptQVarList        -> K
    CallConv        -> K
    FPat        -> K
    CDdecl        -> K
    OptAsModId        -> K
    Context        -> K
    Con        -> K
    Vars        -> K
    OptCNameList        -> K
    PatTuple        -> K
    Dderiving        -> K
    VarId        -> K
    QConId        -> K
    FieldDdecl        -> K
    Type        -> K
    GConSym        -> K
    DdClass        -> K
    Impent        -> K
    ATypes        -> K
    InfixExp        -> K
    OptQualified        -> K
    ImpSpec        -> K
    Pat        -> K
    QTyCls        -> K
    ImpDdecl        -> K
    Alt        -> K
    GuardList        -> K
    SimpleClass        -> K
    FunLhs        -> K
    TyCls        -> K
    Ops        -> K
    LPat        -> K
    Literal        -> K
    VarIdInner        -> K
    GenDdecl        -> K
    Stream        -> K
    TyVar        -> K
    Guard        -> K
    GCon        -> K
    List        -> K
    DzString        -> K
    AType        -> K
    DzBool        -> K
    ConSym        -> K
    VarOp        -> K
    FType        -> K
    OptExp        -> K
    FrType        -> K
    QVarOp        -> K
    IDdecl        -> K
    OptVarList        -> K
    Class        -> K
    CName        -> K
    APat        -> K
    CDdecls        -> K
    OptBang        -> K
    OptSContext        -> K
    CusFloat        -> K
    Int        -> K
    Stmt        -> K
    LiteralInner        -> K
    AAPat        -> K
    GdRhs        -> K
    Safety        -> K
    Rhs        -> K
    DzInt        -> K
    Body        -> K
    OptIDdecls        -> K
    QConSym        -> K
    Ddecl        -> K
    Fixity        -> K
    FDdecl        -> K
    ModId        -> K
    OptCDdecls        -> K
    Integer        -> K
    QVarId        -> K
    QVarSym        -> K
    IOError        -> K
    ConId        -> K
    QTyCon        -> K
    Exp        -> K
lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "fpNaN" -> IdDz {reject}
    "updateMap" -> IdDz {reject}
    "directionalityChar" -> IdDz {reject}
    "stdcall" -> IdDz {reject}
    "hiding" -> IdDz {reject}
    "removeAll" -> IdDz {reject}
    "trim" -> IdDz {reject}
    "categoryChar" -> IdDz {reject}
    "let" -> IdDz {reject}
    "exponentBitsFloat" -> IdDz {reject}
    "module" -> IdDz {reject}
    "ordChar" -> IdDz {reject}
    "then" -> IdDz {reject}
    "Int2Float" -> IdDz {reject}
    "as" -> IdDz {reject}
    "sinFloat" -> IdDz {reject}
    "size" -> IdDz {reject}
    "getKLabel" -> IdDz {reject}
    "minFloat" -> IdDz {reject}
    "tanFloat" -> IdDz {reject}
    "String2Base" -> IdDz {reject}
    "Base2String" -> IdDz {reject}
    "replaceFirst" -> IdDz {reject}
    "unsafe" -> IdDz {reject}
    "KLabel2String" -> IdDz {reject}
    "default" -> IdDz {reject}
    "isInfinite" -> IdDz {reject}
    "acosFloat" -> IdDz {reject}
    "where" -> IdDz {reject}
    "xorBool" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "maxInt" -> IdDz {reject}
    "undef" -> IdDz {reject}
    "atanFloat" -> IdDz {reject}
    "rootFloat" -> IdDz {reject}
    "minValueFloat" -> IdDz {reject}
    "isKResult" -> IdDz {reject}
    "xorInt" -> IdDz {reject}
    "notBool" -> IdDz {reject}
    "roundFloat" -> IdDz {reject}
    "do" -> IdDz {reject}
    "isNaN" -> IdDz {reject}
    "lengthString" -> IdDz {reject}
    "export" -> IdDz {reject}
    "floorFloat" -> IdDz {reject}
    "jvm" -> IdDz {reject}
    "ltrim" -> IdDz {reject}
    "isBuiltin" -> IdDz {reject}
    "sqrtFloat" -> IdDz {reject}
    "orBool" -> IdDz {reject}
    "import" -> IdDz {reject}
    "countAllOccurrences" -> IdDz {reject}
    "infixr" -> IdDz {reject}
    "precisionFloat" -> IdDz {reject}
    "replaceAll" -> IdDz {reject}
    "newtype" -> IdDz {reject}
    "expFloat" -> IdDz {reject}
    "rfindChar" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "class" -> IdDz {reject}
    "intersectSet" -> IdDz {reject}
    "minusInfinity" -> IdDz {reject}
    "freshId" -> IdDz {reject}
    "ccall" -> IdDz {reject}
    "signFloat" -> IdDz {reject}
    "false" -> IdDz {reject}
    "String2Int" -> IdDz {reject}
    "infixl" -> IdDz {reject}
    "ListItem" -> IdDz {reject}
    "fresh" -> IdDz {reject}
    "freshInt" -> IdDz {reject}
    "qualified" -> IdDz {reject}
    "rfindString" -> IdDz {reject}
    "type" -> IdDz {reject}
    "Float2Int" -> IdDz {reject}
    "dummy" -> IdDz {reject}
    "findString" -> IdDz {reject}
    "EXPENT" -> IdDz {reject}
    "dividesInt" -> IdDz {reject}
    "else" -> IdDz {reject}
    "if" -> IdDz {reject}
    "case" -> IdDz {reject}
    "in" -> IdDz {reject}
    "cosFloat" -> IdDz {reject}
    "Float2String" -> IdDz {reject}
    "infix" -> IdDz {reject}
    "String2Id" -> IdDz {reject}
    "divInt" -> IdDz {reject}
    "absInt" -> IdDz {reject}
    "bool2Int" -> IdDz {reject}
    "dotnet" -> IdDz {reject}
    "ceilFloat" -> IdDz {reject}
    "chrChar" -> IdDz {reject}
    "randomRandom" -> IdDz {reject}
    "range" -> IdDz {reject}
    "plusInfinity" -> IdDz {reject}
    "foreign" -> IdDz {reject}
    "cool" -> IdDz {reject}
    "significandFloat" -> IdDz {reject}
    "maxValueFloat" -> IdDz {reject}
    "IMPENT" -> IdDz {reject}
    "deriving" -> IdDz {reject}
    "String2Float" -> IdDz {reject}
    "choice" -> IdDz {reject}
    "impliesBool" -> IdDz {reject}
    "andThenBool" -> IdDz {reject}
    "asinFloat" -> IdDz {reject}
    "instance" -> IdDz {reject}
    "data" -> IdDz {reject}
    "replace" -> IdDz {reject}
    "String2KLabel" -> IdDz {reject}
    "isToken" -> IdDz {reject}
    "substrString" -> IdDz {reject}
    "atan2Float" -> IdDz {reject}
    "Int2String" -> IdDz {reject}
    "absFloat" -> IdDz {reject}
    "maxFloat" -> IdDz {reject}
    "true" -> IdDz {reject}
    "safe" -> IdDz {reject}
    "Char2String" -> IdDz {reject}
    "String2Char" -> IdDz {reject}
    "modInt" -> IdDz {reject}
    "minInt" -> IdDz {reject}
    "keys" -> IdDz {reject}
    "values" -> IdDz {reject}
    "orElseBool" -> IdDz {reject}
    "findChar" -> IdDz {reject}
    "of" -> IdDz {reject}
    "logFloat" -> IdDz {reject}
    "cplusplus" -> IdDz {reject}
    "Id2String" -> IdDz {reject}
    "exponentFloat" -> IdDz {reject}
    "rtrim" -> IdDz {reject}
    "inKList" -> IdDz {reject}
    "SetItem" -> IdDz {reject}
    "andBool" -> IdDz {reject}

lexical restrictions
    %% follow restrictions
    "-" -/- [M].[a].[p]
    "==K" -/- [L].[i].[s].[t]
    "#" -/- [E].[S].[P].[I].[P].[E]
    "in" -/- [K].[L].[i].[s].[t]
    "#" -/- [E].[N].[O].[T].[D].[I].[R]
    "=" -/- [K].[L].[a].[b].[e].[l]
    "fresh" -/- [I].[d]
    "." -/- [M].[a].[p]
    "-" -/- [F].[l].[o].[a].[t]
    "replace" -/- [A].[l].[l]
    "=" -/- [K]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "#" -/- [E].[N].[O].[E].[N].[T]
    "#" -/- [E].[I].[S].[D].[I].[R]
    "=K" -/- [L].[a].[b].[e].[l]
    "=" -/- [L].[i].[s].[t]
    "~" -/- [I].[n].[t]
    "==K" -/- [L].[a].[b].[e].[l]
    "." -/- [L].[i].[s].[t]
    "fresh" -/- [I].[n].[t]
    "#" -/- [E].[A].[C].[C].[E].[S]
    "#" -/- [E].[O].[F]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "=" -/- [B].[a].[g]
    "=" -/- [K].[L].[i].[s].[t]
    "#" -/- [E].[N].[A].[M].[E].[T].[O].[O].[L].[O].[N].[G]
    "-" -/- [I].[n].[t]
    "#parse" -/- [I].[n].[p].[u].[t]
    "#parse" -/- [T].[o].[k].[e].[n]
    "=" -/- [I].[n].[t]
    "#" -/- [E].[L].[O].[O].[P]
    "." -/- [S].[e].[t]
    "#" -/- [E].[I].[N].[V].[A].[L]
    "-" -/- [S].[e].[t]
    "#" -/- [E].[B].[A].[D].[F]
    "=/=K" -/- [L].[i].[s].[t]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=" -/- [S].[e].[t]
    "=K" -/- [L].[i].[s].[t]
    "|" -/- [I].[n].[t]
    "=" -/- [M].[a].[p]


lexical syntax
    [\-\+]? [0-9]+ -> DzIntDz
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
    [\! \# \$ \% \* \+ \. \/ \< \= \> \? \@ \\ \^ \| \- \~][\! \# \$ \% \* \+ \. \/ \< \= \> \? \@ \\ \^ \| \- \~ \:]* -> VarSymDz
    "fpNaN" -> VarSymDz {reject}
    "#stdin" -> VarSymDz {reject}
    "updateMap" -> VarSymDz {reject}
    "directionalityChar" -> VarSymDz {reject}
    "%Float" -> VarSymDz {reject}
    "#stderr" -> VarSymDz {reject}
    "<Int" -> VarSymDz {reject}
    "stdcall" -> VarSymDz {reject}
    "hiding" -> VarSymDz {reject}
    "removeAll" -> VarSymDz {reject}
    ">String" -> VarSymDz {reject}
    "trim" -> VarSymDz {reject}
    "categoryChar" -> VarSymDz {reject}
    "let" -> VarSymDz {reject}
    "#read" -> VarSymDz {reject}
    "exponentBitsFloat" -> VarSymDz {reject}
    "#parseInModule" -> VarSymDz {reject}
    "!" -> VarSymDz {reject}
    "#" -> VarSymDz {reject}
    "#fi" -> VarSymDz {reject}
    "module" -> VarSymDz {reject}
    "(" -> VarSymDz {reject}
    ")" -> VarSymDz {reject}
    "ordChar" -> VarSymDz {reject}
    "then" -> VarSymDz {reject}
    "," -> VarSymDz {reject}
    "-" -> VarSymDz {reject}
    "." -> VarSymDz {reject}
    "Int2Float" -> VarSymDz {reject}
    "#inKList" -> VarSymDz {reject}
    "as" -> VarSymDz {reject}
    "sinFloat" -> VarSymDz {reject}
    "size" -> VarSymDz {reject}
    "getKLabel" -> VarSymDz {reject}
    ">=Int" -> VarSymDz {reject}
    "=/=KList" -> VarSymDz {reject}
    ":" -> VarSymDz {reject}
    "minFloat" -> VarSymDz {reject}
    ">=Float" -> VarSymDz {reject}
    ";" -> VarSymDz {reject}
    "tanFloat" -> VarSymDz {reject}
    "=" -> VarSymDz {reject}
    "String2Base" -> VarSymDz {reject}
    "@" -> VarSymDz {reject}
    "Base2String" -> VarSymDz {reject}
    "replaceFirst" -> VarSymDz {reject}
    "<=Set" -> VarSymDz {reject}
    "unsafe" -> VarSymDz {reject}
    "KLabel2String" -> VarSymDz {reject}
    "default" -> VarSymDz {reject}
    "isInfinite" -> VarSymDz {reject}
    "acosFloat" -> VarSymDz {reject}
    ".Map" -> VarSymDz {reject}
    "where" -> VarSymDz {reject}
    "[" -> VarSymDz {reject}
    "\\" -> VarSymDz {reject}
    "]" -> VarSymDz {reject}
    "xorBool" -> VarSymDz {reject}
    "##" -> VarSymDz {reject}
    "`" -> VarSymDz {reject}
    "#parse" -> VarSymDz {reject}
    "Infinity" -> VarSymDz {reject}
    "maxInt" -> VarSymDz {reject}
    "#stdout" -> VarSymDz {reject}
    "undef" -> VarSymDz {reject}
    "atanFloat" -> VarSymDz {reject}
    "#getc" -> VarSymDz {reject}
    "=Int" -> VarSymDz {reject}
    "==String" -> VarSymDz {reject}
    "rootFloat" -> VarSymDz {reject}
    "#noparse" -> VarSymDz {reject}
    "#tell" -> VarSymDz {reject}
    "minValueFloat" -> VarSymDz {reject}
    "{" -> VarSymDz {reject}
    "|" -> VarSymDz {reject}
    "}" -> VarSymDz {reject}
    "~" -> VarSymDz {reject}
    "isKResult" -> VarSymDz {reject}
    "#if" -> VarSymDz {reject}
    "xorInt" -> VarSymDz {reject}
    "#system" -> VarSymDz {reject}
    "notBool" -> VarSymDz {reject}
    "roundFloat" -> VarSymDz {reject}
    "do" -> VarSymDz {reject}
    "isNaN" -> VarSymDz {reject}
    "-Int" -> VarSymDz {reject}
    "=Bag" -> VarSymDz {reject}
    "lengthString" -> VarSymDz {reject}
    "^Int" -> VarSymDz {reject}
    "export" -> VarSymDz {reject}
    "floorFloat" -> VarSymDz {reject}
    "jvm" -> VarSymDz {reject}
    "#EISDIR" -> VarSymDz {reject}
    "#parseInput" -> VarSymDz {reject}
    "ltrim" -> VarSymDz {reject}
    "#istream" -> VarSymDz {reject}
    "~Int" -> VarSymDz {reject}
    "==K" -> VarSymDz {reject}
    "isBuiltin" -> VarSymDz {reject}
    "#ENOTDIR" -> VarSymDz {reject}
    "#systemResult" -> VarSymDz {reject}
    "sqrtFloat" -> VarSymDz {reject}
    "orBool" -> VarSymDz {reject}
    "#isDigit" -> VarSymDz {reject}
    "import" -> VarSymDz {reject}
    "countAllOccurrences" -> VarSymDz {reject}
    "infixr" -> VarSymDz {reject}
    "precisionFloat" -> VarSymDz {reject}
    ">Int" -> VarSymDz {reject}
    "#open" -> VarSymDz {reject}
    "replaceAll" -> VarSymDz {reject}
    "#ESPIPE" -> VarSymDz {reject}
    "newtype" -> VarSymDz {reject}
    "expFloat" -> VarSymDz {reject}
    "==KList" -> VarSymDz {reject}
    "==KLabel" -> VarSymDz {reject}
    "=KLabel" -> VarSymDz {reject}
    "#stat" -> VarSymDz {reject}
    "rfindChar" -> VarSymDz {reject}
    "#isWhiteSpace" -> VarSymDz {reject}
    "NaN" -> VarSymDz {reject}
    "=/=K" -> VarSymDz {reject}
    "class" -> VarSymDz {reject}
    "intersectSet" -> VarSymDz {reject}
    "minusInfinity" -> VarSymDz {reject}
    "-Set" -> VarSymDz {reject}
    "freshId" -> VarSymDz {reject}
    "ccall" -> VarSymDz {reject}
    "#tokenToString" -> VarSymDz {reject}
    "signFloat" -> VarSymDz {reject}
    "#then" -> VarSymDz {reject}
    "false" -> VarSymDz {reject}
    "#close" -> VarSymDz {reject}
    "^Float" -> VarSymDz {reject}
    "String2Int" -> VarSymDz {reject}
    "#freezer" -> VarSymDz {reject}
    "infixl" -> VarSymDz {reject}
    "-Float" -> VarSymDz {reject}
    "=Set" -> VarSymDz {reject}
    "+String" -> VarSymDz {reject}
    "ListItem" -> VarSymDz {reject}
    "fresh" -> VarSymDz {reject}
    "freshInt" -> VarSymDz {reject}
    "#opendir" -> VarSymDz {reject}
    "=/=Bool" -> VarSymDz {reject}
    "qualified" -> VarSymDz {reject}
    "()" -> VarSymDz {reject}
    "=List" -> VarSymDz {reject}
    "rfindString" -> VarSymDz {reject}
    "type" -> VarSymDz {reject}
    "Float2Int" -> VarSymDz {reject}
    "dummy" -> VarSymDz {reject}
    "findString" -> VarSymDz {reject}
    "EXPENT" -> VarSymDz {reject}
    "dividesInt" -> VarSymDz {reject}
    "else" -> VarSymDz {reject}
    "#EINVAL" -> VarSymDz {reject}
    "if" -> VarSymDz {reject}
    "case" -> VarSymDz {reject}
    "=/=Float" -> VarSymDz {reject}
    "in" -> VarSymDz {reject}
    "<<Int" -> VarSymDz {reject}
    "#EBADF" -> VarSymDz {reject}
    "cosFloat" -> VarSymDz {reject}
    "Float2String" -> VarSymDz {reject}
    "infix" -> VarSymDz {reject}
    "|->" -> VarSymDz {reject}
    "/Float" -> VarSymDz {reject}
    "<=String" -> VarSymDz {reject}
    ">=String" -> VarSymDz {reject}
    "=KList" -> VarSymDz {reject}
    "==Bag" -> VarSymDz {reject}
    "#configuration" -> VarSymDz {reject}
    "String2Id" -> VarSymDz {reject}
    "#seek" -> VarSymDz {reject}
    "==Bool" -> VarSymDz {reject}
    "divInt" -> VarSymDz {reject}
    "absInt" -> VarSymDz {reject}
    "bool2Int" -> VarSymDz {reject}
    "#ENAMETOOLONG" -> VarSymDz {reject}
    "::" -> VarSymDz {reject}
    ".List" -> VarSymDz {reject}
    "<=Float" -> VarSymDz {reject}
    ".Set" -> VarSymDz {reject}
    "dotnet" -> VarSymDz {reject}
    "ceilFloat" -> VarSymDz {reject}
    "chrChar" -> VarSymDz {reject}
    "randomRandom" -> VarSymDz {reject}
    "range" -> VarSymDz {reject}
    "plusInfinity" -> VarSymDz {reject}
    "foreign" -> VarSymDz {reject}
    "(..)" -> VarSymDz {reject}
    "/Int" -> VarSymDz {reject}
    "==Int" -> VarSymDz {reject}
    "#parseToken" -> VarSymDz {reject}
    "#ioError" -> VarSymDz {reject}
    "<String" -> VarSymDz {reject}
    "#ostream" -> VarSymDz {reject}
    "=/=String" -> VarSymDz {reject}
    "[]" -> VarSymDz {reject}
    "(->)" -> VarSymDz {reject}
    "#EACCES" -> VarSymDz {reject}
    "cool" -> VarSymDz {reject}
    ">Float" -> VarSymDz {reject}
    "significandFloat" -> VarSymDz {reject}
    "#noIO" -> VarSymDz {reject}
    "maxValueFloat" -> VarSymDz {reject}
    "IMPENT" -> VarSymDz {reject}
    "*Int" -> VarSymDz {reject}
    "<-" -> VarSymDz {reject}
    "<=Map" -> VarSymDz {reject}
    "#buffer" -> VarSymDz {reject}
    "deriving" -> VarSymDz {reject}
    "String2Float" -> VarSymDz {reject}
    "choice" -> VarSymDz {reject}
    "impliesBool" -> VarSymDz {reject}
    "andThenBool" -> VarSymDz {reject}
    ",)" -> VarSymDz {reject}
    "#ENOENT" -> VarSymDz {reject}
    "asinFloat" -> VarSymDz {reject}
    "instance" -> VarSymDz {reject}
    "data" -> VarSymDz {reject}
    ">>Int" -> VarSymDz {reject}
    "replace" -> VarSymDz {reject}
    "String2KLabel" -> VarSymDz {reject}
    "#ELOOP" -> VarSymDz {reject}
    "isToken" -> VarSymDz {reject}
    "substrString" -> VarSymDz {reject}
    "%Int" -> VarSymDz {reject}
    "#lstat" -> VarSymDz {reject}
    "+Float" -> VarSymDz {reject}
    "==Float" -> VarSymDz {reject}
    "atan2Float" -> VarSymDz {reject}
    "=>" -> VarSymDz {reject}
    "Int2String" -> VarSymDz {reject}
    "=K" -> VarSymDz {reject}
    "->" -> VarSymDz {reject}
    "absFloat" -> VarSymDz {reject}
    "maxFloat" -> VarSymDz {reject}
    "true" -> VarSymDz {reject}
    "safe" -> VarSymDz {reject}
    "Char2String" -> VarSymDz {reject}
    ".." -> VarSymDz {reject}
    "#else" -> VarSymDz {reject}
    "=Map" -> VarSymDz {reject}
    "<=Int" -> VarSymDz {reject}
    "String2Char" -> VarSymDz {reject}
    "modInt" -> VarSymDz {reject}
    "minInt" -> VarSymDz {reject}
    "keys" -> VarSymDz {reject}
    "(,{,})" -> VarSymDz {reject}
    "values" -> VarSymDz {reject}
    "#EOF" -> VarSymDz {reject}
    "orElseBool" -> VarSymDz {reject}
    "'#andBool" -> VarSymDz {reject}
    "=/=KLabel" -> VarSymDz {reject}
    "=/=Int" -> VarSymDz {reject}
    "+Int" -> VarSymDz {reject}
    "findChar" -> VarSymDz {reject}
    "--Float" -> VarSymDz {reject}
    "of" -> VarSymDz {reject}
    "=/=Bag" -> VarSymDz {reject}
    "logFloat" -> VarSymDz {reject}
    "cplusplus" -> VarSymDz {reject}
    "Id2String" -> VarSymDz {reject}
    "exponentFloat" -> VarSymDz {reject}
    "#token" -> VarSymDz {reject}
    "#write" -> VarSymDz {reject}
    "rtrim" -> VarSymDz {reject}
    "|Int" -> VarSymDz {reject}
    "*Float" -> VarSymDz {reject}
    "inKList" -> VarSymDz {reject}
    "<Float" -> VarSymDz {reject}
    "SetItem" -> VarSymDz {reject}
    "andBool" -> VarSymDz {reject}
    "#putc" -> VarSymDz {reject}
    "-Map" -> VarSymDz {reject}
    "&Int" -> VarSymDz {reject}
    [\:][\! \# \$ \% \* \+ \. \/ \< \= \> \? \@ \\ \^ \| \- \~ \:]* -> ConSymDz
    "fpNaN" -> ConSymDz {reject}
    "#stdin" -> ConSymDz {reject}
    "updateMap" -> ConSymDz {reject}
    "directionalityChar" -> ConSymDz {reject}
    "%Float" -> ConSymDz {reject}
    "#stderr" -> ConSymDz {reject}
    "<Int" -> ConSymDz {reject}
    "stdcall" -> ConSymDz {reject}
    "hiding" -> ConSymDz {reject}
    "removeAll" -> ConSymDz {reject}
    ">String" -> ConSymDz {reject}
    "trim" -> ConSymDz {reject}
    "categoryChar" -> ConSymDz {reject}
    "let" -> ConSymDz {reject}
    "#read" -> ConSymDz {reject}
    "exponentBitsFloat" -> ConSymDz {reject}
    "#parseInModule" -> ConSymDz {reject}
    "!" -> ConSymDz {reject}
    "#" -> ConSymDz {reject}
    "#fi" -> ConSymDz {reject}
    "module" -> ConSymDz {reject}
    "(" -> ConSymDz {reject}
    ")" -> ConSymDz {reject}
    "ordChar" -> ConSymDz {reject}
    "then" -> ConSymDz {reject}
    "," -> ConSymDz {reject}
    "-" -> ConSymDz {reject}
    "." -> ConSymDz {reject}
    "Int2Float" -> ConSymDz {reject}
    "#inKList" -> ConSymDz {reject}
    "as" -> ConSymDz {reject}
    "sinFloat" -> ConSymDz {reject}
    "size" -> ConSymDz {reject}
    "getKLabel" -> ConSymDz {reject}
    ">=Int" -> ConSymDz {reject}
    "=/=KList" -> ConSymDz {reject}
    ":" -> ConSymDz {reject}
    "minFloat" -> ConSymDz {reject}
    ">=Float" -> ConSymDz {reject}
    ";" -> ConSymDz {reject}
    "tanFloat" -> ConSymDz {reject}
    "=" -> ConSymDz {reject}
    "String2Base" -> ConSymDz {reject}
    "@" -> ConSymDz {reject}
    "Base2String" -> ConSymDz {reject}
    "replaceFirst" -> ConSymDz {reject}
    "<=Set" -> ConSymDz {reject}
    "unsafe" -> ConSymDz {reject}
    "KLabel2String" -> ConSymDz {reject}
    "default" -> ConSymDz {reject}
    "isInfinite" -> ConSymDz {reject}
    "acosFloat" -> ConSymDz {reject}
    ".Map" -> ConSymDz {reject}
    "where" -> ConSymDz {reject}
    "[" -> ConSymDz {reject}
    "\\" -> ConSymDz {reject}
    "]" -> ConSymDz {reject}
    "xorBool" -> ConSymDz {reject}
    "##" -> ConSymDz {reject}
    "`" -> ConSymDz {reject}
    "#parse" -> ConSymDz {reject}
    "Infinity" -> ConSymDz {reject}
    "maxInt" -> ConSymDz {reject}
    "#stdout" -> ConSymDz {reject}
    "undef" -> ConSymDz {reject}
    "atanFloat" -> ConSymDz {reject}
    "#getc" -> ConSymDz {reject}
    "=Int" -> ConSymDz {reject}
    "==String" -> ConSymDz {reject}
    "rootFloat" -> ConSymDz {reject}
    "#noparse" -> ConSymDz {reject}
    "#tell" -> ConSymDz {reject}
    "minValueFloat" -> ConSymDz {reject}
    "{" -> ConSymDz {reject}
    "|" -> ConSymDz {reject}
    "}" -> ConSymDz {reject}
    "~" -> ConSymDz {reject}
    "isKResult" -> ConSymDz {reject}
    "#if" -> ConSymDz {reject}
    "xorInt" -> ConSymDz {reject}
    "#system" -> ConSymDz {reject}
    "notBool" -> ConSymDz {reject}
    "roundFloat" -> ConSymDz {reject}
    "do" -> ConSymDz {reject}
    "isNaN" -> ConSymDz {reject}
    "-Int" -> ConSymDz {reject}
    "=Bag" -> ConSymDz {reject}
    "lengthString" -> ConSymDz {reject}
    "^Int" -> ConSymDz {reject}
    "export" -> ConSymDz {reject}
    "floorFloat" -> ConSymDz {reject}
    "jvm" -> ConSymDz {reject}
    "#EISDIR" -> ConSymDz {reject}
    "#parseInput" -> ConSymDz {reject}
    "ltrim" -> ConSymDz {reject}
    "#istream" -> ConSymDz {reject}
    "~Int" -> ConSymDz {reject}
    "==K" -> ConSymDz {reject}
    "isBuiltin" -> ConSymDz {reject}
    "#ENOTDIR" -> ConSymDz {reject}
    "#systemResult" -> ConSymDz {reject}
    "sqrtFloat" -> ConSymDz {reject}
    "orBool" -> ConSymDz {reject}
    "#isDigit" -> ConSymDz {reject}
    "import" -> ConSymDz {reject}
    "countAllOccurrences" -> ConSymDz {reject}
    "infixr" -> ConSymDz {reject}
    "precisionFloat" -> ConSymDz {reject}
    ">Int" -> ConSymDz {reject}
    "#open" -> ConSymDz {reject}
    "replaceAll" -> ConSymDz {reject}
    "#ESPIPE" -> ConSymDz {reject}
    "newtype" -> ConSymDz {reject}
    "expFloat" -> ConSymDz {reject}
    "==KList" -> ConSymDz {reject}
    "==KLabel" -> ConSymDz {reject}
    "=KLabel" -> ConSymDz {reject}
    "#stat" -> ConSymDz {reject}
    "rfindChar" -> ConSymDz {reject}
    "#isWhiteSpace" -> ConSymDz {reject}
    "NaN" -> ConSymDz {reject}
    "=/=K" -> ConSymDz {reject}
    "class" -> ConSymDz {reject}
    "intersectSet" -> ConSymDz {reject}
    "minusInfinity" -> ConSymDz {reject}
    "-Set" -> ConSymDz {reject}
    "freshId" -> ConSymDz {reject}
    "ccall" -> ConSymDz {reject}
    "#tokenToString" -> ConSymDz {reject}
    "signFloat" -> ConSymDz {reject}
    "#then" -> ConSymDz {reject}
    "false" -> ConSymDz {reject}
    "#close" -> ConSymDz {reject}
    "^Float" -> ConSymDz {reject}
    "String2Int" -> ConSymDz {reject}
    "#freezer" -> ConSymDz {reject}
    "infixl" -> ConSymDz {reject}
    "-Float" -> ConSymDz {reject}
    "=Set" -> ConSymDz {reject}
    "+String" -> ConSymDz {reject}
    "ListItem" -> ConSymDz {reject}
    "fresh" -> ConSymDz {reject}
    "freshInt" -> ConSymDz {reject}
    "#opendir" -> ConSymDz {reject}
    "=/=Bool" -> ConSymDz {reject}
    "qualified" -> ConSymDz {reject}
    "()" -> ConSymDz {reject}
    "=List" -> ConSymDz {reject}
    "rfindString" -> ConSymDz {reject}
    "type" -> ConSymDz {reject}
    "Float2Int" -> ConSymDz {reject}
    "dummy" -> ConSymDz {reject}
    "findString" -> ConSymDz {reject}
    "EXPENT" -> ConSymDz {reject}
    "dividesInt" -> ConSymDz {reject}
    "else" -> ConSymDz {reject}
    "#EINVAL" -> ConSymDz {reject}
    "if" -> ConSymDz {reject}
    "case" -> ConSymDz {reject}
    "=/=Float" -> ConSymDz {reject}
    "in" -> ConSymDz {reject}
    "<<Int" -> ConSymDz {reject}
    "#EBADF" -> ConSymDz {reject}
    "cosFloat" -> ConSymDz {reject}
    "Float2String" -> ConSymDz {reject}
    "infix" -> ConSymDz {reject}
    "|->" -> ConSymDz {reject}
    "/Float" -> ConSymDz {reject}
    "<=String" -> ConSymDz {reject}
    ">=String" -> ConSymDz {reject}
    "=KList" -> ConSymDz {reject}
    "==Bag" -> ConSymDz {reject}
    "#configuration" -> ConSymDz {reject}
    "String2Id" -> ConSymDz {reject}
    "#seek" -> ConSymDz {reject}
    "==Bool" -> ConSymDz {reject}
    "divInt" -> ConSymDz {reject}
    "absInt" -> ConSymDz {reject}
    "bool2Int" -> ConSymDz {reject}
    "#ENAMETOOLONG" -> ConSymDz {reject}
    "::" -> ConSymDz {reject}
    ".List" -> ConSymDz {reject}
    "<=Float" -> ConSymDz {reject}
    ".Set" -> ConSymDz {reject}
    "dotnet" -> ConSymDz {reject}
    "ceilFloat" -> ConSymDz {reject}
    "chrChar" -> ConSymDz {reject}
    "randomRandom" -> ConSymDz {reject}
    "range" -> ConSymDz {reject}
    "plusInfinity" -> ConSymDz {reject}
    "foreign" -> ConSymDz {reject}
    "(..)" -> ConSymDz {reject}
    "/Int" -> ConSymDz {reject}
    "==Int" -> ConSymDz {reject}
    "#parseToken" -> ConSymDz {reject}
    "#ioError" -> ConSymDz {reject}
    "<String" -> ConSymDz {reject}
    "#ostream" -> ConSymDz {reject}
    "=/=String" -> ConSymDz {reject}
    "[]" -> ConSymDz {reject}
    "(->)" -> ConSymDz {reject}
    "#EACCES" -> ConSymDz {reject}
    "cool" -> ConSymDz {reject}
    ">Float" -> ConSymDz {reject}
    "significandFloat" -> ConSymDz {reject}
    "#noIO" -> ConSymDz {reject}
    "maxValueFloat" -> ConSymDz {reject}
    "IMPENT" -> ConSymDz {reject}
    "*Int" -> ConSymDz {reject}
    "<-" -> ConSymDz {reject}
    "<=Map" -> ConSymDz {reject}
    "#buffer" -> ConSymDz {reject}
    "deriving" -> ConSymDz {reject}
    "String2Float" -> ConSymDz {reject}
    "choice" -> ConSymDz {reject}
    "impliesBool" -> ConSymDz {reject}
    "andThenBool" -> ConSymDz {reject}
    ",)" -> ConSymDz {reject}
    "#ENOENT" -> ConSymDz {reject}
    "asinFloat" -> ConSymDz {reject}
    "instance" -> ConSymDz {reject}
    "data" -> ConSymDz {reject}
    ">>Int" -> ConSymDz {reject}
    "replace" -> ConSymDz {reject}
    "String2KLabel" -> ConSymDz {reject}
    "#ELOOP" -> ConSymDz {reject}
    "isToken" -> ConSymDz {reject}
    "substrString" -> ConSymDz {reject}
    "%Int" -> ConSymDz {reject}
    "#lstat" -> ConSymDz {reject}
    "+Float" -> ConSymDz {reject}
    "==Float" -> ConSymDz {reject}
    "atan2Float" -> ConSymDz {reject}
    "=>" -> ConSymDz {reject}
    "Int2String" -> ConSymDz {reject}
    "=K" -> ConSymDz {reject}
    "->" -> ConSymDz {reject}
    "absFloat" -> ConSymDz {reject}
    "maxFloat" -> ConSymDz {reject}
    "true" -> ConSymDz {reject}
    "safe" -> ConSymDz {reject}
    "Char2String" -> ConSymDz {reject}
    ".." -> ConSymDz {reject}
    "#else" -> ConSymDz {reject}
    "=Map" -> ConSymDz {reject}
    "<=Int" -> ConSymDz {reject}
    "String2Char" -> ConSymDz {reject}
    "modInt" -> ConSymDz {reject}
    "minInt" -> ConSymDz {reject}
    "keys" -> ConSymDz {reject}
    "(,{,})" -> ConSymDz {reject}
    "values" -> ConSymDz {reject}
    "#EOF" -> ConSymDz {reject}
    "orElseBool" -> ConSymDz {reject}
    "'#andBool" -> ConSymDz {reject}
    "=/=KLabel" -> ConSymDz {reject}
    "=/=Int" -> ConSymDz {reject}
    "+Int" -> ConSymDz {reject}
    "findChar" -> ConSymDz {reject}
    "--Float" -> ConSymDz {reject}
    "of" -> ConSymDz {reject}
    "=/=Bag" -> ConSymDz {reject}
    "logFloat" -> ConSymDz {reject}
    "cplusplus" -> ConSymDz {reject}
    "Id2String" -> ConSymDz {reject}
    "exponentFloat" -> ConSymDz {reject}
    "#token" -> ConSymDz {reject}
    "#write" -> ConSymDz {reject}
    "rtrim" -> ConSymDz {reject}
    "|Int" -> ConSymDz {reject}
    "*Float" -> ConSymDz {reject}
    "inKList" -> ConSymDz {reject}
    "<Float" -> ConSymDz {reject}
    "SetItem" -> ConSymDz {reject}
    "andBool" -> ConSymDz {reject}
    "#putc" -> ConSymDz {reject}
    "-Map" -> ConSymDz {reject}
    "&Int" -> ConSymDz {reject}
    [a-z \_][0-9 a-z A-Z \' \_]* -> VarIdInnerDz
    "fpNaN" -> VarIdInnerDz {reject}
    "#stdin" -> VarIdInnerDz {reject}
    "updateMap" -> VarIdInnerDz {reject}
    "directionalityChar" -> VarIdInnerDz {reject}
    "%Float" -> VarIdInnerDz {reject}
    "#stderr" -> VarIdInnerDz {reject}
    "<Int" -> VarIdInnerDz {reject}
    "stdcall" -> VarIdInnerDz {reject}
    "hiding" -> VarIdInnerDz {reject}
    "removeAll" -> VarIdInnerDz {reject}
    ">String" -> VarIdInnerDz {reject}
    "trim" -> VarIdInnerDz {reject}
    "categoryChar" -> VarIdInnerDz {reject}
    "let" -> VarIdInnerDz {reject}
    "#read" -> VarIdInnerDz {reject}
    "exponentBitsFloat" -> VarIdInnerDz {reject}
    "#parseInModule" -> VarIdInnerDz {reject}
    "!" -> VarIdInnerDz {reject}
    "#" -> VarIdInnerDz {reject}
    "#fi" -> VarIdInnerDz {reject}
    "module" -> VarIdInnerDz {reject}
    "(" -> VarIdInnerDz {reject}
    ")" -> VarIdInnerDz {reject}
    "ordChar" -> VarIdInnerDz {reject}
    "then" -> VarIdInnerDz {reject}
    "," -> VarIdInnerDz {reject}
    "-" -> VarIdInnerDz {reject}
    "." -> VarIdInnerDz {reject}
    "Int2Float" -> VarIdInnerDz {reject}
    "#inKList" -> VarIdInnerDz {reject}
    "as" -> VarIdInnerDz {reject}
    "sinFloat" -> VarIdInnerDz {reject}
    "size" -> VarIdInnerDz {reject}
    "getKLabel" -> VarIdInnerDz {reject}
    ">=Int" -> VarIdInnerDz {reject}
    "=/=KList" -> VarIdInnerDz {reject}
    ":" -> VarIdInnerDz {reject}
    "minFloat" -> VarIdInnerDz {reject}
    ">=Float" -> VarIdInnerDz {reject}
    ";" -> VarIdInnerDz {reject}
    "tanFloat" -> VarIdInnerDz {reject}
    "=" -> VarIdInnerDz {reject}
    "String2Base" -> VarIdInnerDz {reject}
    "@" -> VarIdInnerDz {reject}
    "Base2String" -> VarIdInnerDz {reject}
    "replaceFirst" -> VarIdInnerDz {reject}
    "<=Set" -> VarIdInnerDz {reject}
    "unsafe" -> VarIdInnerDz {reject}
    "KLabel2String" -> VarIdInnerDz {reject}
    "default" -> VarIdInnerDz {reject}
    "isInfinite" -> VarIdInnerDz {reject}
    "acosFloat" -> VarIdInnerDz {reject}
    ".Map" -> VarIdInnerDz {reject}
    "where" -> VarIdInnerDz {reject}
    "[" -> VarIdInnerDz {reject}
    "\\" -> VarIdInnerDz {reject}
    "]" -> VarIdInnerDz {reject}
    "xorBool" -> VarIdInnerDz {reject}
    "##" -> VarIdInnerDz {reject}
    "`" -> VarIdInnerDz {reject}
    "#parse" -> VarIdInnerDz {reject}
    "Infinity" -> VarIdInnerDz {reject}
    "maxInt" -> VarIdInnerDz {reject}
    "#stdout" -> VarIdInnerDz {reject}
    "undef" -> VarIdInnerDz {reject}
    "atanFloat" -> VarIdInnerDz {reject}
    "#getc" -> VarIdInnerDz {reject}
    "=Int" -> VarIdInnerDz {reject}
    "==String" -> VarIdInnerDz {reject}
    "rootFloat" -> VarIdInnerDz {reject}
    "#noparse" -> VarIdInnerDz {reject}
    "#tell" -> VarIdInnerDz {reject}
    "minValueFloat" -> VarIdInnerDz {reject}
    "{" -> VarIdInnerDz {reject}
    "|" -> VarIdInnerDz {reject}
    "}" -> VarIdInnerDz {reject}
    "~" -> VarIdInnerDz {reject}
    "isKResult" -> VarIdInnerDz {reject}
    "#if" -> VarIdInnerDz {reject}
    "xorInt" -> VarIdInnerDz {reject}
    "#system" -> VarIdInnerDz {reject}
    "notBool" -> VarIdInnerDz {reject}
    "roundFloat" -> VarIdInnerDz {reject}
    "do" -> VarIdInnerDz {reject}
    "isNaN" -> VarIdInnerDz {reject}
    "-Int" -> VarIdInnerDz {reject}
    "=Bag" -> VarIdInnerDz {reject}
    "lengthString" -> VarIdInnerDz {reject}
    "^Int" -> VarIdInnerDz {reject}
    "export" -> VarIdInnerDz {reject}
    "floorFloat" -> VarIdInnerDz {reject}
    "jvm" -> VarIdInnerDz {reject}
    "#EISDIR" -> VarIdInnerDz {reject}
    "#parseInput" -> VarIdInnerDz {reject}
    "ltrim" -> VarIdInnerDz {reject}
    "#istream" -> VarIdInnerDz {reject}
    "~Int" -> VarIdInnerDz {reject}
    "==K" -> VarIdInnerDz {reject}
    "isBuiltin" -> VarIdInnerDz {reject}
    "#ENOTDIR" -> VarIdInnerDz {reject}
    "#systemResult" -> VarIdInnerDz {reject}
    "sqrtFloat" -> VarIdInnerDz {reject}
    "orBool" -> VarIdInnerDz {reject}
    "#isDigit" -> VarIdInnerDz {reject}
    "import" -> VarIdInnerDz {reject}
    "countAllOccurrences" -> VarIdInnerDz {reject}
    "infixr" -> VarIdInnerDz {reject}
    "precisionFloat" -> VarIdInnerDz {reject}
    ">Int" -> VarIdInnerDz {reject}
    "#open" -> VarIdInnerDz {reject}
    "replaceAll" -> VarIdInnerDz {reject}
    "#ESPIPE" -> VarIdInnerDz {reject}
    "newtype" -> VarIdInnerDz {reject}
    "expFloat" -> VarIdInnerDz {reject}
    "==KList" -> VarIdInnerDz {reject}
    "==KLabel" -> VarIdInnerDz {reject}
    "=KLabel" -> VarIdInnerDz {reject}
    "#stat" -> VarIdInnerDz {reject}
    "rfindChar" -> VarIdInnerDz {reject}
    "#isWhiteSpace" -> VarIdInnerDz {reject}
    "NaN" -> VarIdInnerDz {reject}
    "=/=K" -> VarIdInnerDz {reject}
    "class" -> VarIdInnerDz {reject}
    "intersectSet" -> VarIdInnerDz {reject}
    "minusInfinity" -> VarIdInnerDz {reject}
    "-Set" -> VarIdInnerDz {reject}
    "freshId" -> VarIdInnerDz {reject}
    "ccall" -> VarIdInnerDz {reject}
    "#tokenToString" -> VarIdInnerDz {reject}
    "signFloat" -> VarIdInnerDz {reject}
    "#then" -> VarIdInnerDz {reject}
    "false" -> VarIdInnerDz {reject}
    "#close" -> VarIdInnerDz {reject}
    "^Float" -> VarIdInnerDz {reject}
    "String2Int" -> VarIdInnerDz {reject}
    "#freezer" -> VarIdInnerDz {reject}
    "infixl" -> VarIdInnerDz {reject}
    "-Float" -> VarIdInnerDz {reject}
    "=Set" -> VarIdInnerDz {reject}
    "+String" -> VarIdInnerDz {reject}
    "ListItem" -> VarIdInnerDz {reject}
    "fresh" -> VarIdInnerDz {reject}
    "freshInt" -> VarIdInnerDz {reject}
    "#opendir" -> VarIdInnerDz {reject}
    "=/=Bool" -> VarIdInnerDz {reject}
    "qualified" -> VarIdInnerDz {reject}
    "()" -> VarIdInnerDz {reject}
    "=List" -> VarIdInnerDz {reject}
    "rfindString" -> VarIdInnerDz {reject}
    "type" -> VarIdInnerDz {reject}
    "Float2Int" -> VarIdInnerDz {reject}
    "dummy" -> VarIdInnerDz {reject}
    "findString" -> VarIdInnerDz {reject}
    "EXPENT" -> VarIdInnerDz {reject}
    "dividesInt" -> VarIdInnerDz {reject}
    "else" -> VarIdInnerDz {reject}
    "#EINVAL" -> VarIdInnerDz {reject}
    "if" -> VarIdInnerDz {reject}
    "case" -> VarIdInnerDz {reject}
    "=/=Float" -> VarIdInnerDz {reject}
    "in" -> VarIdInnerDz {reject}
    "<<Int" -> VarIdInnerDz {reject}
    "#EBADF" -> VarIdInnerDz {reject}
    "cosFloat" -> VarIdInnerDz {reject}
    "Float2String" -> VarIdInnerDz {reject}
    "infix" -> VarIdInnerDz {reject}
    "|->" -> VarIdInnerDz {reject}
    "/Float" -> VarIdInnerDz {reject}
    "<=String" -> VarIdInnerDz {reject}
    ">=String" -> VarIdInnerDz {reject}
    "=KList" -> VarIdInnerDz {reject}
    "==Bag" -> VarIdInnerDz {reject}
    "#configuration" -> VarIdInnerDz {reject}
    "String2Id" -> VarIdInnerDz {reject}
    "#seek" -> VarIdInnerDz {reject}
    "==Bool" -> VarIdInnerDz {reject}
    "divInt" -> VarIdInnerDz {reject}
    "absInt" -> VarIdInnerDz {reject}
    "bool2Int" -> VarIdInnerDz {reject}
    "#ENAMETOOLONG" -> VarIdInnerDz {reject}
    "::" -> VarIdInnerDz {reject}
    ".List" -> VarIdInnerDz {reject}
    "<=Float" -> VarIdInnerDz {reject}
    ".Set" -> VarIdInnerDz {reject}
    "dotnet" -> VarIdInnerDz {reject}
    "ceilFloat" -> VarIdInnerDz {reject}
    "chrChar" -> VarIdInnerDz {reject}
    "randomRandom" -> VarIdInnerDz {reject}
    "range" -> VarIdInnerDz {reject}
    "plusInfinity" -> VarIdInnerDz {reject}
    "foreign" -> VarIdInnerDz {reject}
    "(..)" -> VarIdInnerDz {reject}
    "/Int" -> VarIdInnerDz {reject}
    "==Int" -> VarIdInnerDz {reject}
    "#parseToken" -> VarIdInnerDz {reject}
    "#ioError" -> VarIdInnerDz {reject}
    "<String" -> VarIdInnerDz {reject}
    "#ostream" -> VarIdInnerDz {reject}
    "=/=String" -> VarIdInnerDz {reject}
    "[]" -> VarIdInnerDz {reject}
    "(->)" -> VarIdInnerDz {reject}
    "#EACCES" -> VarIdInnerDz {reject}
    "cool" -> VarIdInnerDz {reject}
    ">Float" -> VarIdInnerDz {reject}
    "significandFloat" -> VarIdInnerDz {reject}
    "#noIO" -> VarIdInnerDz {reject}
    "maxValueFloat" -> VarIdInnerDz {reject}
    "IMPENT" -> VarIdInnerDz {reject}
    "*Int" -> VarIdInnerDz {reject}
    "<-" -> VarIdInnerDz {reject}
    "<=Map" -> VarIdInnerDz {reject}
    "#buffer" -> VarIdInnerDz {reject}
    "deriving" -> VarIdInnerDz {reject}
    "String2Float" -> VarIdInnerDz {reject}
    "choice" -> VarIdInnerDz {reject}
    "impliesBool" -> VarIdInnerDz {reject}
    "andThenBool" -> VarIdInnerDz {reject}
    ",)" -> VarIdInnerDz {reject}
    "#ENOENT" -> VarIdInnerDz {reject}
    "asinFloat" -> VarIdInnerDz {reject}
    "instance" -> VarIdInnerDz {reject}
    "data" -> VarIdInnerDz {reject}
    ">>Int" -> VarIdInnerDz {reject}
    "replace" -> VarIdInnerDz {reject}
    "String2KLabel" -> VarIdInnerDz {reject}
    "#ELOOP" -> VarIdInnerDz {reject}
    "isToken" -> VarIdInnerDz {reject}
    "substrString" -> VarIdInnerDz {reject}
    "%Int" -> VarIdInnerDz {reject}
    "#lstat" -> VarIdInnerDz {reject}
    "+Float" -> VarIdInnerDz {reject}
    "==Float" -> VarIdInnerDz {reject}
    "atan2Float" -> VarIdInnerDz {reject}
    "=>" -> VarIdInnerDz {reject}
    "Int2String" -> VarIdInnerDz {reject}
    "=K" -> VarIdInnerDz {reject}
    "->" -> VarIdInnerDz {reject}
    "absFloat" -> VarIdInnerDz {reject}
    "maxFloat" -> VarIdInnerDz {reject}
    "true" -> VarIdInnerDz {reject}
    "safe" -> VarIdInnerDz {reject}
    "Char2String" -> VarIdInnerDz {reject}
    ".." -> VarIdInnerDz {reject}
    "#else" -> VarIdInnerDz {reject}
    "=Map" -> VarIdInnerDz {reject}
    "<=Int" -> VarIdInnerDz {reject}
    "String2Char" -> VarIdInnerDz {reject}
    "modInt" -> VarIdInnerDz {reject}
    "minInt" -> VarIdInnerDz {reject}
    "keys" -> VarIdInnerDz {reject}
    "(,{,})" -> VarIdInnerDz {reject}
    "values" -> VarIdInnerDz {reject}
    "#EOF" -> VarIdInnerDz {reject}
    "orElseBool" -> VarIdInnerDz {reject}
    "'#andBool" -> VarIdInnerDz {reject}
    "=/=KLabel" -> VarIdInnerDz {reject}
    "=/=Int" -> VarIdInnerDz {reject}
    "+Int" -> VarIdInnerDz {reject}
    "findChar" -> VarIdInnerDz {reject}
    "--Float" -> VarIdInnerDz {reject}
    "of" -> VarIdInnerDz {reject}
    "=/=Bag" -> VarIdInnerDz {reject}
    "logFloat" -> VarIdInnerDz {reject}
    "cplusplus" -> VarIdInnerDz {reject}
    "Id2String" -> VarIdInnerDz {reject}
    "exponentFloat" -> VarIdInnerDz {reject}
    "#token" -> VarIdInnerDz {reject}
    "#write" -> VarIdInnerDz {reject}
    "rtrim" -> VarIdInnerDz {reject}
    "|Int" -> VarIdInnerDz {reject}
    "*Float" -> VarIdInnerDz {reject}
    "inKList" -> VarIdInnerDz {reject}
    "<Float" -> VarIdInnerDz {reject}
    "SetItem" -> VarIdInnerDz {reject}
    "andBool" -> VarIdInnerDz {reject}
    "#putc" -> VarIdInnerDz {reject}
    "-Map" -> VarIdInnerDz {reject}
    "&Int" -> VarIdInnerDz {reject}
    [A-Z][0-9 a-z A-Z \' \_]* -> ConIdInnerDz
    "fpNaN" -> ConIdInnerDz {reject}
    "#stdin" -> ConIdInnerDz {reject}
    "updateMap" -> ConIdInnerDz {reject}
    "directionalityChar" -> ConIdInnerDz {reject}
    "%Float" -> ConIdInnerDz {reject}
    "#stderr" -> ConIdInnerDz {reject}
    "<Int" -> ConIdInnerDz {reject}
    "stdcall" -> ConIdInnerDz {reject}
    "hiding" -> ConIdInnerDz {reject}
    "removeAll" -> ConIdInnerDz {reject}
    ">String" -> ConIdInnerDz {reject}
    "trim" -> ConIdInnerDz {reject}
    "categoryChar" -> ConIdInnerDz {reject}
    "let" -> ConIdInnerDz {reject}
    "#read" -> ConIdInnerDz {reject}
    "exponentBitsFloat" -> ConIdInnerDz {reject}
    "#parseInModule" -> ConIdInnerDz {reject}
    "!" -> ConIdInnerDz {reject}
    "#" -> ConIdInnerDz {reject}
    "#fi" -> ConIdInnerDz {reject}
    "module" -> ConIdInnerDz {reject}
    "(" -> ConIdInnerDz {reject}
    ")" -> ConIdInnerDz {reject}
    "ordChar" -> ConIdInnerDz {reject}
    "then" -> ConIdInnerDz {reject}
    "," -> ConIdInnerDz {reject}
    "-" -> ConIdInnerDz {reject}
    "." -> ConIdInnerDz {reject}
    "Int2Float" -> ConIdInnerDz {reject}
    "#inKList" -> ConIdInnerDz {reject}
    "as" -> ConIdInnerDz {reject}
    "sinFloat" -> ConIdInnerDz {reject}
    "size" -> ConIdInnerDz {reject}
    "getKLabel" -> ConIdInnerDz {reject}
    ">=Int" -> ConIdInnerDz {reject}
    "=/=KList" -> ConIdInnerDz {reject}
    ":" -> ConIdInnerDz {reject}
    "minFloat" -> ConIdInnerDz {reject}
    ">=Float" -> ConIdInnerDz {reject}
    ";" -> ConIdInnerDz {reject}
    "tanFloat" -> ConIdInnerDz {reject}
    "=" -> ConIdInnerDz {reject}
    "String2Base" -> ConIdInnerDz {reject}
    "@" -> ConIdInnerDz {reject}
    "Base2String" -> ConIdInnerDz {reject}
    "replaceFirst" -> ConIdInnerDz {reject}
    "<=Set" -> ConIdInnerDz {reject}
    "unsafe" -> ConIdInnerDz {reject}
    "KLabel2String" -> ConIdInnerDz {reject}
    "default" -> ConIdInnerDz {reject}
    "isInfinite" -> ConIdInnerDz {reject}
    "acosFloat" -> ConIdInnerDz {reject}
    ".Map" -> ConIdInnerDz {reject}
    "where" -> ConIdInnerDz {reject}
    "[" -> ConIdInnerDz {reject}
    "\\" -> ConIdInnerDz {reject}
    "]" -> ConIdInnerDz {reject}
    "xorBool" -> ConIdInnerDz {reject}
    "##" -> ConIdInnerDz {reject}
    "`" -> ConIdInnerDz {reject}
    "#parse" -> ConIdInnerDz {reject}
    "Infinity" -> ConIdInnerDz {reject}
    "maxInt" -> ConIdInnerDz {reject}
    "#stdout" -> ConIdInnerDz {reject}
    "undef" -> ConIdInnerDz {reject}
    "atanFloat" -> ConIdInnerDz {reject}
    "#getc" -> ConIdInnerDz {reject}
    "=Int" -> ConIdInnerDz {reject}
    "==String" -> ConIdInnerDz {reject}
    "rootFloat" -> ConIdInnerDz {reject}
    "#noparse" -> ConIdInnerDz {reject}
    "#tell" -> ConIdInnerDz {reject}
    "minValueFloat" -> ConIdInnerDz {reject}
    "{" -> ConIdInnerDz {reject}
    "|" -> ConIdInnerDz {reject}
    "}" -> ConIdInnerDz {reject}
    "~" -> ConIdInnerDz {reject}
    "isKResult" -> ConIdInnerDz {reject}
    "#if" -> ConIdInnerDz {reject}
    "xorInt" -> ConIdInnerDz {reject}
    "#system" -> ConIdInnerDz {reject}
    "notBool" -> ConIdInnerDz {reject}
    "roundFloat" -> ConIdInnerDz {reject}
    "do" -> ConIdInnerDz {reject}
    "isNaN" -> ConIdInnerDz {reject}
    "-Int" -> ConIdInnerDz {reject}
    "=Bag" -> ConIdInnerDz {reject}
    "lengthString" -> ConIdInnerDz {reject}
    "^Int" -> ConIdInnerDz {reject}
    "export" -> ConIdInnerDz {reject}
    "floorFloat" -> ConIdInnerDz {reject}
    "jvm" -> ConIdInnerDz {reject}
    "#EISDIR" -> ConIdInnerDz {reject}
    "#parseInput" -> ConIdInnerDz {reject}
    "ltrim" -> ConIdInnerDz {reject}
    "#istream" -> ConIdInnerDz {reject}
    "~Int" -> ConIdInnerDz {reject}
    "==K" -> ConIdInnerDz {reject}
    "isBuiltin" -> ConIdInnerDz {reject}
    "#ENOTDIR" -> ConIdInnerDz {reject}
    "#systemResult" -> ConIdInnerDz {reject}
    "sqrtFloat" -> ConIdInnerDz {reject}
    "orBool" -> ConIdInnerDz {reject}
    "#isDigit" -> ConIdInnerDz {reject}
    "import" -> ConIdInnerDz {reject}
    "countAllOccurrences" -> ConIdInnerDz {reject}
    "infixr" -> ConIdInnerDz {reject}
    "precisionFloat" -> ConIdInnerDz {reject}
    ">Int" -> ConIdInnerDz {reject}
    "#open" -> ConIdInnerDz {reject}
    "replaceAll" -> ConIdInnerDz {reject}
    "#ESPIPE" -> ConIdInnerDz {reject}
    "newtype" -> ConIdInnerDz {reject}
    "expFloat" -> ConIdInnerDz {reject}
    "==KList" -> ConIdInnerDz {reject}
    "==KLabel" -> ConIdInnerDz {reject}
    "=KLabel" -> ConIdInnerDz {reject}
    "#stat" -> ConIdInnerDz {reject}
    "rfindChar" -> ConIdInnerDz {reject}
    "#isWhiteSpace" -> ConIdInnerDz {reject}
    "NaN" -> ConIdInnerDz {reject}
    "=/=K" -> ConIdInnerDz {reject}
    "class" -> ConIdInnerDz {reject}
    "intersectSet" -> ConIdInnerDz {reject}
    "minusInfinity" -> ConIdInnerDz {reject}
    "-Set" -> ConIdInnerDz {reject}
    "freshId" -> ConIdInnerDz {reject}
    "ccall" -> ConIdInnerDz {reject}
    "#tokenToString" -> ConIdInnerDz {reject}
    "signFloat" -> ConIdInnerDz {reject}
    "#then" -> ConIdInnerDz {reject}
    "false" -> ConIdInnerDz {reject}
    "#close" -> ConIdInnerDz {reject}
    "^Float" -> ConIdInnerDz {reject}
    "String2Int" -> ConIdInnerDz {reject}
    "#freezer" -> ConIdInnerDz {reject}
    "infixl" -> ConIdInnerDz {reject}
    "-Float" -> ConIdInnerDz {reject}
    "=Set" -> ConIdInnerDz {reject}
    "+String" -> ConIdInnerDz {reject}
    "ListItem" -> ConIdInnerDz {reject}
    "fresh" -> ConIdInnerDz {reject}
    "freshInt" -> ConIdInnerDz {reject}
    "#opendir" -> ConIdInnerDz {reject}
    "=/=Bool" -> ConIdInnerDz {reject}
    "qualified" -> ConIdInnerDz {reject}
    "()" -> ConIdInnerDz {reject}
    "=List" -> ConIdInnerDz {reject}
    "rfindString" -> ConIdInnerDz {reject}
    "type" -> ConIdInnerDz {reject}
    "Float2Int" -> ConIdInnerDz {reject}
    "dummy" -> ConIdInnerDz {reject}
    "findString" -> ConIdInnerDz {reject}
    "EXPENT" -> ConIdInnerDz {reject}
    "dividesInt" -> ConIdInnerDz {reject}
    "else" -> ConIdInnerDz {reject}
    "#EINVAL" -> ConIdInnerDz {reject}
    "if" -> ConIdInnerDz {reject}
    "case" -> ConIdInnerDz {reject}
    "=/=Float" -> ConIdInnerDz {reject}
    "in" -> ConIdInnerDz {reject}
    "<<Int" -> ConIdInnerDz {reject}
    "#EBADF" -> ConIdInnerDz {reject}
    "cosFloat" -> ConIdInnerDz {reject}
    "Float2String" -> ConIdInnerDz {reject}
    "infix" -> ConIdInnerDz {reject}
    "|->" -> ConIdInnerDz {reject}
    "/Float" -> ConIdInnerDz {reject}
    "<=String" -> ConIdInnerDz {reject}
    ">=String" -> ConIdInnerDz {reject}
    "=KList" -> ConIdInnerDz {reject}
    "==Bag" -> ConIdInnerDz {reject}
    "#configuration" -> ConIdInnerDz {reject}
    "String2Id" -> ConIdInnerDz {reject}
    "#seek" -> ConIdInnerDz {reject}
    "==Bool" -> ConIdInnerDz {reject}
    "divInt" -> ConIdInnerDz {reject}
    "absInt" -> ConIdInnerDz {reject}
    "bool2Int" -> ConIdInnerDz {reject}
    "#ENAMETOOLONG" -> ConIdInnerDz {reject}
    "::" -> ConIdInnerDz {reject}
    ".List" -> ConIdInnerDz {reject}
    "<=Float" -> ConIdInnerDz {reject}
    ".Set" -> ConIdInnerDz {reject}
    "dotnet" -> ConIdInnerDz {reject}
    "ceilFloat" -> ConIdInnerDz {reject}
    "chrChar" -> ConIdInnerDz {reject}
    "randomRandom" -> ConIdInnerDz {reject}
    "range" -> ConIdInnerDz {reject}
    "plusInfinity" -> ConIdInnerDz {reject}
    "foreign" -> ConIdInnerDz {reject}
    "(..)" -> ConIdInnerDz {reject}
    "/Int" -> ConIdInnerDz {reject}
    "==Int" -> ConIdInnerDz {reject}
    "#parseToken" -> ConIdInnerDz {reject}
    "#ioError" -> ConIdInnerDz {reject}
    "<String" -> ConIdInnerDz {reject}
    "#ostream" -> ConIdInnerDz {reject}
    "=/=String" -> ConIdInnerDz {reject}
    "[]" -> ConIdInnerDz {reject}
    "(->)" -> ConIdInnerDz {reject}
    "#EACCES" -> ConIdInnerDz {reject}
    "cool" -> ConIdInnerDz {reject}
    ">Float" -> ConIdInnerDz {reject}
    "significandFloat" -> ConIdInnerDz {reject}
    "#noIO" -> ConIdInnerDz {reject}
    "maxValueFloat" -> ConIdInnerDz {reject}
    "IMPENT" -> ConIdInnerDz {reject}
    "*Int" -> ConIdInnerDz {reject}
    "<-" -> ConIdInnerDz {reject}
    "<=Map" -> ConIdInnerDz {reject}
    "#buffer" -> ConIdInnerDz {reject}
    "deriving" -> ConIdInnerDz {reject}
    "String2Float" -> ConIdInnerDz {reject}
    "choice" -> ConIdInnerDz {reject}
    "impliesBool" -> ConIdInnerDz {reject}
    "andThenBool" -> ConIdInnerDz {reject}
    ",)" -> ConIdInnerDz {reject}
    "#ENOENT" -> ConIdInnerDz {reject}
    "asinFloat" -> ConIdInnerDz {reject}
    "instance" -> ConIdInnerDz {reject}
    "data" -> ConIdInnerDz {reject}
    ">>Int" -> ConIdInnerDz {reject}
    "replace" -> ConIdInnerDz {reject}
    "String2KLabel" -> ConIdInnerDz {reject}
    "#ELOOP" -> ConIdInnerDz {reject}
    "isToken" -> ConIdInnerDz {reject}
    "substrString" -> ConIdInnerDz {reject}
    "%Int" -> ConIdInnerDz {reject}
    "#lstat" -> ConIdInnerDz {reject}
    "+Float" -> ConIdInnerDz {reject}
    "==Float" -> ConIdInnerDz {reject}
    "atan2Float" -> ConIdInnerDz {reject}
    "=>" -> ConIdInnerDz {reject}
    "Int2String" -> ConIdInnerDz {reject}
    "=K" -> ConIdInnerDz {reject}
    "->" -> ConIdInnerDz {reject}
    "absFloat" -> ConIdInnerDz {reject}
    "maxFloat" -> ConIdInnerDz {reject}
    "true" -> ConIdInnerDz {reject}
    "safe" -> ConIdInnerDz {reject}
    "Char2String" -> ConIdInnerDz {reject}
    ".." -> ConIdInnerDz {reject}
    "#else" -> ConIdInnerDz {reject}
    "=Map" -> ConIdInnerDz {reject}
    "<=Int" -> ConIdInnerDz {reject}
    "String2Char" -> ConIdInnerDz {reject}
    "modInt" -> ConIdInnerDz {reject}
    "minInt" -> ConIdInnerDz {reject}
    "keys" -> ConIdInnerDz {reject}
    "(,{,})" -> ConIdInnerDz {reject}
    "values" -> ConIdInnerDz {reject}
    "#EOF" -> ConIdInnerDz {reject}
    "orElseBool" -> ConIdInnerDz {reject}
    "'#andBool" -> ConIdInnerDz {reject}
    "=/=KLabel" -> ConIdInnerDz {reject}
    "=/=Int" -> ConIdInnerDz {reject}
    "+Int" -> ConIdInnerDz {reject}
    "findChar" -> ConIdInnerDz {reject}
    "--Float" -> ConIdInnerDz {reject}
    "of" -> ConIdInnerDz {reject}
    "=/=Bag" -> ConIdInnerDz {reject}
    "logFloat" -> ConIdInnerDz {reject}
    "cplusplus" -> ConIdInnerDz {reject}
    "Id2String" -> ConIdInnerDz {reject}
    "exponentFloat" -> ConIdInnerDz {reject}
    "#token" -> ConIdInnerDz {reject}
    "#write" -> ConIdInnerDz {reject}
    "rtrim" -> ConIdInnerDz {reject}
    "|Int" -> ConIdInnerDz {reject}
    "*Float" -> ConIdInnerDz {reject}
    "inKList" -> ConIdInnerDz {reject}
    "<Float" -> ConIdInnerDz {reject}
    "SetItem" -> ConIdInnerDz {reject}
    "andBool" -> ConIdInnerDz {reject}
    "#putc" -> ConIdInnerDz {reject}
    "-Map" -> ConIdInnerDz {reject}
    "&Int" -> ConIdInnerDz {reject}
    ([0-9]+[\.][0-9]+([e E][\+ \-]?[0-9]+)?)|([0-9]+[e E][\+ \-]?[0-9]+) -> CusFloatDz
    "fpNaN" -> CusFloatDz {reject}
    "#stdin" -> CusFloatDz {reject}
    "updateMap" -> CusFloatDz {reject}
    "directionalityChar" -> CusFloatDz {reject}
    "%Float" -> CusFloatDz {reject}
    "#stderr" -> CusFloatDz {reject}
    "<Int" -> CusFloatDz {reject}
    "stdcall" -> CusFloatDz {reject}
    "hiding" -> CusFloatDz {reject}
    "removeAll" -> CusFloatDz {reject}
    ">String" -> CusFloatDz {reject}
    "trim" -> CusFloatDz {reject}
    "categoryChar" -> CusFloatDz {reject}
    "let" -> CusFloatDz {reject}
    "#read" -> CusFloatDz {reject}
    "exponentBitsFloat" -> CusFloatDz {reject}
    "#parseInModule" -> CusFloatDz {reject}
    "!" -> CusFloatDz {reject}
    "#" -> CusFloatDz {reject}
    "#fi" -> CusFloatDz {reject}
    "module" -> CusFloatDz {reject}
    "(" -> CusFloatDz {reject}
    ")" -> CusFloatDz {reject}
    "ordChar" -> CusFloatDz {reject}
    "then" -> CusFloatDz {reject}
    "," -> CusFloatDz {reject}
    "-" -> CusFloatDz {reject}
    "." -> CusFloatDz {reject}
    "Int2Float" -> CusFloatDz {reject}
    "#inKList" -> CusFloatDz {reject}
    "as" -> CusFloatDz {reject}
    "sinFloat" -> CusFloatDz {reject}
    "size" -> CusFloatDz {reject}
    "getKLabel" -> CusFloatDz {reject}
    ">=Int" -> CusFloatDz {reject}
    "=/=KList" -> CusFloatDz {reject}
    ":" -> CusFloatDz {reject}
    "minFloat" -> CusFloatDz {reject}
    ">=Float" -> CusFloatDz {reject}
    ";" -> CusFloatDz {reject}
    "tanFloat" -> CusFloatDz {reject}
    "=" -> CusFloatDz {reject}
    "String2Base" -> CusFloatDz {reject}
    "@" -> CusFloatDz {reject}
    "Base2String" -> CusFloatDz {reject}
    "replaceFirst" -> CusFloatDz {reject}
    "<=Set" -> CusFloatDz {reject}
    "unsafe" -> CusFloatDz {reject}
    "KLabel2String" -> CusFloatDz {reject}
    "default" -> CusFloatDz {reject}
    "isInfinite" -> CusFloatDz {reject}
    "acosFloat" -> CusFloatDz {reject}
    ".Map" -> CusFloatDz {reject}
    "where" -> CusFloatDz {reject}
    "[" -> CusFloatDz {reject}
    "\\" -> CusFloatDz {reject}
    "]" -> CusFloatDz {reject}
    "xorBool" -> CusFloatDz {reject}
    "##" -> CusFloatDz {reject}
    "`" -> CusFloatDz {reject}
    "#parse" -> CusFloatDz {reject}
    "Infinity" -> CusFloatDz {reject}
    "maxInt" -> CusFloatDz {reject}
    "#stdout" -> CusFloatDz {reject}
    "undef" -> CusFloatDz {reject}
    "atanFloat" -> CusFloatDz {reject}
    "#getc" -> CusFloatDz {reject}
    "=Int" -> CusFloatDz {reject}
    "==String" -> CusFloatDz {reject}
    "rootFloat" -> CusFloatDz {reject}
    "#noparse" -> CusFloatDz {reject}
    "#tell" -> CusFloatDz {reject}
    "minValueFloat" -> CusFloatDz {reject}
    "{" -> CusFloatDz {reject}
    "|" -> CusFloatDz {reject}
    "}" -> CusFloatDz {reject}
    "~" -> CusFloatDz {reject}
    "isKResult" -> CusFloatDz {reject}
    "#if" -> CusFloatDz {reject}
    "xorInt" -> CusFloatDz {reject}
    "#system" -> CusFloatDz {reject}
    "notBool" -> CusFloatDz {reject}
    "roundFloat" -> CusFloatDz {reject}
    "do" -> CusFloatDz {reject}
    "isNaN" -> CusFloatDz {reject}
    "-Int" -> CusFloatDz {reject}
    "=Bag" -> CusFloatDz {reject}
    "lengthString" -> CusFloatDz {reject}
    "^Int" -> CusFloatDz {reject}
    "export" -> CusFloatDz {reject}
    "floorFloat" -> CusFloatDz {reject}
    "jvm" -> CusFloatDz {reject}
    "#EISDIR" -> CusFloatDz {reject}
    "#parseInput" -> CusFloatDz {reject}
    "ltrim" -> CusFloatDz {reject}
    "#istream" -> CusFloatDz {reject}
    "~Int" -> CusFloatDz {reject}
    "==K" -> CusFloatDz {reject}
    "isBuiltin" -> CusFloatDz {reject}
    "#ENOTDIR" -> CusFloatDz {reject}
    "#systemResult" -> CusFloatDz {reject}
    "sqrtFloat" -> CusFloatDz {reject}
    "orBool" -> CusFloatDz {reject}
    "#isDigit" -> CusFloatDz {reject}
    "import" -> CusFloatDz {reject}
    "countAllOccurrences" -> CusFloatDz {reject}
    "infixr" -> CusFloatDz {reject}
    "precisionFloat" -> CusFloatDz {reject}
    ">Int" -> CusFloatDz {reject}
    "#open" -> CusFloatDz {reject}
    "replaceAll" -> CusFloatDz {reject}
    "#ESPIPE" -> CusFloatDz {reject}
    "newtype" -> CusFloatDz {reject}
    "expFloat" -> CusFloatDz {reject}
    "==KList" -> CusFloatDz {reject}
    "==KLabel" -> CusFloatDz {reject}
    "=KLabel" -> CusFloatDz {reject}
    "#stat" -> CusFloatDz {reject}
    "rfindChar" -> CusFloatDz {reject}
    "#isWhiteSpace" -> CusFloatDz {reject}
    "NaN" -> CusFloatDz {reject}
    "=/=K" -> CusFloatDz {reject}
    "class" -> CusFloatDz {reject}
    "intersectSet" -> CusFloatDz {reject}
    "minusInfinity" -> CusFloatDz {reject}
    "-Set" -> CusFloatDz {reject}
    "freshId" -> CusFloatDz {reject}
    "ccall" -> CusFloatDz {reject}
    "#tokenToString" -> CusFloatDz {reject}
    "signFloat" -> CusFloatDz {reject}
    "#then" -> CusFloatDz {reject}
    "false" -> CusFloatDz {reject}
    "#close" -> CusFloatDz {reject}
    "^Float" -> CusFloatDz {reject}
    "String2Int" -> CusFloatDz {reject}
    "#freezer" -> CusFloatDz {reject}
    "infixl" -> CusFloatDz {reject}
    "-Float" -> CusFloatDz {reject}
    "=Set" -> CusFloatDz {reject}
    "+String" -> CusFloatDz {reject}
    "ListItem" -> CusFloatDz {reject}
    "fresh" -> CusFloatDz {reject}
    "freshInt" -> CusFloatDz {reject}
    "#opendir" -> CusFloatDz {reject}
    "=/=Bool" -> CusFloatDz {reject}
    "qualified" -> CusFloatDz {reject}
    "()" -> CusFloatDz {reject}
    "=List" -> CusFloatDz {reject}
    "rfindString" -> CusFloatDz {reject}
    "type" -> CusFloatDz {reject}
    "Float2Int" -> CusFloatDz {reject}
    "dummy" -> CusFloatDz {reject}
    "findString" -> CusFloatDz {reject}
    "EXPENT" -> CusFloatDz {reject}
    "dividesInt" -> CusFloatDz {reject}
    "else" -> CusFloatDz {reject}
    "#EINVAL" -> CusFloatDz {reject}
    "if" -> CusFloatDz {reject}
    "case" -> CusFloatDz {reject}
    "=/=Float" -> CusFloatDz {reject}
    "in" -> CusFloatDz {reject}
    "<<Int" -> CusFloatDz {reject}
    "#EBADF" -> CusFloatDz {reject}
    "cosFloat" -> CusFloatDz {reject}
    "Float2String" -> CusFloatDz {reject}
    "infix" -> CusFloatDz {reject}
    "|->" -> CusFloatDz {reject}
    "/Float" -> CusFloatDz {reject}
    "<=String" -> CusFloatDz {reject}
    ">=String" -> CusFloatDz {reject}
    "=KList" -> CusFloatDz {reject}
    "==Bag" -> CusFloatDz {reject}
    "#configuration" -> CusFloatDz {reject}
    "String2Id" -> CusFloatDz {reject}
    "#seek" -> CusFloatDz {reject}
    "==Bool" -> CusFloatDz {reject}
    "divInt" -> CusFloatDz {reject}
    "absInt" -> CusFloatDz {reject}
    "bool2Int" -> CusFloatDz {reject}
    "#ENAMETOOLONG" -> CusFloatDz {reject}
    "::" -> CusFloatDz {reject}
    ".List" -> CusFloatDz {reject}
    "<=Float" -> CusFloatDz {reject}
    ".Set" -> CusFloatDz {reject}
    "dotnet" -> CusFloatDz {reject}
    "ceilFloat" -> CusFloatDz {reject}
    "chrChar" -> CusFloatDz {reject}
    "randomRandom" -> CusFloatDz {reject}
    "range" -> CusFloatDz {reject}
    "plusInfinity" -> CusFloatDz {reject}
    "foreign" -> CusFloatDz {reject}
    "(..)" -> CusFloatDz {reject}
    "/Int" -> CusFloatDz {reject}
    "==Int" -> CusFloatDz {reject}
    "#parseToken" -> CusFloatDz {reject}
    "#ioError" -> CusFloatDz {reject}
    "<String" -> CusFloatDz {reject}
    "#ostream" -> CusFloatDz {reject}
    "=/=String" -> CusFloatDz {reject}
    "[]" -> CusFloatDz {reject}
    "(->)" -> CusFloatDz {reject}
    "#EACCES" -> CusFloatDz {reject}
    "cool" -> CusFloatDz {reject}
    ">Float" -> CusFloatDz {reject}
    "significandFloat" -> CusFloatDz {reject}
    "#noIO" -> CusFloatDz {reject}
    "maxValueFloat" -> CusFloatDz {reject}
    "IMPENT" -> CusFloatDz {reject}
    "*Int" -> CusFloatDz {reject}
    "<-" -> CusFloatDz {reject}
    "<=Map" -> CusFloatDz {reject}
    "#buffer" -> CusFloatDz {reject}
    "deriving" -> CusFloatDz {reject}
    "String2Float" -> CusFloatDz {reject}
    "choice" -> CusFloatDz {reject}
    "impliesBool" -> CusFloatDz {reject}
    "andThenBool" -> CusFloatDz {reject}
    ",)" -> CusFloatDz {reject}
    "#ENOENT" -> CusFloatDz {reject}
    "asinFloat" -> CusFloatDz {reject}
    "instance" -> CusFloatDz {reject}
    "data" -> CusFloatDz {reject}
    ">>Int" -> CusFloatDz {reject}
    "replace" -> CusFloatDz {reject}
    "String2KLabel" -> CusFloatDz {reject}
    "#ELOOP" -> CusFloatDz {reject}
    "isToken" -> CusFloatDz {reject}
    "substrString" -> CusFloatDz {reject}
    "%Int" -> CusFloatDz {reject}
    "#lstat" -> CusFloatDz {reject}
    "+Float" -> CusFloatDz {reject}
    "==Float" -> CusFloatDz {reject}
    "atan2Float" -> CusFloatDz {reject}
    "=>" -> CusFloatDz {reject}
    "Int2String" -> CusFloatDz {reject}
    "=K" -> CusFloatDz {reject}
    "->" -> CusFloatDz {reject}
    "absFloat" -> CusFloatDz {reject}
    "maxFloat" -> CusFloatDz {reject}
    "true" -> CusFloatDz {reject}
    "safe" -> CusFloatDz {reject}
    "Char2String" -> CusFloatDz {reject}
    ".." -> CusFloatDz {reject}
    "#else" -> CusFloatDz {reject}
    "=Map" -> CusFloatDz {reject}
    "<=Int" -> CusFloatDz {reject}
    "String2Char" -> CusFloatDz {reject}
    "modInt" -> CusFloatDz {reject}
    "minInt" -> CusFloatDz {reject}
    "keys" -> CusFloatDz {reject}
    "(,{,})" -> CusFloatDz {reject}
    "values" -> CusFloatDz {reject}
    "#EOF" -> CusFloatDz {reject}
    "orElseBool" -> CusFloatDz {reject}
    "'#andBool" -> CusFloatDz {reject}
    "=/=KLabel" -> CusFloatDz {reject}
    "=/=Int" -> CusFloatDz {reject}
    "+Int" -> CusFloatDz {reject}
    "findChar" -> CusFloatDz {reject}
    "--Float" -> CusFloatDz {reject}
    "of" -> CusFloatDz {reject}
    "=/=Bag" -> CusFloatDz {reject}
    "logFloat" -> CusFloatDz {reject}
    "cplusplus" -> CusFloatDz {reject}
    "Id2String" -> CusFloatDz {reject}
    "exponentFloat" -> CusFloatDz {reject}
    "#token" -> CusFloatDz {reject}
    "#write" -> CusFloatDz {reject}
    "rtrim" -> CusFloatDz {reject}
    "|Int" -> CusFloatDz {reject}
    "*Float" -> CusFloatDz {reject}
    "inKList" -> CusFloatDz {reject}
    "<Float" -> CusFloatDz {reject}
    "SetItem" -> CusFloatDz {reject}
    "andBool" -> CusFloatDz {reject}
    "#putc" -> CusFloatDz {reject}
    "-Map" -> CusFloatDz {reject}
    "&Int" -> CusFloatDz {reject}
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "fpNaN" -> IdDz {reject}
    "updateMap" -> IdDz {reject}
    "directionalityChar" -> IdDz {reject}
    "stdcall" -> IdDz {reject}
    "hiding" -> IdDz {reject}
    "removeAll" -> IdDz {reject}
    "trim" -> IdDz {reject}
    "categoryChar" -> IdDz {reject}
    "let" -> IdDz {reject}
    "exponentBitsFloat" -> IdDz {reject}
    "module" -> IdDz {reject}
    "ordChar" -> IdDz {reject}
    "then" -> IdDz {reject}
    "Int2Float" -> IdDz {reject}
    "as" -> IdDz {reject}
    "sinFloat" -> IdDz {reject}
    "size" -> IdDz {reject}
    "getKLabel" -> IdDz {reject}
    "minFloat" -> IdDz {reject}
    "tanFloat" -> IdDz {reject}
    "String2Base" -> IdDz {reject}
    "Base2String" -> IdDz {reject}
    "replaceFirst" -> IdDz {reject}
    "unsafe" -> IdDz {reject}
    "KLabel2String" -> IdDz {reject}
    "default" -> IdDz {reject}
    "isInfinite" -> IdDz {reject}
    "acosFloat" -> IdDz {reject}
    "where" -> IdDz {reject}
    "xorBool" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "maxInt" -> IdDz {reject}
    "undef" -> IdDz {reject}
    "atanFloat" -> IdDz {reject}
    "rootFloat" -> IdDz {reject}
    "minValueFloat" -> IdDz {reject}
    "isKResult" -> IdDz {reject}
    "xorInt" -> IdDz {reject}
    "notBool" -> IdDz {reject}
    "roundFloat" -> IdDz {reject}
    "do" -> IdDz {reject}
    "isNaN" -> IdDz {reject}
    "lengthString" -> IdDz {reject}
    "export" -> IdDz {reject}
    "floorFloat" -> IdDz {reject}
    "jvm" -> IdDz {reject}
    "ltrim" -> IdDz {reject}
    "isBuiltin" -> IdDz {reject}
    "sqrtFloat" -> IdDz {reject}
    "orBool" -> IdDz {reject}
    "import" -> IdDz {reject}
    "countAllOccurrences" -> IdDz {reject}
    "infixr" -> IdDz {reject}
    "precisionFloat" -> IdDz {reject}
    "replaceAll" -> IdDz {reject}
    "newtype" -> IdDz {reject}
    "expFloat" -> IdDz {reject}
    "rfindChar" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "class" -> IdDz {reject}
    "intersectSet" -> IdDz {reject}
    "minusInfinity" -> IdDz {reject}
    "freshId" -> IdDz {reject}
    "ccall" -> IdDz {reject}
    "signFloat" -> IdDz {reject}
    "false" -> IdDz {reject}
    "String2Int" -> IdDz {reject}
    "infixl" -> IdDz {reject}
    "ListItem" -> IdDz {reject}
    "fresh" -> IdDz {reject}
    "freshInt" -> IdDz {reject}
    "qualified" -> IdDz {reject}
    "rfindString" -> IdDz {reject}
    "type" -> IdDz {reject}
    "Float2Int" -> IdDz {reject}
    "dummy" -> IdDz {reject}
    "findString" -> IdDz {reject}
    "EXPENT" -> IdDz {reject}
    "dividesInt" -> IdDz {reject}
    "else" -> IdDz {reject}
    "if" -> IdDz {reject}
    "case" -> IdDz {reject}
    "in" -> IdDz {reject}
    "cosFloat" -> IdDz {reject}
    "Float2String" -> IdDz {reject}
    "infix" -> IdDz {reject}
    "String2Id" -> IdDz {reject}
    "divInt" -> IdDz {reject}
    "absInt" -> IdDz {reject}
    "bool2Int" -> IdDz {reject}
    "dotnet" -> IdDz {reject}
    "ceilFloat" -> IdDz {reject}
    "chrChar" -> IdDz {reject}
    "randomRandom" -> IdDz {reject}
    "range" -> IdDz {reject}
    "plusInfinity" -> IdDz {reject}
    "foreign" -> IdDz {reject}
    "cool" -> IdDz {reject}
    "significandFloat" -> IdDz {reject}
    "maxValueFloat" -> IdDz {reject}
    "IMPENT" -> IdDz {reject}
    "deriving" -> IdDz {reject}
    "String2Float" -> IdDz {reject}
    "choice" -> IdDz {reject}
    "impliesBool" -> IdDz {reject}
    "andThenBool" -> IdDz {reject}
    "asinFloat" -> IdDz {reject}
    "instance" -> IdDz {reject}
    "data" -> IdDz {reject}
    "replace" -> IdDz {reject}
    "String2KLabel" -> IdDz {reject}
    "isToken" -> IdDz {reject}
    "substrString" -> IdDz {reject}
    "atan2Float" -> IdDz {reject}
    "Int2String" -> IdDz {reject}
    "absFloat" -> IdDz {reject}
    "maxFloat" -> IdDz {reject}
    "true" -> IdDz {reject}
    "safe" -> IdDz {reject}
    "Char2String" -> IdDz {reject}
    "String2Char" -> IdDz {reject}
    "modInt" -> IdDz {reject}
    "minInt" -> IdDz {reject}
    "keys" -> IdDz {reject}
    "values" -> IdDz {reject}
    "orElseBool" -> IdDz {reject}
    "findChar" -> IdDz {reject}
    "of" -> IdDz {reject}
    "logFloat" -> IdDz {reject}
    "cplusplus" -> IdDz {reject}
    "Id2String" -> IdDz {reject}
    "exponentFloat" -> IdDz {reject}
    "rtrim" -> IdDz {reject}
    "inKList" -> IdDz {reject}
    "SetItem" -> IdDz {reject}
    "andBool" -> IdDz {reject}
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    ConIdInnerDz -> ConIdInner {cons("ConIdInner1Const")}
    ConSymDz -> ConSym {cons("ConSym1Const")}
    VarIdInnerDz -> VarIdInner {cons("VarIdInner1Const")}
    CusFloatDz -> CusFloat {cons("CusFloat1Const")}
    IdDz -> Id {cons("Id1Const")}
    VarSymDz -> VarSym {cons("VarSym1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    DzInt -/-  [0-9]
    VarSym -/- [\! \# \$ \% \* \+ \. \/ \< \= \> \? \@ \\ \^ \| \- \~ \:]
    ConSym -/- [\! \# \$ \% \* \+ \. \/ \< \= \> \? \@ \\ \^ \| \- \~ \:]
    VarIdInner -/- [0-9 a-z A-Z \' \_]
    ConIdInner -/- [0-9 a-z A-Z \' \_]
    Id -/- [A-Za-z0-9\_]

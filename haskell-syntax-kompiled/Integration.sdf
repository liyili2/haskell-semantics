module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

imports Variables

exports

context-free syntax
context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1265Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1346Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1524Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool179Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1502Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1344Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1604Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1282Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1558Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map1397Syn")}
} > {
    Map Map -> Map {left, cons("Map1445Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1349Syn")}
    K "=/=K" K -> Bool {left, cons("Bool1405Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1349Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool1373Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1239Syn")}
    K "=/=K" K -> Bool {left, cons("Bool1405Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1604Syn")}
    "notBool" Bool -> Bool {cons("Bool1265Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1524Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1502Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1344Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool179Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1346Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool1373Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1239Syn")}
}

context-free priorities
{
    "~Int" Int -> Int {cons("Int198Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int153Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int1394Syn")}
    Int "/Int" Int -> Int {left, cons("Int1427Syn")}
    Int "%Int" Int -> Int {left, cons("Int1243Syn")}
    Int "divInt" Int -> Int {left, cons("Int1303Syn")}
    Int "modInt" Int -> Int {left, cons("Int1395Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1509Syn")}
    Int "-Int" Int -> Int {left, cons("Int1225Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int182Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1453Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int197Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int168Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int166Syn")}
}

context-free priorities
{
    "--Float" Float -> Float {cons("Float1507Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float15Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float1435Syn")}
    Float "/Float" Float -> Float {left, cons("Float146Syn")}
    Float "%Float" Float -> Float {left, cons("Float1300Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1353Syn")}
    Float "-Float" Float -> Float {left, cons("Float1508Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    Op -> K
    AExp -> K
    Import -> K
    Ddecls -> K
    Var -> K
    ConOp -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    VarSym -> K
    VarList -> K
    OptContext -> K
    DdClassList -> K
    OptImpSpec -> K
    OptComma -> K
    ConIdInner -> K
    LExp -> K
    QOp -> K
    TyVarTuple -> K
    Bool -> K
    Alts -> K
    TopDdecls -> K
    OptBangAType -> K
    ExpList -> K
    Classes -> K
    OptDdecls -> K
    Constrs -> K
    Constr -> K
    SContext -> K
    Exports -> K
    QConOp -> K
    OptBangATypes -> K
    FieldDdeclList -> K
    QVar -> K
    Float -> K
    OptDderiving -> K
    Fexp -> K
    Id -> K
    Module -> K
    IDdeclsList -> K
    Map -> K
    OptExpComma -> K
    PatList -> K
    DzFloat -> K
    TopDdecl -> K
    IDdecls -> K
    TypeTuple -> K
    Set -> K
    OptConstrs -> K
    Expent -> K
    Stmts -> K
    Inst -> K
    MInt -> K
    FaType -> K
    Guards -> K
    GTyCon -> K
    TyCon -> K
    APatList -> K
    CDdeclsList -> K
    SubConstr -> K
    SimpleType -> K
    QVarList -> K
    QCon -> K
    NewConstr -> K
    Char -> K
    BType -> K
    OptSemicolon -> K
    CNameList -> K
    TyVars -> K
    Export -> K
    ExpTuple -> K
    OptQVarList -> K
    CallConv -> K
    FPat -> K
    CDdecl -> K
    OptAsModId -> K
    Context -> K
    PascalCaseId -> K
    Con -> K
    UpperCase -> K
    Vars -> K
    OptCNameList -> K
    PatTuple -> K
    SimpleClassList -> K
    Dderiving -> K
    VarId -> K
    QConId -> K
    FieldDdecl -> K
    Type -> K
    GConSym -> K
    ImportList -> K
    DdClass -> K
    Impent -> K
    ATypes -> K
    InfixExp -> K
    StmtList -> K
    OptQualified -> K
    ImpSpec -> K
    Types -> K
    Pat -> K
    QTyCls -> K
    ImpDdecl -> K
    Alt -> K
    GuardList -> K
    SimpleClass -> K
    FunLhs -> K
    TyCls -> K
    Ops -> K
    LPat -> K
    FPats -> K
    Literal -> K
    VarIdInner -> K
    GenDdecl -> K
    List -> K
    Stream -> K
    TyVar -> K
    Guard -> K
    GCon -> K
    DzString -> K
    AType -> K
    DzBool -> K
    ConSym -> K
    VarOp -> K
    FType -> K
    OptExp -> K
    FrType -> K
    APats -> K
    QVarOp -> K
    IDdecl -> K
    OptVarList -> K
    Class -> K
    CName -> K
    APat -> K
    ATypeList -> K
    CDdecls -> K
    OptBang -> K
    OptSContext -> K
    CusFloat -> K
    Int -> K
    Stmt -> K
    LiteralInner -> K
    AAPat -> K
    ExportList -> K
    GdRhs -> K
    Safety -> K
    Rhs -> K
    DzInt -> K
    Body -> K
    OptIDdecls -> K
    QConSym -> K
    Ddecl -> K
    Fixity -> K
    FDdecl -> K
    ModId -> K
    OptCDdecls -> K
    Integer -> K
    QVarId -> K
    QVarSym -> K
    ImpDdecls -> K
    IOError -> K
    DdeclsList -> K
    ConId -> K
    QTyCon -> K
    Exp -> K
} .> {
    Ddecl -> DdeclsList
    ConOp -> Op
    Int -> Integer
    FrType -> FType
    BType -> Type
    VarId -> TyVar
    Var -> VarList
    ConId -> TyCon
    Con -> CName
    Literal -> APat
    ImpDdecl -> ImpDdecls
    Var -> Import
    CDdecl -> CDdeclsList
    Dderiving -> OptDderiving
    Fexp -> LExp
    AExp -> Fexp
    AAPat -> APats
    Exp -> ExpList
    GCon -> APat
    LPat -> Pat
    OptBangAType -> OptBangATypes
    Guard -> GuardList
    FieldDdecl -> FieldDdeclList
    FaType -> FrType
    String -> LiteralInner
    Ddecl -> TopDdecl
    LExp -> InfixExp
    QVarSym -> QVarOp
    TyCls -> QTyCls
    AType -> BType
    FPat -> FPats
    Class -> Context
    VarIdInner -> VarId
    GTyCon -> Inst
    Pat -> PatList
    GenDdecl -> Ddecl
    QVar -> QVarList
    TopDdecl -> TopDdecls
    ConIdInner -> ConId
    VarId -> QVarId
    QConSym -> GConSym
    QConOp -> QOp
    QVar -> Export
    ConSym -> ConOp
    TyCon -> QTyCon
    VarId -> Var
    VarSym -> QVarSym
    LiteralInner -> Literal
    GTyCon -> AType
    QCon -> GCon
    DdeclsList -> TopDdecls
    IDdecl -> IDdeclsList
    QVar -> AExp
    Var -> Vars
    InfixExp -> Exp
    SimpleClass -> SimpleClassList
    InfixExp -> Guard
    ConId -> QConId
    DzInt -> Int
    Import -> ImportList
    Var -> APat
    QVarOp -> QOp
    CusFloat -> LiteralInner
    VarList -> ImportList
    Stmt -> StmtList
    ImpSpec -> OptImpSpec
    Op -> Ops
    SimpleClass -> SContext
    ConId -> Con
    DzBool -> Bool
    Classes -> Context
    Literal -> AExp
    Body -> Module
    QConId -> QCon
    VarOp -> Op
    Class -> Classes
    Var -> CName
    GConSym -> QConOp
    DzString -> String
    QVarList -> ExportList
    AType -> ATypes
    DdClass -> DdClassList
    QVarId -> QVar
    Export -> ExportList
    QTyCon -> GTyCon
    TyVar -> TyVars
    Type -> Types
    Alt -> Alts
    GenDdecl -> CDdecl
    Exp -> OptExp
    ConSym -> QConSym
    SimpleClassList -> SContext
    VarSym -> VarOp
    TyVars -> ATypeList
    Constr -> Constrs
    TyVar -> AType
    AAPat -> LPat
    VarList -> CNameList
    CName -> CNameList
    QTyCls -> DdClass
    AType -> ATypeList
    ConId -> TyCls
    Integer -> LiteralInner
    DzFloat -> Float
    BType -> SubConstr
    GCon -> AExp
    ConId -> ModId
} .> {
    K -> Nat
    K -> Op
    K -> AExp
    K -> Import
    K -> Ddecls
    K -> Var
    K -> ConOp
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> VarSym
    K -> VarList
    K -> OptContext
    K -> DdClassList
    K -> OptImpSpec
    K -> OptComma
    K -> ConIdInner
    K -> LExp
    K -> QOp
    K -> TyVarTuple
    K -> Bool
    K -> Alts
    K -> TopDdecls
    K -> OptBangAType
    K -> ExpList
    K -> Classes
    K -> OptDdecls
    K -> Constrs
    K -> Constr
    K -> SContext
    K -> Exports
    K -> QConOp
    K -> OptBangATypes
    K -> FieldDdeclList
    K -> QVar
    K -> Float
    K -> OptDderiving
    K -> Fexp
    K -> Id
    K -> Module
    K -> IDdeclsList
    K -> Map
    K -> OptExpComma
    K -> PatList
    K -> DzFloat
    K -> TopDdecl
    K -> IDdecls
    K -> TypeTuple
    K -> Set
    K -> OptConstrs
    K -> Expent
    K -> Stmts
    K -> Inst
    K -> MInt
    K -> FaType
    K -> Guards
    K -> GTyCon
    K -> TyCon
    K -> APatList
    K -> CDdeclsList
    K -> SubConstr
    K -> SimpleType
    K -> QVarList
    K -> QCon
    K -> NewConstr
    K -> Char
    K -> BType
    K -> OptSemicolon
    K -> CNameList
    K -> TyVars
    K -> Export
    K -> ExpTuple
    K -> OptQVarList
    K -> CallConv
    K -> FPat
    K -> CDdecl
    K -> OptAsModId
    K -> Context
    K -> PascalCaseId
    K -> Con
    K -> UpperCase
    K -> Vars
    K -> OptCNameList
    K -> PatTuple
    K -> SimpleClassList
    K -> Dderiving
    K -> VarId
    K -> QConId
    K -> FieldDdecl
    K -> Type
    K -> GConSym
    K -> ImportList
    K -> DdClass
    K -> Impent
    K -> ATypes
    K -> InfixExp
    K -> StmtList
    K -> OptQualified
    K -> ImpSpec
    K -> Types
    K -> Pat
    K -> QTyCls
    K -> ImpDdecl
    K -> Alt
    K -> GuardList
    K -> SimpleClass
    K -> FunLhs
    K -> TyCls
    K -> Ops
    K -> LPat
    K -> FPats
    K -> Literal
    K -> VarIdInner
    K -> GenDdecl
    K -> List
    K -> Stream
    K -> TyVar
    K -> Guard
    K -> GCon
    K -> DzString
    K -> AType
    K -> DzBool
    K -> ConSym
    K -> VarOp
    K -> FType
    K -> OptExp
    K -> FrType
    K -> APats
    K -> QVarOp
    K -> IDdecl
    K -> OptVarList
    K -> Class
    K -> CName
    K -> APat
    K -> ATypeList
    K -> CDdecls
    K -> OptBang
    K -> OptSContext
    K -> CusFloat
    K -> Int
    K -> Stmt
    K -> LiteralInner
    K -> AAPat
    K -> ExportList
    K -> GdRhs
    K -> Safety
    K -> Rhs
    K -> DzInt
    K -> Body
    K -> OptIDdecls
    K -> QConSym
    K -> Ddecl
    K -> Fixity
    K -> FDdecl
    K -> ModId
    K -> OptCDdecls
    K -> Integer
    K -> QVarId
    K -> QVarSym
    K -> ImpDdecls
    K -> IOError
    K -> DdeclsList
    K -> ConId
    K -> QTyCon
    K -> Exp
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    Op -> K
    AExp -> K
    Import -> K
    Ddecls -> K
    Var -> K
    ConOp -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    VarSym -> K
    VarList -> K
    OptContext -> K
    DdClassList -> K
    OptImpSpec -> K
    OptComma -> K
    ConIdInner -> K
    LExp -> K
    QOp -> K
    TyVarTuple -> K
    Bool -> K
    Alts -> K
    TopDdecls -> K
    OptBangAType -> K
    ExpList -> K
    Classes -> K
    OptDdecls -> K
    Constrs -> K
    Constr -> K
    SContext -> K
    Exports -> K
    QConOp -> K
    OptBangATypes -> K
    FieldDdeclList -> K
    QVar -> K
    Float -> K
    OptDderiving -> K
    Fexp -> K
    Id -> K
    Module -> K
    IDdeclsList -> K
    Map -> K
    OptExpComma -> K
    PatList -> K
    DzFloat -> K
    TopDdecl -> K
    IDdecls -> K
    TypeTuple -> K
    Set -> K
    OptConstrs -> K
    Expent -> K
    Stmts -> K
    Inst -> K
    MInt -> K
    FaType -> K
    Guards -> K
    GTyCon -> K
    TyCon -> K
    APatList -> K
    CDdeclsList -> K
    SubConstr -> K
    SimpleType -> K
    QVarList -> K
    QCon -> K
    NewConstr -> K
    Char -> K
    BType -> K
    OptSemicolon -> K
    CNameList -> K
    TyVars -> K
    Export -> K
    ExpTuple -> K
    OptQVarList -> K
    CallConv -> K
    FPat -> K
    CDdecl -> K
    OptAsModId -> K
    Context -> K
    PascalCaseId -> K
    Con -> K
    UpperCase -> K
    Vars -> K
    OptCNameList -> K
    PatTuple -> K
    SimpleClassList -> K
    Dderiving -> K
    VarId -> K
    QConId -> K
    FieldDdecl -> K
    Type -> K
    GConSym -> K
    ImportList -> K
    DdClass -> K
    Impent -> K
    ATypes -> K
    InfixExp -> K
    StmtList -> K
    OptQualified -> K
    ImpSpec -> K
    Types -> K
    Pat -> K
    QTyCls -> K
    ImpDdecl -> K
    Alt -> K
    GuardList -> K
    SimpleClass -> K
    FunLhs -> K
    TyCls -> K
    Ops -> K
    LPat -> K
    FPats -> K
    Literal -> K
    VarIdInner -> K
    GenDdecl -> K
    List -> K
    Stream -> K
    TyVar -> K
    Guard -> K
    GCon -> K
    DzString -> K
    AType -> K
    DzBool -> K
    ConSym -> K
    VarOp -> K
    FType -> K
    OptExp -> K
    FrType -> K
    APats -> K
    QVarOp -> K
    IDdecl -> K
    OptVarList -> K
    Class -> K
    CName -> K
    APat -> K
    ATypeList -> K
    CDdecls -> K
    OptBang -> K
    OptSContext -> K
    CusFloat -> K
    Int -> K
    Stmt -> K
    LiteralInner -> K
    AAPat -> K
    ExportList -> K
    GdRhs -> K
    Safety -> K
    Rhs -> K
    DzInt -> K
    Body -> K
    OptIDdecls -> K
    QConSym -> K
    Ddecl -> K
    Fixity -> K
    FDdecl -> K
    ModId -> K
    OptCDdecls -> K
    Integer -> K
    QVarId -> K
    QVarSym -> K
    ImpDdecls -> K
    IOError -> K
    DdeclsList -> K
    ConId -> K
    QTyCon -> K
    Exp -> K
} .> {
    K -> Nat
    K -> Op
    K -> AExp
    K -> Import
    K -> Ddecls
    K -> Var
    K -> ConOp
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> VarSym
    K -> VarList
    K -> OptContext
    K -> DdClassList
    K -> OptImpSpec
    K -> OptComma
    K -> ConIdInner
    K -> LExp
    K -> QOp
    K -> TyVarTuple
    K -> Bool
    K -> Alts
    K -> TopDdecls
    K -> OptBangAType
    K -> ExpList
    K -> Classes
    K -> OptDdecls
    K -> Constrs
    K -> Constr
    K -> SContext
    K -> Exports
    K -> QConOp
    K -> OptBangATypes
    K -> FieldDdeclList
    K -> QVar
    K -> Float
    K -> OptDderiving
    K -> Fexp
    K -> Id
    K -> Module
    K -> IDdeclsList
    K -> Map
    K -> OptExpComma
    K -> PatList
    K -> DzFloat
    K -> TopDdecl
    K -> IDdecls
    K -> TypeTuple
    K -> Set
    K -> OptConstrs
    K -> Expent
    K -> Stmts
    K -> Inst
    K -> MInt
    K -> FaType
    K -> Guards
    K -> GTyCon
    K -> TyCon
    K -> APatList
    K -> CDdeclsList
    K -> SubConstr
    K -> SimpleType
    K -> QVarList
    K -> QCon
    K -> NewConstr
    K -> Char
    K -> BType
    K -> OptSemicolon
    K -> CNameList
    K -> TyVars
    K -> Export
    K -> ExpTuple
    K -> OptQVarList
    K -> CallConv
    K -> FPat
    K -> CDdecl
    K -> OptAsModId
    K -> Context
    K -> PascalCaseId
    K -> Con
    K -> UpperCase
    K -> Vars
    K -> OptCNameList
    K -> PatTuple
    K -> SimpleClassList
    K -> Dderiving
    K -> VarId
    K -> QConId
    K -> FieldDdecl
    K -> Type
    K -> GConSym
    K -> ImportList
    K -> DdClass
    K -> Impent
    K -> ATypes
    K -> InfixExp
    K -> StmtList
    K -> OptQualified
    K -> ImpSpec
    K -> Types
    K -> Pat
    K -> QTyCls
    K -> ImpDdecl
    K -> Alt
    K -> GuardList
    K -> SimpleClass
    K -> FunLhs
    K -> TyCls
    K -> Ops
    K -> LPat
    K -> FPats
    K -> Literal
    K -> VarIdInner
    K -> GenDdecl
    K -> List
    K -> Stream
    K -> TyVar
    K -> Guard
    K -> GCon
    K -> DzString
    K -> AType
    K -> DzBool
    K -> ConSym
    K -> VarOp
    K -> FType
    K -> OptExp
    K -> FrType
    K -> APats
    K -> QVarOp
    K -> IDdecl
    K -> OptVarList
    K -> Class
    K -> CName
    K -> APat
    K -> ATypeList
    K -> CDdecls
    K -> OptBang
    K -> OptSContext
    K -> CusFloat
    K -> Int
    K -> Stmt
    K -> LiteralInner
    K -> AAPat
    K -> ExportList
    K -> GdRhs
    K -> Safety
    K -> Rhs
    K -> DzInt
    K -> Body
    K -> OptIDdecls
    K -> QConSym
    K -> Ddecl
    K -> Fixity
    K -> FDdecl
    K -> ModId
    K -> OptCDdecls
    K -> Integer
    K -> QVarId
    K -> QVarSym
    K -> ImpDdecls
    K -> IOError
    K -> DdeclsList
    K -> ConId
    K -> QTyCon
    K -> Exp
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> Op
    K -> AExp
    K -> Import
    K -> Ddecls
    K -> Var
    K -> ConOp
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> VarSym
    K -> VarList
    K -> OptContext
    K -> DdClassList
    K -> OptImpSpec
    K -> OptComma
    K -> ConIdInner
    K -> LExp
    K -> QOp
    K -> TyVarTuple
    K -> Bool
    K -> Alts
    K -> TopDdecls
    K -> OptBangAType
    K -> ExpList
    K -> Classes
    K -> OptDdecls
    K -> Constrs
    K -> Constr
    K -> SContext
    K -> Exports
    K -> QConOp
    K -> OptBangATypes
    K -> FieldDdeclList
    K -> QVar
    K -> Float
    K -> OptDderiving
    K -> Fexp
    K -> Id
    K -> Module
    K -> IDdeclsList
    K -> Map
    K -> OptExpComma
    K -> PatList
    K -> DzFloat
    K -> TopDdecl
    K -> IDdecls
    K -> TypeTuple
    K -> Set
    K -> OptConstrs
    K -> Expent
    K -> Stmts
    K -> Inst
    K -> MInt
    K -> FaType
    K -> Guards
    K -> GTyCon
    K -> TyCon
    K -> APatList
    K -> CDdeclsList
    K -> SubConstr
    K -> SimpleType
    K -> QVarList
    K -> QCon
    K -> NewConstr
    K -> Char
    K -> BType
    K -> OptSemicolon
    K -> CNameList
    K -> TyVars
    K -> Export
    K -> ExpTuple
    K -> OptQVarList
    K -> CallConv
    K -> FPat
    K -> CDdecl
    K -> OptAsModId
    K -> Context
    K -> PascalCaseId
    K -> Con
    K -> UpperCase
    K -> Vars
    K -> OptCNameList
    K -> PatTuple
    K -> SimpleClassList
    K -> Dderiving
    K -> VarId
    K -> QConId
    K -> FieldDdecl
    K -> Type
    K -> GConSym
    K -> ImportList
    K -> DdClass
    K -> Impent
    K -> ATypes
    K -> InfixExp
    K -> StmtList
    K -> OptQualified
    K -> ImpSpec
    K -> Types
    K -> Pat
    K -> QTyCls
    K -> ImpDdecl
    K -> Alt
    K -> GuardList
    K -> SimpleClass
    K -> FunLhs
    K -> TyCls
    K -> Ops
    K -> LPat
    K -> FPats
    K -> Literal
    K -> VarIdInner
    K -> GenDdecl
    K -> List
    K -> Stream
    K -> TyVar
    K -> Guard
    K -> GCon
    K -> DzString
    K -> AType
    K -> DzBool
    K -> ConSym
    K -> VarOp
    K -> FType
    K -> OptExp
    K -> FrType
    K -> APats
    K -> QVarOp
    K -> IDdecl
    K -> OptVarList
    K -> Class
    K -> CName
    K -> APat
    K -> ATypeList
    K -> CDdecls
    K -> OptBang
    K -> OptSContext
    K -> CusFloat
    K -> Int
    K -> Stmt
    K -> LiteralInner
    K -> AAPat
    K -> ExportList
    K -> GdRhs
    K -> Safety
    K -> Rhs
    K -> DzInt
    K -> Body
    K -> OptIDdecls
    K -> QConSym
    K -> Ddecl
    K -> Fixity
    K -> FDdecl
    K -> ModId
    K -> OptCDdecls
    K -> Integer
    K -> QVarId
    K -> QVarSym
    K -> ImpDdecls
    K -> IOError
    K -> DdeclsList
    K -> ConId
    K -> QTyCon
    K -> Exp
} .> {
    Nat -> K
    Op -> K
    AExp -> K
    Import -> K
    Ddecls -> K
    Var -> K
    ConOp -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    VarSym -> K
    VarList -> K
    OptContext -> K
    DdClassList -> K
    OptImpSpec -> K
    OptComma -> K
    ConIdInner -> K
    LExp -> K
    QOp -> K
    TyVarTuple -> K
    Bool -> K
    Alts -> K
    TopDdecls -> K
    OptBangAType -> K
    ExpList -> K
    Classes -> K
    OptDdecls -> K
    Constrs -> K
    Constr -> K
    SContext -> K
    Exports -> K
    QConOp -> K
    OptBangATypes -> K
    FieldDdeclList -> K
    QVar -> K
    Float -> K
    OptDderiving -> K
    Fexp -> K
    Id -> K
    Module -> K
    IDdeclsList -> K
    Map -> K
    OptExpComma -> K
    PatList -> K
    DzFloat -> K
    TopDdecl -> K
    IDdecls -> K
    TypeTuple -> K
    Set -> K
    OptConstrs -> K
    Expent -> K
    Stmts -> K
    Inst -> K
    MInt -> K
    FaType -> K
    Guards -> K
    GTyCon -> K
    TyCon -> K
    APatList -> K
    CDdeclsList -> K
    SubConstr -> K
    SimpleType -> K
    QVarList -> K
    QCon -> K
    NewConstr -> K
    Char -> K
    BType -> K
    OptSemicolon -> K
    CNameList -> K
    TyVars -> K
    Export -> K
    ExpTuple -> K
    OptQVarList -> K
    CallConv -> K
    FPat -> K
    CDdecl -> K
    OptAsModId -> K
    Context -> K
    PascalCaseId -> K
    Con -> K
    UpperCase -> K
    Vars -> K
    OptCNameList -> K
    PatTuple -> K
    SimpleClassList -> K
    Dderiving -> K
    VarId -> K
    QConId -> K
    FieldDdecl -> K
    Type -> K
    GConSym -> K
    ImportList -> K
    DdClass -> K
    Impent -> K
    ATypes -> K
    InfixExp -> K
    StmtList -> K
    OptQualified -> K
    ImpSpec -> K
    Types -> K
    Pat -> K
    QTyCls -> K
    ImpDdecl -> K
    Alt -> K
    GuardList -> K
    SimpleClass -> K
    FunLhs -> K
    TyCls -> K
    Ops -> K
    LPat -> K
    FPats -> K
    Literal -> K
    VarIdInner -> K
    GenDdecl -> K
    List -> K
    Stream -> K
    TyVar -> K
    Guard -> K
    GCon -> K
    DzString -> K
    AType -> K
    DzBool -> K
    ConSym -> K
    VarOp -> K
    FType -> K
    OptExp -> K
    FrType -> K
    APats -> K
    QVarOp -> K
    IDdecl -> K
    OptVarList -> K
    Class -> K
    CName -> K
    APat -> K
    ATypeList -> K
    CDdecls -> K
    OptBang -> K
    OptSContext -> K
    CusFloat -> K
    Int -> K
    Stmt -> K
    LiteralInner -> K
    AAPat -> K
    ExportList -> K
    GdRhs -> K
    Safety -> K
    Rhs -> K
    DzInt -> K
    Body -> K
    OptIDdecls -> K
    QConSym -> K
    Ddecl -> K
    Fixity -> K
    FDdecl -> K
    ModId -> K
    OptCDdecls -> K
    Integer -> K
    QVarId -> K
    QVarSym -> K
    ImpDdecls -> K
    IOError -> K
    DdeclsList -> K
    ConId -> K
    QTyCon -> K
    Exp -> K
}
context-free syntax
    "case" InsertDzExp "of" "{" InsertDzAlts "}" -> LExp {cons("LExp10Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem12Syn")}
    "(,{,})" -> GCon {cons("GCon13Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int14Syn")}
    ImpSpec -> OptImpSpec {}
    Integer -> LiteralInner {}
    Type "," Types -> Types {cons("Types1ListSyn")}
    ".Types" -> Types {cons("Types1Empty")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map16Syn")}
    QVar "=" Pat -> FPat {cons("FPat17Syn")}
    Map "=Map" Map -> Bool {cons("Bool18Syn")}
    Set "=Set" Set -> Bool {cons("Bool19Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List120Syn")}
    Type "," TypeTuple -> TypeTuple {cons("TypeTuple122Syn")}
    GdRhs OptDdecls -> Rhs {cons("Rhs124Syn")}
    ".List" -> List {cons("List125Syn")}
    "{" InsertDzCDdeclsList "}" -> CDdecls {cons("CDdecls126Syn")}
    TyCls OptVarList -> Import {cons("Import127Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream128Syn")}
    Pat "->" Exp -> Alt {cons("Alt129Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String130Syn")}
    FaType "->" FType -> FType {cons("FType132Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool133Syn")}
    "export" InsertDzCallConv InsertDzSafety InsertDzExpent InsertDzVar "::" FType -> FDdecl {cons("FDdecl134Syn")}
    "[]" -> GCon {cons("GCon135Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int136Syn")}
    QCon -> GCon {}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String138Syn")}
    Set "-Set" Set -> Set {cons("Set139Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel140Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream142Syn")}
    Vars "::" ExclamationMarkDz AType -> FieldDdecl {cons("FieldDdecl143Syn")}
    String "=/=String" String -> Bool {left, cons("Bool144Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id145Syn")}
    CusFloat -> LiteralInner {}
    ConIdInner "##" -> ConId {cons("ConId147Syn")}
    "module" InsertDzModId InsertDzExports "where" Body -> Module {cons("Module148Syn")}
    Pat "," Pat -> PatTuple {cons("PatTuple149Syn")}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int150Syn")}
    QTyCls -> DdClass {}
    QCon "{" InsertDzFPats "}" -> APat {cons("APat154Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int155Syn")}
    "`" InsertDzVarId "`" -> VarOp {cons("VarOp156Syn")}
    "[]" -> GTyCon {cons("GTyCon157Syn")}
    ConId "." ModId -> ModId {cons("ModId158Syn")}
    LPat -> Pat {}
    "infixl" -> Fixity {cons("Fixity159Syn")}
    "[" InsertDzPat "]" -> APat {cons("APat160Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map162Syn")}
    Var Rhs -> IDdecl {cons("IDdecl163Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List164Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float165Syn")}
    GenDdecl -> Ddecl {}
    "`" InsertDzConId "`" -> ConOp {cons("ConOp167Syn")}
    "(" InsertDzQVarSym ")" -> QVar {cons("QVar169Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float170Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList172Syn")}
    QConSym -> GConSym {}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool173Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int174Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int175Syn")}
    VarIdInner -> VarId {}
    "[" InsertDzType "]" -> AType {cons("AType176Syn")}
    "[" InsertDzExpList "]" -> AExp {cons("AExp177Syn")}
    "cool" "(" InsertDzK ")" -> K {cons("K178Syn")}
    "let" Ddecls -> Guard {cons("Guard180Syn")}
    Var -> Vars {}
    Pat "->" InsertDzExp "where" Ddecls -> Alt {cons("Alt183Syn")}
    LPat InsertDzQConOp Pat -> Pat {cons("Pat184Syn")}
    "(" InsertDzQVarList ")" -> OptQVarList {cons("OptQVarList185Syn")}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool186Syn")}
    Set "<=Set" Set -> Bool {cons("Bool187Syn")}
    Ddecl ";" DdeclsList -> DdeclsList {cons("DdeclsList1ListSyn")}
    ".DeclsList" -> DdeclsList {cons("DdeclsList1Empty")}
    "infixr" -> Fixity {cons("Fixity188Syn")}
    "()" -> FrType {cons("FrType190Syn")}
    LExp InsertDzQOp InfixExp -> InfixExp {cons("InfixExp192Syn")}
    Exp "," Exp -> ExpTuple {cons("ExpTuple193Syn")}
    "(" InsertDzVarList ")" -> OptVarList {cons("OptVarList194Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K195Syn")}
    "class" InsertDzOptSContext InsertDzTyCls InsertDzTyVar OptCDdecls -> TopDdecl {cons("TopDdecl196Syn")}
    List "=List" List -> Bool {cons("Bool199Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1200Syn")}
    "qualified" -> OptQualified {cons("OptQualified1202Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1203Syn")}
    "module" InsertDzModId "where" Body -> Module {cons("Module1204Syn")}
    VarSym -> VarOp {}
    Map "[" InsertDzK "]" -> K {cons("K1206Syn")}
    "{" InsertDzIDdeclsList "}" -> IDdecls {cons("IDdecls1207Syn")}
    AAPat -> LPat {}
    "{" InsertDzImpDdecls "}" -> Body {cons("Body1208Syn")}
    AAPat "" APats -> APats {cons("APats1ListSyn")}
    ".APats" -> APats {cons("APats1Empty")}
    VarOp -> Op {}
    "(" InsertDzCNameList ")" -> OptCNameList {cons("OptCNameList1209Syn")}
    Exp -> ExpList {}
    Con "{" InsertDzFieldDdeclList "}" -> Constr {cons("Constr1220Syn")}
    "hiding" "(" InsertDzImportList InsertDzOptComma ")" -> ImpSpec {cons("ImpSpec1222Syn")}
    GTyCon -> AType {}
    QTyCon OptCNameList -> Export {cons("Export1223Syn")}
    ";" -> Stmt {cons("Stmt1224Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1226Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1227Syn")}
    "newtype" InsertDzOptContext InsertDzSimpleType "=" InsertDzNewConstr OptDderiving -> TopDdecl {cons("TopDdecl1228Syn")}
    SimpleClass -> SContext {}
    VarSym -> QVarSym {}
    ModId "." VarId -> QVarId {cons("QVarId1229Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1230Syn")}
    QTyCls TyVar -> Class {cons("Class1232Syn")}
    ConSym -> ConOp {}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1233Syn")}
    K -> KList {}
    AType -> BType {}
    KList "=/=KList" KList -> Bool {cons("Bool1234Syn")}
    VarId -> Var {}
    SimpleClass "," SimpleClassList -> SimpleClassList {cons("SimpleClassList1ListSyn")}
    ".SimpleClassList" -> SimpleClassList {cons("SimpleClassList1Empty")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1235Syn")}
    "import" InsertDzCallConv InsertDzImpent InsertDzVar "::" FType -> FDdecl {cons("FDdecl1236Syn")}
    Vars "::" Type -> FieldDdecl {cons("FieldDdecl1237Syn")}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1238Syn")}
    AExp -> Fexp {}
    Literal -> APat {}
    Var Rhs -> CDdecl {cons("CDdecl1242Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1244Syn")}
    "#ELOOP" -> IOError {cons("IOError1245Syn")}
    "jvm" -> CallConv {cons("CallConv1246Syn")}
    Var -> Import {}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1247Syn")}
    AType -> ATypes {}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1248Syn")}
    Import "," ImportList -> ImportList {cons("ImportList1ListSyn")}
    ".ImportList" -> ImportList {cons("ImportList1Empty")}
    TyVar "," TyVar -> TyVarTuple {cons("TyVarTuple1249Syn")}
    "{" InsertDzTopDdecls "}" -> Body {cons("Body1250Syn")}
    "EXPENT" -> Expent {cons("Expent1252Syn")}
    "#configuration" -> Bag {cons("Bag1253Syn")}
    "where" IDdecls -> OptIDdecls {cons("OptIDdecls1254Syn")}
    "(" InsertDzInfixExp InsertDzQOp ")" -> AExp {cons("AExp1255Syn")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1256Syn")}
    "if" InsertDzExp InsertDzOptSemicolon "then" InsertDzExp InsertDzOptSemicolon "else" Exp -> LExp {cons("LExp1257Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1258Syn")}
    KItem -> K {}
    "(..)" -> OptQVarList {cons("OptQVarList1259Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1260Syn")}
    Con -> CName {}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1262Syn")}
    "(..)" -> OptCNameList {cons("OptCNameList1263Syn")}
    "(" InsertDzTyVarTuple ")" -> Inst {cons("Inst1264Syn")}
    Pat InsertDzVarOp Pat -> FunLhs {cons("FunLhs1266Syn")}
    ConId -> Con {}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1267Syn")}
    QTyCls TyVar -> SimpleClass {cons("SimpleClass1268Syn")}
    Context "=>" -> OptContext {cons("OptContext1269Syn")}
    CDdecl ";" CDdeclsList -> CDdeclsList {cons("CDdeclsList1ListSyn")}
    ".CDeclsList" -> CDdeclsList {cons("CDdeclsList1Empty")}
    Map "<=Map" Map -> Bool {cons("Bool1270Syn")}
    Var "," Vars -> Vars {cons("Vars1274Syn")}
    QConOp -> QOp {}
    "-" -> VarSym {cons("VarSym1275Syn")}
    "(..)" -> OptVarList {cons("OptVarList1277Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1278Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1279Syn")}
    GCon -> APat {}
    String "==String" String -> Bool {left, cons("Bool1280Syn")}
    String "+String" String -> String {left, cons("String1283Syn")}
    K "in" Set -> Bool {cons("Bool1284Syn")}
    ".Map" -> Map {cons("Map1285Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1286Syn")}
    KList "==KList" KList -> Bool {cons("Bool1287Syn")}
    String -> LiteralInner {}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1289Syn")}
    LExp -> InfixExp {}
    InfixExp -> Guard {}
    LiteralInner "#" -> Literal {cons("Literal1292Syn")}
    TopDdecl ";" TopDdecls -> TopDdecls {cons("TopDdecls1ListSyn")}
    ".TopDecls" -> TopDdecls {cons("TopDdecls1Empty")}
    "do" "{" InsertDzStmts "}" -> LExp {cons("LExp1293Syn")}
    "=" InsertDzExp OptDdecls -> Rhs {cons("Rhs1294Syn")}
    QTyCon ATypeList -> FaType {cons("FaType1295Syn")}
    Var "," VarList -> VarList {cons("VarList1ListSyn")}
    ".VarList" -> VarList {cons("VarList1Empty")}
    GenDdecl -> CDdecl {}
    "~" AAPat -> APat {cons("APat1296Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1297Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1298Syn")}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1299Syn")}
    Dderiving -> OptDderiving {}
    Con AType -> NewConstr {cons("NewConstr1302Syn")}
    ImpDdecl ";" ImpDdecls -> ImpDdecls {cons("ImpDdecls1ListSyn")}
    ".ImpDecls" -> ImpDdecls {cons("ImpDdecls1Empty")}
    Float ">Float" Float -> Bool {left, cons("Bool1304Syn")}
    Vars "::" InsertDzContext "=>" Type -> GenDdecl {cons("GenDdecl1306Syn")}
    "-" InfixExp -> InfixExp {cons("InfixExp1307Syn")}
    Fixity InsertDzInteger Ops -> GenDdecl {cons("GenDdecl1308Syn")}
    ConId -> QConId {}
    Pat "<-" InfixExp -> Guard {cons("Guard1309Syn")}
    AType "" ATypeList -> ATypeList {cons("ATypeList1ListSyn")}
    ".ATypeList" -> ATypeList {cons("ATypeList1Empty")}
    "type" InsertDzSimpleType "=" Type -> TopDdecl {cons("TopDdecl1320Syn")}
    "countAllOccurrences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1322Syn")}
    Exp "," ExpList -> ExpList {cons("ExpList1323Syn")}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1324Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1325Syn")}
    "(->)" -> GTyCon {cons("GTyCon1326Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1327Syn")}
    LiteralInner "##" -> Literal {cons("Literal1328Syn")}
    TyCon -> QTyCon {}
    QTyCon -> GTyCon {}
    TyVar "," TyVarTuple -> TyVarTuple {cons("TyVarTuple1329Syn")}
    DdClass "," DdClassList -> DdClassList {cons("DdClassList1ListSyn")}
    ".DClassList" -> DdClassList {cons("DdClassList1Empty")}
    Float "==Float" Float -> Bool {left, cons("Bool1330Syn")}
    Pat "," PatTuple -> PatTuple {cons("PatTuple1332Syn")}
    "[" InsertDzTyVar "]" -> Inst {cons("Inst1333Syn")}
    "where" CDdecls -> OptCDdecls {cons("OptCDdecls1335Syn")}
    FunLhs Rhs -> IDdecl {cons("IDdecl1336Syn")}
    Class -> Context {}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1337Syn")}
    Op -> Ops {}
    ConId -> TyCls {}
    "(" InsertDzTypeTuple ")" -> AType {cons("AType1338Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1340Syn")}
    "-" CusFloat -> LPat {cons("LPat1342Syn")}
    String "<=String" String -> Bool {cons("Bool1343Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1345Syn")}
    Var -> CName {}
    "[" InsertDzExp InsertDzOptExpComma ".." InsertDzOptExp "]" -> AExp {cons("AExp1347Syn")}
    K "=K" K -> Bool {cons("Bool1348Syn")}
    Pat -> PatList {}
    TyVar "" TyVars -> TyVars {cons("TyVars1ListSyn")}
    ".TyVars" -> TyVars {cons("TyVars1Empty")}
    Con "{" InsertDzVar "::" InsertDzType "}" -> NewConstr {cons("NewConstr1350Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1352Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1354Syn")}
    Fexp -> LExp {}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1355Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1357Syn")}
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream1358Syn")}
    K "inKList" KList -> Bool {cons("Bool1359Syn")}
    Exp ";" -> Stmt {cons("Stmt1360Syn")}
    "[" InsertDzPatList "]" -> APat {cons("APat1362Syn")}
    GCon APatList -> LPat {cons("LPat1363Syn")}
    QVarSym -> QVarOp {}
    Exp "," ExpTuple -> ExpTuple {cons("ExpTuple1364Syn")}
    Body -> Module {}
    "#EISDIR" -> IOError {cons("IOError1365Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map1366Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float1367Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1368Syn")}
    String "<String" String -> Bool {cons("Bool1369Syn")}
    Var -> APat {}
    Var "@" AAPat -> APat {cons("APat1370Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1372Syn")}
    InfixExp -> Exp {}
    "#EBADF" -> IOError {cons("IOError1374Syn")}
    "(" InsertDzVarSym ")" -> Var {cons("Var1375Syn")}
    Constr "|" Constrs -> Constrs {cons("Constrs1376Syn")}
    "(" InsertDzPatTuple ")" -> APat {cons("APat1377Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool1378Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool1379Syn")}
    "#stderr" -> Int {cons("Int1380Syn")}
    OptBangAType "" OptBangATypes -> OptBangATypes {cons("OptBangATypes1ListSyn")}
    ".OptBangATypes" -> OptBangATypes {cons("OptBangATypes1Empty")}
    Map "-Map" Map -> Map {cons("Map1382Syn")}
    "(" InsertDzExportList ",)" -> Exports {cons("Exports1383Syn")}
    BType AType -> BType {cons("BType1384Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1385Syn")}
    ConSym -> QConSym {}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String1386Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool1387Syn")}
    "{" InsertDzImpDdecls ";" InsertDzTopDdecls "}" -> Body {cons("Body1388Syn")}
    GTyCon -> Inst {}
    "(" InsertDzQOp InsertDzInfixExp ")" -> AExp {cons("AExp1389Syn")}
    DzInt -> Int {}
    "#freezer" K -> KLabel {cons("KLabel1390Syn")}
    VarId -> QVarId {}
    BType "->" Type -> Type {cons("Type1392Syn")}
    ";" -> OptSemicolon {cons("OptSemicolon1393Syn")}
    "|" GuardList -> Guards {cons("Guards1396Syn")}
    K "|->" K -> Map {cons("Map1397Syn")}
    "default" Types -> TopDdecl {cons("TopDdecl1398Syn")}
    Ddecl -> TopDdecl {}
    "size" "(" InsertDzList ")" -> Int {cons("Int1399Syn")}
    Int "=Int" Int -> Bool {cons("Bool1400Syn")}
    Alt ";" Alts -> Alts {cons("Alts1402Syn")}
    GConSym -> QConOp {}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1403Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1404Syn")}
    Classes -> Context {}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList1406Syn")}
    VarIdInner "#" -> VarId {cons("VarId1407Syn")}
    ModId "." VarSym -> QVarSym {cons("QVarSym1408Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String1409Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1420Syn")}
    "as" ModId -> OptAsModId {cons("OptAsModId1422Syn")}
    AAPat APats -> APatList {cons("APatList1423Syn")}
    Int "<Int" Int -> Bool {left, cons("Bool1424Syn")}
    GCon -> AExp {}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float1425Syn")}
    "`" InsertDzQConId "`" -> QConOp {cons("QConOp1426Syn")}
    Export "," ExportList -> ExportList {cons("ExportList1ListSyn")}
    ".ExportList" -> ExportList {cons("ExportList1Empty")}
    "\\" InsertDzAPats "->" Exp -> LExp {cons("LExp1428Syn")}
    QVar "," QVarList -> QVarList {cons("QVarList1ListSyn")}
    ".QVarList" -> QVarList {cons("QVarList1Empty")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int1429Syn")}
    StmtList InsertDzExp OptSemicolon -> Stmts {cons("Stmts1430Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List1432Syn")}
    "let" InsertDzDdecls ";" -> Stmt {cons("Stmt1433Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String1434Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1436Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String1437Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1438Syn")}
    Constr -> Constrs {}
    DzBool -> Bool {}
    FieldDdecl "," FieldDdeclList -> FieldDdeclList {cons("FieldDdeclList1ListSyn")}
    ".FieldDeclList" -> FieldDdeclList {cons("FieldDdeclList1Empty")}
    ExclamationMarkDz -> OptBang {cons("OptBang1439Syn")}
    KList "=KList" KList -> Bool {cons("Bool1440Syn")}
    "(" InsertDzGTyCon InsertDzTyVars ")" -> Inst {cons("Inst1442Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1443Syn")}
    QVar -> Export {}
    AType ATypes -> ATypes {cons("ATypes1444Syn")}
    Map Map -> Map {left, cons("Map1445Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1446Syn")}
    SubConstr InsertDzConOp SubConstr -> Constr {cons("Constr1447Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1448Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1449Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1450Syn")}
    ColonDz -> GConSym {cons("GConSym1452Syn")}
    "#noIO" -> Stream {cons("Stream1454Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1455Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1456Syn")}
    "#EACCES" -> IOError {cons("IOError1457Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1458Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1459Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1460Syn")}
    ConId -> ModId {}
    Set Set -> Set {left, cons("Set1462Syn")}
    "," Exp -> OptExpComma {cons("OptExpComma1463Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1464Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1465Syn")}
    TyCls -> QTyCls {}
    "(" InsertDzImportList InsertDzOptComma ")" -> ImpSpec {cons("ImpSpec1466Syn")}
    "deriving" DdClass -> Dderiving {cons("Dderiving1467Syn")}
    K "#inKList" KList -> Bool {cons("Bool1468Syn")}
    BType -> SubConstr {}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1469Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1470Syn")}
    VarId -> TyVar {}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1472Syn")}
    Pat "," PatList -> PatList {cons("PatList1473Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1474Syn")}
    "stdcall" -> CallConv {cons("CallConv1475Syn")}
    "`" InsertDzQVarId "`" -> QVarOp {cons("QVarOp1476Syn")}
    "(" InsertDzGConSym ")" -> QCon {cons("QCon1477Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1478Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1479Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1483Syn")}
    Alt -> Alts {}
    "import" InsertDzCallConv InsertDzSafety InsertDzImpent InsertDzVar "::" FType -> FDdecl {cons("FDdecl1484Syn")}
    DzString -> String {}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1486Syn")}
    VarIdInner "##" -> VarId {cons("VarId1487Syn")}
    "let" InsertDzDdecls "in" Exp -> LExp {cons("LExp1488Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1489Syn")}
    DzFloat -> Float {}
    ConIdInner "#" -> ConId {cons("ConId1492Syn")}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1493Syn")}
    "(" InsertDzExpTuple ")" -> AExp {cons("AExp1494Syn")}
    TyVar -> AType {}
    "deriving" DdClassList -> Dderiving {cons("Dderiving1495Syn")}
    "infix" -> Fixity {cons("Fixity1496Syn")}
    FunLhs Rhs -> CDdecl {cons("CDdecl1497Syn")}
    "dotnet" -> CallConv {cons("CallConv1498Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1499Syn")}
    "#stdin" -> Int {cons("Int1500Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1503Syn")}
    Var APatList -> FunLhs {cons("FunLhs1505Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1506Syn")}
    TyCon TyVars -> SimpleType {cons("SimpleType1520Syn")}
    ConId -> TyCon {}
    Type "," Type -> TypeTuple {cons("TypeTuple1522Syn")}
    ConIdInner -> ConId {}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1525Syn")}
    ModId "." ConSym -> QConSym {cons("QConSym1526Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1527Syn")}
    "(" InsertDzPat ")" -> APat {cons("APat1528Syn")}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1529Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1530Syn")}
    ".Set" -> Set {cons("Set1532Syn")}
    LiteralInner -> Literal {}
    QTyCls "(" InsertDzTyVar InsertDzATypes ")" -> Class {cons("Class1533Syn")}
    List List -> List {left, cons("List1534Syn")}
    ModId "." TyCls -> QTyCls {cons("QTyCls1535Syn")}
    "foreign" FDdecl -> TopDdecl {cons("TopDdecl1536Syn")}
    "()" -> GTyCon {cons("GTyCon1537Syn")}
    "=" Constrs -> OptConstrs {cons("OptConstrs1538Syn")}
    "(" InsertDzTyVar "->" InsertDzTyVar ")" -> Inst {cons("Inst1539Syn")}
    Pat "<-" InsertDzExp ";" -> Stmt {cons("Stmt1540Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1542Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1543Syn")}
    "{" InsertDzDdeclsList "}" -> Ddecls {cons("Ddecls1544Syn")}
    "cplusplus" -> CallConv {cons("CallConv1545Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1546Syn")}
    "(" InsertDzExportList ")" -> Exports {cons("Exports1547Syn")}
    String ">=String" String -> Bool {cons("Bool1548Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1549Syn")}
    QVar -> AExp {}
    Int "==Int" Int -> Bool {left, cons("Bool1550Syn")}
    "(" InsertDzFexp ")" AExp -> Fexp {cons("Fexp1552Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1553Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1554Syn")}
    FaType -> FrType {}
    Guard "," GuardList -> GuardList {cons("GuardList1555Syn")}
    "data" InsertDzOptContext InsertDzSimpleType InsertDzOptConstrs OptDderiving -> TopDdecl {cons("TopDdecl1556Syn")}
    "#ENOENT" -> IOError {cons("IOError1557Syn")}
    Stmt "" StmtList -> StmtList {cons("StmtList1ListSyn")}
    ".StmtList" -> StmtList {cons("StmtList1Empty")}
    "#EINVAL" -> IOError {cons("IOError1559Syn")}
    String ">String" String -> Bool {cons("Bool1560Syn")}
    CName "," CNameList -> CNameList {cons("CNameList1ListSyn")}
    ".CNameList" -> CNameList {cons("CNameList1Empty")}
    "safe" -> Safety {cons("Safety1562Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1563Syn")}
    ConOp -> Op {}
    List "[" InsertDzInt "]" -> K {cons("K1564Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1565Syn")}
    "#stdout" -> Int {cons("Int1566Syn")}
    "(,{,})" -> GTyCon {cons("GTyCon1567Syn")}
    Con OptBangATypes -> Constr {cons("Constr1568Syn")}
    "#noparse" -> IOError {cons("IOError1569Syn")}
    Class "," Classes -> Classes {cons("Classes1ListSyn")}
    ".Classes" -> Classes {cons("Classes1Empty")}
    ModId "." ConId -> QConId {cons("QConId1572Syn")}
    Guards "=" InsertDzExp GdRhs -> GdRhs {cons("GdRhs1573Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1574Syn")}
    FunLhs Rhs -> Ddecl {cons("Ddecl1575Syn")}
    Pat Rhs -> Ddecl {cons("Ddecl1576Syn")}
    "-" Integer -> LPat {cons("LPat1577Syn")}
    SContext "=>" -> OptSContext {cons("OptSContext1578Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1579Syn")}
    FrType -> FType {}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1580Syn")}
    "(" InsertDzType ")" -> AType {cons("AType1582Syn")}
    "instance" InsertDzOptSContext InsertDzQTyCls InsertDzInst OptIDdecls -> TopDdecl {cons("TopDdecl1583Syn")}
    "(" InsertDzConSym ")" -> Con {cons("Con1585Syn")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1586Syn")}
    BType -> Type {}
    KResult -> KItem {}
    Int -> Integer {}
    "getKLabel" K -> KLabel {cons("KLabel1587Syn")}
    "ccall" -> CallConv {cons("CallConv1588Syn")}
    ModId "." TyCon -> QTyCon {cons("QTyCon1589Syn")}
    Guard -> GuardList {}
    Guards "=" Exp -> GdRhs {cons("GdRhs1590Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1592Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1593Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1594Syn")}
    QVarId -> QVar {}
    QConId -> QCon {}
    "import" InsertDzOptQualified InsertDzModId InsertDzOptAsModId OptImpSpec -> ImpDdecl {cons("ImpDdecl1595Syn")}
    OptBang AType -> OptBangAType {cons("OptBangAType1596Syn")}
    InfixExp "::" InsertDzContext "=>" Type -> Exp {cons("Exp1597Syn")}
    Exp -> OptExp {}
    "()" -> GCon {cons("GCon1599Syn")}
    "Float2String" "(" InsertDzFloat "," InsertDzString ")" -> String {cons("String1600Syn")}
    "#EOF" -> IOError {cons("IOError1602Syn")}
    Op "," Ops -> Ops {cons("Ops1603Syn")}
    SimpleClassList -> SContext {}
    IDdecl ";" IDdeclsList -> IDdeclsList {cons("IDdeclsList1ListSyn")}
    ".IDeclsList" -> IDdeclsList {cons("IDdeclsList1Empty")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1606Syn")}
    "(" InsertDzFunLhs ")" APatList -> FunLhs {cons("FunLhs1607Syn")}
    "unsafe" -> Safety {cons("Safety1608Syn")}
    "(" InsertDzExp ")" -> AExp {cons("AExp1609Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1620Syn")}
    TyCon OptCNameList -> Import {cons("Import1622Syn")}
    Vars "::" Type -> GenDdecl {cons("GenDdecl1623Syn")}
    Fixity Ops -> GenDdecl {cons("GenDdecl1624Syn")}
    "," -> OptComma {cons("OptComma1626Syn")}
    "module" ModId -> Export {cons("Export1627Syn")}
    "where" Ddecls -> OptDdecls {cons("OptDdecls1628Syn")}
    QVarOp -> QOp {}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1629Syn")}
    "#ESPIPE" -> IOError {cons("IOError1630Syn")}
    Literal -> AExp {}
    ExclamationMarkDz AType -> SubConstr {cons("SubConstr1632Syn")}
    K "in" List -> Bool {cons("Bool1633Syn")}
    QTyCls OptQVarList -> Export {cons("Export1634Syn")}
    FPat "," FPats -> FPats {cons("FPats1ListSyn")}
    ".FPats" -> FPats {cons("FPats1Empty")}
    "IMPENT" -> Impent {cons("Impent1635Syn")}
    InfixExp "::" Type -> Exp {cons("Exp1636Syn")}
    Pat    -> InsertDzPat
    Ddecls    -> InsertDzDdecls
    QTyCls    -> InsertDzQTyCls
    Var    -> InsertDzVar
    ConOp    -> InsertDzConOp
    String    -> InsertDzString
    VarSym    -> InsertDzVarSym
    VarList    -> InsertDzVarList
    OptContext    -> InsertDzOptContext
    OptComma    -> InsertDzOptComma
    FunLhs    -> InsertDzFunLhs
    TyCls    -> InsertDzTyCls
    QOp    -> InsertDzQOp
    TyVarTuple    -> InsertDzTyVarTuple
    Alts    -> InsertDzAlts
    Bool    -> InsertDzBool
    FPats    -> InsertDzFPats
    TopDdecls    -> InsertDzTopDdecls
    ExpList    -> InsertDzExpList
    TyVar    -> InsertDzTyVar
    List    -> InsertDzList
    VarOp    -> InsertDzVarOp
    ConSym    -> InsertDzConSym
    OptExp    -> InsertDzOptExp
    APats    -> InsertDzAPats
    Exports    -> InsertDzExports
    QConOp    -> InsertDzQConOp
    FieldDdeclList    -> InsertDzFieldDdeclList
    KLabel    -> InsertDzKLabel
    Float    -> InsertDzFloat
    Fexp    -> InsertDzFexp
    Id    -> InsertDzId
    IDdeclsList    -> InsertDzIDdeclsList
    Map    -> InsertDzMap
    KItem    -> InsertDzKItem
    OptExpComma    -> InsertDzOptExpComma
    PatList    -> InsertDzPatList
    TypeTuple    -> InsertDzTypeTuple
    Set    -> InsertDzSet
    Expent    -> InsertDzExpent
    Stmts    -> InsertDzStmts
    OptConstrs    -> InsertDzOptConstrs
    Inst    -> InsertDzInst
    OptSContext    -> InsertDzOptSContext
    GTyCon    -> InsertDzGTyCon
    K    -> InsertDzK
    KList    -> InsertDzKList
    CDdeclsList    -> InsertDzCDdeclsList
    Int    -> InsertDzInt
    SimpleType    -> InsertDzSimpleType
    QVarList    -> InsertDzQVarList
    ExportList    -> InsertDzExportList
    NewConstr    -> InsertDzNewConstr
    Char    -> InsertDzChar
    OptSemicolon    -> InsertDzOptSemicolon
    CNameList    -> InsertDzCNameList
    TyVars    -> InsertDzTyVars
    ExpTuple    -> InsertDzExpTuple
    CallConv    -> InsertDzCallConv
    Safety    -> InsertDzSafety
    OptAsModId    -> InsertDzOptAsModId
    Context    -> InsertDzContext
    PatTuple    -> InsertDzPatTuple
    VarId    -> InsertDzVarId
    ModId    -> InsertDzModId
    Integer    -> InsertDzInteger
    QConId    -> InsertDzQConId
    Type    -> InsertDzType
    GConSym    -> InsertDzGConSym
    QVarId    -> InsertDzQVarId
    QVarSym    -> InsertDzQVarSym
    ImpDdecls    -> InsertDzImpDdecls
    DdeclsList    -> InsertDzDdeclsList
    ImportList    -> InsertDzImportList
    ConId    -> InsertDzConId
    Impent    -> InsertDzImpent
    ATypes    -> InsertDzATypes
    Exp    -> InsertDzExp
    InfixExp    -> InsertDzInfixExp
    OptQualified    -> InsertDzOptQualified


    VARID  ":Nat"        -> NatDzVar            {cons("Nat12Var")}
    VARID  ":Nat{" TagListDz "}"        -> NatDzVar            {cons("Nat12VarAttr")}
    VARID  ":Op"        -> OpDzVar            {cons("Op12Var")}
    VARID  ":Op{" TagListDz "}"        -> OpDzVar            {cons("Op12VarAttr")}
    VARID  ":AExp"        -> AExpDzVar            {cons("AExp12Var")}
    VARID  ":AExp{" TagListDz "}"        -> AExpDzVar            {cons("AExp12VarAttr")}
    VARID  ":Import"        -> ImportDzVar            {cons("Import12Var")}
    VARID  ":Import{" TagListDz "}"        -> ImportDzVar            {cons("Import12VarAttr")}
    VARID  ":Decls"        -> DdeclsDzVar            {cons("Ddecls12Var")}
    VARID  ":Decls{" TagListDz "}"        -> DdeclsDzVar            {cons("Ddecls12VarAttr")}
    VARID  ":Var"        -> VarDzVar            {cons("Var12Var")}
    VARID  ":Var{" TagListDz "}"        -> VarDzVar            {cons("Var12VarAttr")}
    VARID  ":ConOp"        -> ConOpDzVar            {cons("ConOp12Var")}
    VARID  ":ConOp{" TagListDz "}"        -> ConOpDzVar            {cons("ConOp12VarAttr")}
    VARID  ":LowerCase"        -> LowerCaseDzVar            {cons("LowerCase12Var")}
    VARID  ":LowerCase{" TagListDz "}"        -> LowerCaseDzVar            {cons("LowerCase12VarAttr")}
    VARID  ":CamelCaseId"        -> CamelCaseIdDzVar            {cons("CamelCaseId12Var")}
    VARID  ":CamelCaseId{" TagListDz "}"        -> CamelCaseIdDzVar            {cons("CamelCaseId12VarAttr")}
    VARID  ":String"        -> StringDzVar            {cons("String12Var")}
    VARID  ":String{" TagListDz "}"        -> StringDzVar            {cons("String12VarAttr")}
    VARID  ":VarSym"        -> VarSymDzVar            {cons("VarSym12Var")}
    VARID  ":VarSym{" TagListDz "}"        -> VarSymDzVar            {cons("VarSym12VarAttr")}
    VARID  ":VarList"        -> VarListDzVar            {cons("VarList12Var")}
    VARID  ":VarList{" TagListDz "}"        -> VarListDzVar            {cons("VarList12VarAttr")}
    VARID  ":OptContext"        -> OptContextDzVar            {cons("OptContext12Var")}
    VARID  ":OptContext{" TagListDz "}"        -> OptContextDzVar            {cons("OptContext12VarAttr")}
    VARID  ":DClassList"        -> DdClassListDzVar            {cons("DdClassList12Var")}
    VARID  ":DClassList{" TagListDz "}"        -> DdClassListDzVar            {cons("DdClassList12VarAttr")}
    VARID  ":OptImpSpec"        -> OptImpSpecDzVar            {cons("OptImpSpec12Var")}
    VARID  ":OptImpSpec{" TagListDz "}"        -> OptImpSpecDzVar            {cons("OptImpSpec12VarAttr")}
    VARID  ":OptComma"        -> OptCommaDzVar            {cons("OptComma12Var")}
    VARID  ":OptComma{" TagListDz "}"        -> OptCommaDzVar            {cons("OptComma12VarAttr")}
    VARID  ":ConIdInner"        -> ConIdInnerDzVar            {cons("ConIdInner12Var")}
    VARID  ":ConIdInner{" TagListDz "}"        -> ConIdInnerDzVar            {cons("ConIdInner12VarAttr")}
    VARID  ":LExp"        -> LExpDzVar            {cons("LExp12Var")}
    VARID  ":LExp{" TagListDz "}"        -> LExpDzVar            {cons("LExp12VarAttr")}
    VARID  ":QOp"        -> QOpDzVar            {cons("QOp12Var")}
    VARID  ":QOp{" TagListDz "}"        -> QOpDzVar            {cons("QOp12VarAttr")}
    VARID  ":TyVarTuple"        -> TyVarTupleDzVar            {cons("TyVarTuple12Var")}
    VARID  ":TyVarTuple{" TagListDz "}"        -> TyVarTupleDzVar            {cons("TyVarTuple12VarAttr")}
    VARID  ":Bool"        -> BoolDzVar            {cons("Bool12Var")}
    VARID  ":Bool{" TagListDz "}"        -> BoolDzVar            {cons("Bool12VarAttr")}
    VARID  ":Alts"        -> AltsDzVar            {cons("Alts12Var")}
    VARID  ":Alts{" TagListDz "}"        -> AltsDzVar            {cons("Alts12VarAttr")}
    VARID  ":TopDecls"        -> TopDdeclsDzVar            {cons("TopDdecls12Var")}
    VARID  ":TopDecls{" TagListDz "}"        -> TopDdeclsDzVar            {cons("TopDdecls12VarAttr")}
    VARID  ":OptBangAType"        -> OptBangATypeDzVar            {cons("OptBangAType12Var")}
    VARID  ":OptBangAType{" TagListDz "}"        -> OptBangATypeDzVar            {cons("OptBangAType12VarAttr")}
    VARID  ":ExpList"        -> ExpListDzVar            {cons("ExpList12Var")}
    VARID  ":ExpList{" TagListDz "}"        -> ExpListDzVar            {cons("ExpList12VarAttr")}
    VARID  ":Classes"        -> ClassesDzVar            {cons("Classes12Var")}
    VARID  ":Classes{" TagListDz "}"        -> ClassesDzVar            {cons("Classes12VarAttr")}
    VARID  ":OptDecls"        -> OptDdeclsDzVar            {cons("OptDdecls12Var")}
    VARID  ":OptDecls{" TagListDz "}"        -> OptDdeclsDzVar            {cons("OptDdecls12VarAttr")}
    VARID  ":Constrs"        -> ConstrsDzVar            {cons("Constrs12Var")}
    VARID  ":Constrs{" TagListDz "}"        -> ConstrsDzVar            {cons("Constrs12VarAttr")}
    VARID  ":Constr"        -> ConstrDzVar            {cons("Constr12Var")}
    VARID  ":Constr{" TagListDz "}"        -> ConstrDzVar            {cons("Constr12VarAttr")}
    VARID  ":SContext"        -> SContextDzVar            {cons("SContext12Var")}
    VARID  ":SContext{" TagListDz "}"        -> SContextDzVar            {cons("SContext12VarAttr")}
    VARID  ":Exports"        -> ExportsDzVar            {cons("Exports12Var")}
    VARID  ":Exports{" TagListDz "}"        -> ExportsDzVar            {cons("Exports12VarAttr")}
    VARID  ":QConOp"        -> QConOpDzVar            {cons("QConOp12Var")}
    VARID  ":QConOp{" TagListDz "}"        -> QConOpDzVar            {cons("QConOp12VarAttr")}
    VARID  ":OptBangATypes"        -> OptBangATypesDzVar            {cons("OptBangATypes12Var")}
    VARID  ":OptBangATypes{" TagListDz "}"        -> OptBangATypesDzVar            {cons("OptBangATypes12VarAttr")}
    VARID  ":FieldDeclList"        -> FieldDdeclListDzVar            {cons("FieldDdeclList12Var")}
    VARID  ":FieldDeclList{" TagListDz "}"        -> FieldDdeclListDzVar            {cons("FieldDdeclList12VarAttr")}
    VARID  ":QVar"        -> QVarDzVar            {cons("QVar12Var")}
    VARID  ":QVar{" TagListDz "}"        -> QVarDzVar            {cons("QVar12VarAttr")}
    VARID  ":Float"        -> FloatDzVar            {cons("Float12Var")}
    VARID  ":Float{" TagListDz "}"        -> FloatDzVar            {cons("Float12VarAttr")}
    VARID  ":OptDeriving"        -> OptDderivingDzVar            {cons("OptDderiving12Var")}
    VARID  ":OptDeriving{" TagListDz "}"        -> OptDderivingDzVar            {cons("OptDderiving12VarAttr")}
    VARID  ":Fexp"        -> FexpDzVar            {cons("Fexp12Var")}
    VARID  ":Fexp{" TagListDz "}"        -> FexpDzVar            {cons("Fexp12VarAttr")}
    VARID  ":Id"        -> IdDzVar            {cons("Id12Var")}
    VARID  ":Id{" TagListDz "}"        -> IdDzVar            {cons("Id12VarAttr")}
    VARID  ":Module"        -> ModuleDzVar            {cons("Module12Var")}
    VARID  ":Module{" TagListDz "}"        -> ModuleDzVar            {cons("Module12VarAttr")}
    VARID  ":IDeclsList"        -> IDdeclsListDzVar            {cons("IDdeclsList12Var")}
    VARID  ":IDeclsList{" TagListDz "}"        -> IDdeclsListDzVar            {cons("IDdeclsList12VarAttr")}
    VARID  ":Map"        -> MapDzVar            {cons("Map12Var")}
    VARID  ":Map{" TagListDz "}"        -> MapDzVar            {cons("Map12VarAttr")}
    VARID  ":OptExpComma"        -> OptExpCommaDzVar            {cons("OptExpComma12Var")}
    VARID  ":OptExpComma{" TagListDz "}"        -> OptExpCommaDzVar            {cons("OptExpComma12VarAttr")}
    VARID  ":PatList"        -> PatListDzVar            {cons("PatList12Var")}
    VARID  ":PatList{" TagListDz "}"        -> PatListDzVar            {cons("PatList12VarAttr")}
    VARID  ":#Float"        -> DzFloatDzVar            {cons("DzFloat12Var")}
    VARID  ":#Float{" TagListDz "}"        -> DzFloatDzVar            {cons("DzFloat12VarAttr")}
    VARID  ":TopDecl"        -> TopDdeclDzVar            {cons("TopDdecl12Var")}
    VARID  ":TopDecl{" TagListDz "}"        -> TopDdeclDzVar            {cons("TopDdecl12VarAttr")}
    VARID  ":IDecls"        -> IDdeclsDzVar            {cons("IDdecls12Var")}
    VARID  ":IDecls{" TagListDz "}"        -> IDdeclsDzVar            {cons("IDdecls12VarAttr")}
    VARID  ":TypeTuple"        -> TypeTupleDzVar            {cons("TypeTuple12Var")}
    VARID  ":TypeTuple{" TagListDz "}"        -> TypeTupleDzVar            {cons("TypeTuple12VarAttr")}
    VARID  ":Set"        -> SetDzVar            {cons("Set12Var")}
    VARID  ":Set{" TagListDz "}"        -> SetDzVar            {cons("Set12VarAttr")}
    VARID  ":OptConstrs"        -> OptConstrsDzVar            {cons("OptConstrs12Var")}
    VARID  ":OptConstrs{" TagListDz "}"        -> OptConstrsDzVar            {cons("OptConstrs12VarAttr")}
    VARID  ":Expent"        -> ExpentDzVar            {cons("Expent12Var")}
    VARID  ":Expent{" TagListDz "}"        -> ExpentDzVar            {cons("Expent12VarAttr")}
    VARID  ":Stmts"        -> StmtsDzVar            {cons("Stmts12Var")}
    VARID  ":Stmts{" TagListDz "}"        -> StmtsDzVar            {cons("Stmts12VarAttr")}
    VARID  ":Inst"        -> InstDzVar            {cons("Inst12Var")}
    VARID  ":Inst{" TagListDz "}"        -> InstDzVar            {cons("Inst12VarAttr")}
    VARID  ":MInt"        -> MIntDzVar            {cons("MInt12Var")}
    VARID  ":MInt{" TagListDz "}"        -> MIntDzVar            {cons("MInt12VarAttr")}
    VARID  ":FaType"        -> FaTypeDzVar            {cons("FaType12Var")}
    VARID  ":FaType{" TagListDz "}"        -> FaTypeDzVar            {cons("FaType12VarAttr")}
    VARID  ":Guards"        -> GuardsDzVar            {cons("Guards12Var")}
    VARID  ":Guards{" TagListDz "}"        -> GuardsDzVar            {cons("Guards12VarAttr")}
    VARID  ":GTyCon"        -> GTyConDzVar            {cons("GTyCon12Var")}
    VARID  ":GTyCon{" TagListDz "}"        -> GTyConDzVar            {cons("GTyCon12VarAttr")}
    VARID  ":TyCon"        -> TyConDzVar            {cons("TyCon12Var")}
    VARID  ":TyCon{" TagListDz "}"        -> TyConDzVar            {cons("TyCon12VarAttr")}
    VARID  ":APatList"        -> APatListDzVar            {cons("APatList12Var")}
    VARID  ":APatList{" TagListDz "}"        -> APatListDzVar            {cons("APatList12VarAttr")}
    VARID  ":CDeclsList"        -> CDdeclsListDzVar            {cons("CDdeclsList12Var")}
    VARID  ":CDeclsList{" TagListDz "}"        -> CDdeclsListDzVar            {cons("CDdeclsList12VarAttr")}
    VARID  ":SubConstr"        -> SubConstrDzVar            {cons("SubConstr12Var")}
    VARID  ":SubConstr{" TagListDz "}"        -> SubConstrDzVar            {cons("SubConstr12VarAttr")}
    VARID  ":SimpleType"        -> SimpleTypeDzVar            {cons("SimpleType12Var")}
    VARID  ":SimpleType{" TagListDz "}"        -> SimpleTypeDzVar            {cons("SimpleType12VarAttr")}
    VARID  ":QVarList"        -> QVarListDzVar            {cons("QVarList12Var")}
    VARID  ":QVarList{" TagListDz "}"        -> QVarListDzVar            {cons("QVarList12VarAttr")}
    VARID  ":QCon"        -> QConDzVar            {cons("QCon12Var")}
    VARID  ":QCon{" TagListDz "}"        -> QConDzVar            {cons("QCon12VarAttr")}
    VARID  ":NewConstr"        -> NewConstrDzVar            {cons("NewConstr12Var")}
    VARID  ":NewConstr{" TagListDz "}"        -> NewConstrDzVar            {cons("NewConstr12VarAttr")}
    VARID  ":Char"        -> CharDzVar            {cons("Char12Var")}
    VARID  ":Char{" TagListDz "}"        -> CharDzVar            {cons("Char12VarAttr")}
    VARID  ":BType"        -> BTypeDzVar            {cons("BType12Var")}
    VARID  ":BType{" TagListDz "}"        -> BTypeDzVar            {cons("BType12VarAttr")}
    VARID  ":OptSemicolon"        -> OptSemicolonDzVar            {cons("OptSemicolon12Var")}
    VARID  ":OptSemicolon{" TagListDz "}"        -> OptSemicolonDzVar            {cons("OptSemicolon12VarAttr")}
    VARID  ":CNameList"        -> CNameListDzVar            {cons("CNameList12Var")}
    VARID  ":CNameList{" TagListDz "}"        -> CNameListDzVar            {cons("CNameList12VarAttr")}
    VARID  ":TyVars"        -> TyVarsDzVar            {cons("TyVars12Var")}
    VARID  ":TyVars{" TagListDz "}"        -> TyVarsDzVar            {cons("TyVars12VarAttr")}
    VARID  ":Export"        -> ExportDzVar            {cons("Export12Var")}
    VARID  ":Export{" TagListDz "}"        -> ExportDzVar            {cons("Export12VarAttr")}
    VARID  ":ExpTuple"        -> ExpTupleDzVar            {cons("ExpTuple12Var")}
    VARID  ":ExpTuple{" TagListDz "}"        -> ExpTupleDzVar            {cons("ExpTuple12VarAttr")}
    VARID  ":OptQVarList"        -> OptQVarListDzVar            {cons("OptQVarList12Var")}
    VARID  ":OptQVarList{" TagListDz "}"        -> OptQVarListDzVar            {cons("OptQVarList12VarAttr")}
    VARID  ":CallConv"        -> CallConvDzVar            {cons("CallConv12Var")}
    VARID  ":CallConv{" TagListDz "}"        -> CallConvDzVar            {cons("CallConv12VarAttr")}
    VARID  ":FPat"        -> FPatDzVar            {cons("FPat12Var")}
    VARID  ":FPat{" TagListDz "}"        -> FPatDzVar            {cons("FPat12VarAttr")}
    VARID  ":CDecl"        -> CDdeclDzVar            {cons("CDdecl12Var")}
    VARID  ":CDecl{" TagListDz "}"        -> CDdeclDzVar            {cons("CDdecl12VarAttr")}
    VARID  ":OptAsModId"        -> OptAsModIdDzVar            {cons("OptAsModId12Var")}
    VARID  ":OptAsModId{" TagListDz "}"        -> OptAsModIdDzVar            {cons("OptAsModId12VarAttr")}
    VARID  ":Context"        -> ContextDzVar            {cons("Context12Var")}
    VARID  ":Context{" TagListDz "}"        -> ContextDzVar            {cons("Context12VarAttr")}
    VARID  ":PascalCaseId"        -> PascalCaseIdDzVar            {cons("PascalCaseId12Var")}
    VARID  ":PascalCaseId{" TagListDz "}"        -> PascalCaseIdDzVar            {cons("PascalCaseId12VarAttr")}
    VARID  ":Con"        -> ConDzVar            {cons("Con12Var")}
    VARID  ":Con{" TagListDz "}"        -> ConDzVar            {cons("Con12VarAttr")}
    VARID  ":UpperCase"        -> UpperCaseDzVar            {cons("UpperCase12Var")}
    VARID  ":UpperCase{" TagListDz "}"        -> UpperCaseDzVar            {cons("UpperCase12VarAttr")}
    VARID  ":Vars"        -> VarsDzVar            {cons("Vars12Var")}
    VARID  ":Vars{" TagListDz "}"        -> VarsDzVar            {cons("Vars12VarAttr")}
    VARID  ":OptCNameList"        -> OptCNameListDzVar            {cons("OptCNameList12Var")}
    VARID  ":OptCNameList{" TagListDz "}"        -> OptCNameListDzVar            {cons("OptCNameList12VarAttr")}
    VARID  ":PatTuple"        -> PatTupleDzVar            {cons("PatTuple12Var")}
    VARID  ":PatTuple{" TagListDz "}"        -> PatTupleDzVar            {cons("PatTuple12VarAttr")}
    VARID  ":SimpleClassList"        -> SimpleClassListDzVar            {cons("SimpleClassList12Var")}
    VARID  ":SimpleClassList{" TagListDz "}"        -> SimpleClassListDzVar            {cons("SimpleClassList12VarAttr")}
    VARID  ":Deriving"        -> DderivingDzVar            {cons("Dderiving12Var")}
    VARID  ":Deriving{" TagListDz "}"        -> DderivingDzVar            {cons("Dderiving12VarAttr")}
    VARID  ":VarId"        -> VarIdDzVar            {cons("VarId12Var")}
    VARID  ":VarId{" TagListDz "}"        -> VarIdDzVar            {cons("VarId12VarAttr")}
    VARID  ":QConId"        -> QConIdDzVar            {cons("QConId12Var")}
    VARID  ":QConId{" TagListDz "}"        -> QConIdDzVar            {cons("QConId12VarAttr")}
    VARID  ":FieldDecl"        -> FieldDdeclDzVar            {cons("FieldDdecl12Var")}
    VARID  ":FieldDecl{" TagListDz "}"        -> FieldDdeclDzVar            {cons("FieldDdecl12VarAttr")}
    VARID  ":Type"        -> TypeDzVar            {cons("Type12Var")}
    VARID  ":Type{" TagListDz "}"        -> TypeDzVar            {cons("Type12VarAttr")}
    VARID  ":GConSym"        -> GConSymDzVar            {cons("GConSym12Var")}
    VARID  ":GConSym{" TagListDz "}"        -> GConSymDzVar            {cons("GConSym12VarAttr")}
    VARID  ":ImportList"        -> ImportListDzVar            {cons("ImportList12Var")}
    VARID  ":ImportList{" TagListDz "}"        -> ImportListDzVar            {cons("ImportList12VarAttr")}
    VARID  ":DClass"        -> DdClassDzVar            {cons("DdClass12Var")}
    VARID  ":DClass{" TagListDz "}"        -> DdClassDzVar            {cons("DdClass12VarAttr")}
    VARID  ":Impent"        -> ImpentDzVar            {cons("Impent12Var")}
    VARID  ":Impent{" TagListDz "}"        -> ImpentDzVar            {cons("Impent12VarAttr")}
    VARID  ":ATypes"        -> ATypesDzVar            {cons("ATypes12Var")}
    VARID  ":ATypes{" TagListDz "}"        -> ATypesDzVar            {cons("ATypes12VarAttr")}
    VARID  ":InfixExp"        -> InfixExpDzVar            {cons("InfixExp12Var")}
    VARID  ":InfixExp{" TagListDz "}"        -> InfixExpDzVar            {cons("InfixExp12VarAttr")}
    VARID  ":StmtList"        -> StmtListDzVar            {cons("StmtList12Var")}
    VARID  ":StmtList{" TagListDz "}"        -> StmtListDzVar            {cons("StmtList12VarAttr")}
    VARID  ":OptQualified"        -> OptQualifiedDzVar            {cons("OptQualified12Var")}
    VARID  ":OptQualified{" TagListDz "}"        -> OptQualifiedDzVar            {cons("OptQualified12VarAttr")}
    VARID  ":ImpSpec"        -> ImpSpecDzVar            {cons("ImpSpec12Var")}
    VARID  ":ImpSpec{" TagListDz "}"        -> ImpSpecDzVar            {cons("ImpSpec12VarAttr")}
    VARID  ":Types"        -> TypesDzVar            {cons("Types12Var")}
    VARID  ":Types{" TagListDz "}"        -> TypesDzVar            {cons("Types12VarAttr")}
    VARID  ":Pat"        -> PatDzVar            {cons("Pat12Var")}
    VARID  ":Pat{" TagListDz "}"        -> PatDzVar            {cons("Pat12VarAttr")}
    VARID  ":QTyCls"        -> QTyClsDzVar            {cons("QTyCls12Var")}
    VARID  ":QTyCls{" TagListDz "}"        -> QTyClsDzVar            {cons("QTyCls12VarAttr")}
    VARID  ":ImpDecl"        -> ImpDdeclDzVar            {cons("ImpDdecl12Var")}
    VARID  ":ImpDecl{" TagListDz "}"        -> ImpDdeclDzVar            {cons("ImpDdecl12VarAttr")}
    VARID  ":Alt"        -> AltDzVar            {cons("Alt12Var")}
    VARID  ":Alt{" TagListDz "}"        -> AltDzVar            {cons("Alt12VarAttr")}
    VARID  ":GuardList"        -> GuardListDzVar            {cons("GuardList12Var")}
    VARID  ":GuardList{" TagListDz "}"        -> GuardListDzVar            {cons("GuardList12VarAttr")}
    VARID  ":SimpleClass"        -> SimpleClassDzVar            {cons("SimpleClass12Var")}
    VARID  ":SimpleClass{" TagListDz "}"        -> SimpleClassDzVar            {cons("SimpleClass12VarAttr")}
    VARID  ":FunLhs"        -> FunLhsDzVar            {cons("FunLhs12Var")}
    VARID  ":FunLhs{" TagListDz "}"        -> FunLhsDzVar            {cons("FunLhs12VarAttr")}
    VARID  ":TyCls"        -> TyClsDzVar            {cons("TyCls12Var")}
    VARID  ":TyCls{" TagListDz "}"        -> TyClsDzVar            {cons("TyCls12VarAttr")}
    VARID  ":Ops"        -> OpsDzVar            {cons("Ops12Var")}
    VARID  ":Ops{" TagListDz "}"        -> OpsDzVar            {cons("Ops12VarAttr")}
    VARID  ":LPat"        -> LPatDzVar            {cons("LPat12Var")}
    VARID  ":LPat{" TagListDz "}"        -> LPatDzVar            {cons("LPat12VarAttr")}
    VARID  ":FPats"        -> FPatsDzVar            {cons("FPats12Var")}
    VARID  ":FPats{" TagListDz "}"        -> FPatsDzVar            {cons("FPats12VarAttr")}
    VARID  ":Literal"        -> LiteralDzVar            {cons("Literal12Var")}
    VARID  ":Literal{" TagListDz "}"        -> LiteralDzVar            {cons("Literal12VarAttr")}
    VARID  ":VarIdInner"        -> VarIdInnerDzVar            {cons("VarIdInner12Var")}
    VARID  ":VarIdInner{" TagListDz "}"        -> VarIdInnerDzVar            {cons("VarIdInner12VarAttr")}
    VARID  ":GenDecl"        -> GenDdeclDzVar            {cons("GenDdecl12Var")}
    VARID  ":GenDecl{" TagListDz "}"        -> GenDdeclDzVar            {cons("GenDdecl12VarAttr")}
    VARID  ":List"        -> ListDzVar            {cons("List12Var")}
    VARID  ":List{" TagListDz "}"        -> ListDzVar            {cons("List12VarAttr")}
    VARID  ":Stream"        -> StreamDzVar            {cons("Stream12Var")}
    VARID  ":Stream{" TagListDz "}"        -> StreamDzVar            {cons("Stream12VarAttr")}
    VARID  ":TyVar"        -> TyVarDzVar            {cons("TyVar12Var")}
    VARID  ":TyVar{" TagListDz "}"        -> TyVarDzVar            {cons("TyVar12VarAttr")}
    VARID  ":Guard"        -> GuardDzVar            {cons("Guard12Var")}
    VARID  ":Guard{" TagListDz "}"        -> GuardDzVar            {cons("Guard12VarAttr")}
    VARID  ":GCon"        -> GConDzVar            {cons("GCon12Var")}
    VARID  ":GCon{" TagListDz "}"        -> GConDzVar            {cons("GCon12VarAttr")}
    VARID  ":#String"        -> DzStringDzVar            {cons("DzString12Var")}
    VARID  ":#String{" TagListDz "}"        -> DzStringDzVar            {cons("DzString12VarAttr")}
    VARID  ":AType"        -> ATypeDzVar            {cons("AType12Var")}
    VARID  ":AType{" TagListDz "}"        -> ATypeDzVar            {cons("AType12VarAttr")}
    VARID  ":#Bool"        -> DzBoolDzVar            {cons("DzBool12Var")}
    VARID  ":#Bool{" TagListDz "}"        -> DzBoolDzVar            {cons("DzBool12VarAttr")}
    VARID  ":ConSym"        -> ConSymDzVar            {cons("ConSym12Var")}
    VARID  ":ConSym{" TagListDz "}"        -> ConSymDzVar            {cons("ConSym12VarAttr")}
    VARID  ":VarOp"        -> VarOpDzVar            {cons("VarOp12Var")}
    VARID  ":VarOp{" TagListDz "}"        -> VarOpDzVar            {cons("VarOp12VarAttr")}
    VARID  ":FType"        -> FTypeDzVar            {cons("FType12Var")}
    VARID  ":FType{" TagListDz "}"        -> FTypeDzVar            {cons("FType12VarAttr")}
    VARID  ":OptExp"        -> OptExpDzVar            {cons("OptExp12Var")}
    VARID  ":OptExp{" TagListDz "}"        -> OptExpDzVar            {cons("OptExp12VarAttr")}
    VARID  ":FrType"        -> FrTypeDzVar            {cons("FrType12Var")}
    VARID  ":FrType{" TagListDz "}"        -> FrTypeDzVar            {cons("FrType12VarAttr")}
    VARID  ":APats"        -> APatsDzVar            {cons("APats12Var")}
    VARID  ":APats{" TagListDz "}"        -> APatsDzVar            {cons("APats12VarAttr")}
    VARID  ":QVarOp"        -> QVarOpDzVar            {cons("QVarOp12Var")}
    VARID  ":QVarOp{" TagListDz "}"        -> QVarOpDzVar            {cons("QVarOp12VarAttr")}
    VARID  ":IDecl"        -> IDdeclDzVar            {cons("IDdecl12Var")}
    VARID  ":IDecl{" TagListDz "}"        -> IDdeclDzVar            {cons("IDdecl12VarAttr")}
    VARID  ":OptVarList"        -> OptVarListDzVar            {cons("OptVarList12Var")}
    VARID  ":OptVarList{" TagListDz "}"        -> OptVarListDzVar            {cons("OptVarList12VarAttr")}
    VARID  ":Class"        -> ClassDzVar            {cons("Class12Var")}
    VARID  ":Class{" TagListDz "}"        -> ClassDzVar            {cons("Class12VarAttr")}
    VARID  ":CName"        -> CNameDzVar            {cons("CName12Var")}
    VARID  ":CName{" TagListDz "}"        -> CNameDzVar            {cons("CName12VarAttr")}
    VARID  ":APat"        -> APatDzVar            {cons("APat12Var")}
    VARID  ":APat{" TagListDz "}"        -> APatDzVar            {cons("APat12VarAttr")}
    VARID  ":ATypeList"        -> ATypeListDzVar            {cons("ATypeList12Var")}
    VARID  ":ATypeList{" TagListDz "}"        -> ATypeListDzVar            {cons("ATypeList12VarAttr")}
    VARID  ":CDecls"        -> CDdeclsDzVar            {cons("CDdecls12Var")}
    VARID  ":CDecls{" TagListDz "}"        -> CDdeclsDzVar            {cons("CDdecls12VarAttr")}
    VARID  ":OptBang"        -> OptBangDzVar            {cons("OptBang12Var")}
    VARID  ":OptBang{" TagListDz "}"        -> OptBangDzVar            {cons("OptBang12VarAttr")}
    VARID  ":OptSContext"        -> OptSContextDzVar            {cons("OptSContext12Var")}
    VARID  ":OptSContext{" TagListDz "}"        -> OptSContextDzVar            {cons("OptSContext12VarAttr")}
    VARID  ":CusFloat"        -> CusFloatDzVar            {cons("CusFloat12Var")}
    VARID  ":CusFloat{" TagListDz "}"        -> CusFloatDzVar            {cons("CusFloat12VarAttr")}
    VARID  ":Int"        -> IntDzVar            {cons("Int12Var")}
    VARID  ":Int{" TagListDz "}"        -> IntDzVar            {cons("Int12VarAttr")}
    VARID  ":Stmt"        -> StmtDzVar            {cons("Stmt12Var")}
    VARID  ":Stmt{" TagListDz "}"        -> StmtDzVar            {cons("Stmt12VarAttr")}
    VARID  ":LiteralInner"        -> LiteralInnerDzVar            {cons("LiteralInner12Var")}
    VARID  ":LiteralInner{" TagListDz "}"        -> LiteralInnerDzVar            {cons("LiteralInner12VarAttr")}
    VARID  ":AAPat"        -> AAPatDzVar            {cons("AAPat12Var")}
    VARID  ":AAPat{" TagListDz "}"        -> AAPatDzVar            {cons("AAPat12VarAttr")}
    VARID  ":ExportList"        -> ExportListDzVar            {cons("ExportList12Var")}
    VARID  ":ExportList{" TagListDz "}"        -> ExportListDzVar            {cons("ExportList12VarAttr")}
    VARID  ":GdRhs"        -> GdRhsDzVar            {cons("GdRhs12Var")}
    VARID  ":GdRhs{" TagListDz "}"        -> GdRhsDzVar            {cons("GdRhs12VarAttr")}
    VARID  ":Safety"        -> SafetyDzVar            {cons("Safety12Var")}
    VARID  ":Safety{" TagListDz "}"        -> SafetyDzVar            {cons("Safety12VarAttr")}
    VARID  ":Rhs"        -> RhsDzVar            {cons("Rhs12Var")}
    VARID  ":Rhs{" TagListDz "}"        -> RhsDzVar            {cons("Rhs12VarAttr")}
    VARID  ":#Int"        -> DzIntDzVar            {cons("DzInt12Var")}
    VARID  ":#Int{" TagListDz "}"        -> DzIntDzVar            {cons("DzInt12VarAttr")}
    VARID  ":Body"        -> BodyDzVar            {cons("Body12Var")}
    VARID  ":Body{" TagListDz "}"        -> BodyDzVar            {cons("Body12VarAttr")}
    VARID  ":OptIDecls"        -> OptIDdeclsDzVar            {cons("OptIDdecls12Var")}
    VARID  ":OptIDecls{" TagListDz "}"        -> OptIDdeclsDzVar            {cons("OptIDdecls12VarAttr")}
    VARID  ":QConSym"        -> QConSymDzVar            {cons("QConSym12Var")}
    VARID  ":QConSym{" TagListDz "}"        -> QConSymDzVar            {cons("QConSym12VarAttr")}
    VARID  ":Decl"        -> DdeclDzVar            {cons("Ddecl12Var")}
    VARID  ":Decl{" TagListDz "}"        -> DdeclDzVar            {cons("Ddecl12VarAttr")}
    VARID  ":Fixity"        -> FixityDzVar            {cons("Fixity12Var")}
    VARID  ":Fixity{" TagListDz "}"        -> FixityDzVar            {cons("Fixity12VarAttr")}
    VARID  ":FDecl"        -> FDdeclDzVar            {cons("FDdecl12Var")}
    VARID  ":FDecl{" TagListDz "}"        -> FDdeclDzVar            {cons("FDdecl12VarAttr")}
    VARID  ":ModId"        -> ModIdDzVar            {cons("ModId12Var")}
    VARID  ":ModId{" TagListDz "}"        -> ModIdDzVar            {cons("ModId12VarAttr")}
    VARID  ":OptCDecls"        -> OptCDdeclsDzVar            {cons("OptCDdecls12Var")}
    VARID  ":OptCDecls{" TagListDz "}"        -> OptCDdeclsDzVar            {cons("OptCDdecls12VarAttr")}
    VARID  ":Integer"        -> IntegerDzVar            {cons("Integer12Var")}
    VARID  ":Integer{" TagListDz "}"        -> IntegerDzVar            {cons("Integer12VarAttr")}
    VARID  ":QVarId"        -> QVarIdDzVar            {cons("QVarId12Var")}
    VARID  ":QVarId{" TagListDz "}"        -> QVarIdDzVar            {cons("QVarId12VarAttr")}
    VARID  ":QVarSym"        -> QVarSymDzVar            {cons("QVarSym12Var")}
    VARID  ":QVarSym{" TagListDz "}"        -> QVarSymDzVar            {cons("QVarSym12VarAttr")}
    VARID  ":ImpDecls"        -> ImpDdeclsDzVar            {cons("ImpDdecls12Var")}
    VARID  ":ImpDecls{" TagListDz "}"        -> ImpDdeclsDzVar            {cons("ImpDdecls12VarAttr")}
    VARID  ":IOError"        -> IOErrorDzVar            {cons("IOError12Var")}
    VARID  ":IOError{" TagListDz "}"        -> IOErrorDzVar            {cons("IOError12VarAttr")}
    VARID  ":DeclsList"        -> DdeclsListDzVar            {cons("DdeclsList12Var")}
    VARID  ":DeclsList{" TagListDz "}"        -> DdeclsListDzVar            {cons("DdeclsList12VarAttr")}
    VARID  ":ConId"        -> ConIdDzVar            {cons("ConId12Var")}
    VARID  ":ConId{" TagListDz "}"        -> ConIdDzVar            {cons("ConId12VarAttr")}
    VARID  ":QTyCon"        -> QTyConDzVar            {cons("QTyCon12Var")}
    VARID  ":QTyCon{" TagListDz "}"        -> QTyConDzVar            {cons("QTyCon12VarAttr")}
    VARID  ":Exp"        -> ExpDzVar            {cons("Exp12Var")}
    VARID  ":Exp{" TagListDz "}"        -> ExpDzVar            {cons("Exp12VarAttr")}

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "Op"    -> VariableDz    {cons("Op1Cast")}
     K CastTypeDz "Op{" TagListDz "}"    -> VariableDz    {cons("Op1CastAttr")}
     K CastTypeDz "AExp"    -> VariableDz    {cons("AExp1Cast")}
     K CastTypeDz "AExp{" TagListDz "}"    -> VariableDz    {cons("AExp1CastAttr")}
     K CastTypeDz "Import"    -> VariableDz    {cons("Import1Cast")}
     K CastTypeDz "Import{" TagListDz "}"    -> VariableDz    {cons("Import1CastAttr")}
     K CastTypeDz "Decls"    -> VariableDz    {cons("Ddecls1Cast")}
     K CastTypeDz "Decls{" TagListDz "}"    -> VariableDz    {cons("Ddecls1CastAttr")}
     K CastTypeDz "Var"    -> VariableDz    {cons("Var1Cast")}
     K CastTypeDz "Var{" TagListDz "}"    -> VariableDz    {cons("Var1CastAttr")}
     K CastTypeDz "ConOp"    -> VariableDz    {cons("ConOp1Cast")}
     K CastTypeDz "ConOp{" TagListDz "}"    -> VariableDz    {cons("ConOp1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "VarSym"    -> VariableDz    {cons("VarSym1Cast")}
     K CastTypeDz "VarSym{" TagListDz "}"    -> VariableDz    {cons("VarSym1CastAttr")}
     K CastTypeDz "VarList"    -> VariableDz    {cons("VarList1Cast")}
     K CastTypeDz "VarList{" TagListDz "}"    -> VariableDz    {cons("VarList1CastAttr")}
     K CastTypeDz "OptContext"    -> VariableDz    {cons("OptContext1Cast")}
     K CastTypeDz "OptContext{" TagListDz "}"    -> VariableDz    {cons("OptContext1CastAttr")}
     K CastTypeDz "DClassList"    -> VariableDz    {cons("DdClassList1Cast")}
     K CastTypeDz "DClassList{" TagListDz "}"    -> VariableDz    {cons("DdClassList1CastAttr")}
     K CastTypeDz "OptImpSpec"    -> VariableDz    {cons("OptImpSpec1Cast")}
     K CastTypeDz "OptImpSpec{" TagListDz "}"    -> VariableDz    {cons("OptImpSpec1CastAttr")}
     K CastTypeDz "OptComma"    -> VariableDz    {cons("OptComma1Cast")}
     K CastTypeDz "OptComma{" TagListDz "}"    -> VariableDz    {cons("OptComma1CastAttr")}
     K CastTypeDz "ConIdInner"    -> VariableDz    {cons("ConIdInner1Cast")}
     K CastTypeDz "ConIdInner{" TagListDz "}"    -> VariableDz    {cons("ConIdInner1CastAttr")}
     K CastTypeDz "LExp"    -> VariableDz    {cons("LExp1Cast")}
     K CastTypeDz "LExp{" TagListDz "}"    -> VariableDz    {cons("LExp1CastAttr")}
     K CastTypeDz "QOp"    -> VariableDz    {cons("QOp1Cast")}
     K CastTypeDz "QOp{" TagListDz "}"    -> VariableDz    {cons("QOp1CastAttr")}
     K CastTypeDz "TyVarTuple"    -> VariableDz    {cons("TyVarTuple1Cast")}
     K CastTypeDz "TyVarTuple{" TagListDz "}"    -> VariableDz    {cons("TyVarTuple1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "Alts"    -> VariableDz    {cons("Alts1Cast")}
     K CastTypeDz "Alts{" TagListDz "}"    -> VariableDz    {cons("Alts1CastAttr")}
     K CastTypeDz "TopDecls"    -> VariableDz    {cons("TopDdecls1Cast")}
     K CastTypeDz "TopDecls{" TagListDz "}"    -> VariableDz    {cons("TopDdecls1CastAttr")}
     K CastTypeDz "OptBangAType"    -> VariableDz    {cons("OptBangAType1Cast")}
     K CastTypeDz "OptBangAType{" TagListDz "}"    -> VariableDz    {cons("OptBangAType1CastAttr")}
     K CastTypeDz "ExpList"    -> VariableDz    {cons("ExpList1Cast")}
     K CastTypeDz "ExpList{" TagListDz "}"    -> VariableDz    {cons("ExpList1CastAttr")}
     K CastTypeDz "Classes"    -> VariableDz    {cons("Classes1Cast")}
     K CastTypeDz "Classes{" TagListDz "}"    -> VariableDz    {cons("Classes1CastAttr")}
     K CastTypeDz "OptDecls"    -> VariableDz    {cons("OptDdecls1Cast")}
     K CastTypeDz "OptDecls{" TagListDz "}"    -> VariableDz    {cons("OptDdecls1CastAttr")}
     K CastTypeDz "Constrs"    -> VariableDz    {cons("Constrs1Cast")}
     K CastTypeDz "Constrs{" TagListDz "}"    -> VariableDz    {cons("Constrs1CastAttr")}
     K CastTypeDz "Constr"    -> VariableDz    {cons("Constr1Cast")}
     K CastTypeDz "Constr{" TagListDz "}"    -> VariableDz    {cons("Constr1CastAttr")}
     K CastTypeDz "SContext"    -> VariableDz    {cons("SContext1Cast")}
     K CastTypeDz "SContext{" TagListDz "}"    -> VariableDz    {cons("SContext1CastAttr")}
     K CastTypeDz "Exports"    -> VariableDz    {cons("Exports1Cast")}
     K CastTypeDz "Exports{" TagListDz "}"    -> VariableDz    {cons("Exports1CastAttr")}
     K CastTypeDz "QConOp"    -> VariableDz    {cons("QConOp1Cast")}
     K CastTypeDz "QConOp{" TagListDz "}"    -> VariableDz    {cons("QConOp1CastAttr")}
     K CastTypeDz "OptBangATypes"    -> VariableDz    {cons("OptBangATypes1Cast")}
     K CastTypeDz "OptBangATypes{" TagListDz "}"    -> VariableDz    {cons("OptBangATypes1CastAttr")}
     K CastTypeDz "FieldDeclList"    -> VariableDz    {cons("FieldDdeclList1Cast")}
     K CastTypeDz "FieldDeclList{" TagListDz "}"    -> VariableDz    {cons("FieldDdeclList1CastAttr")}
     K CastTypeDz "QVar"    -> VariableDz    {cons("QVar1Cast")}
     K CastTypeDz "QVar{" TagListDz "}"    -> VariableDz    {cons("QVar1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "OptDeriving"    -> VariableDz    {cons("OptDderiving1Cast")}
     K CastTypeDz "OptDeriving{" TagListDz "}"    -> VariableDz    {cons("OptDderiving1CastAttr")}
     K CastTypeDz "Fexp"    -> VariableDz    {cons("Fexp1Cast")}
     K CastTypeDz "Fexp{" TagListDz "}"    -> VariableDz    {cons("Fexp1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "Module"    -> VariableDz    {cons("Module1Cast")}
     K CastTypeDz "Module{" TagListDz "}"    -> VariableDz    {cons("Module1CastAttr")}
     K CastTypeDz "IDeclsList"    -> VariableDz    {cons("IDdeclsList1Cast")}
     K CastTypeDz "IDeclsList{" TagListDz "}"    -> VariableDz    {cons("IDdeclsList1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "OptExpComma"    -> VariableDz    {cons("OptExpComma1Cast")}
     K CastTypeDz "OptExpComma{" TagListDz "}"    -> VariableDz    {cons("OptExpComma1CastAttr")}
     K CastTypeDz "PatList"    -> VariableDz    {cons("PatList1Cast")}
     K CastTypeDz "PatList{" TagListDz "}"    -> VariableDz    {cons("PatList1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     K CastTypeDz "TopDecl"    -> VariableDz    {cons("TopDdecl1Cast")}
     K CastTypeDz "TopDecl{" TagListDz "}"    -> VariableDz    {cons("TopDdecl1CastAttr")}
     K CastTypeDz "IDecls"    -> VariableDz    {cons("IDdecls1Cast")}
     K CastTypeDz "IDecls{" TagListDz "}"    -> VariableDz    {cons("IDdecls1CastAttr")}
     K CastTypeDz "TypeTuple"    -> VariableDz    {cons("TypeTuple1Cast")}
     K CastTypeDz "TypeTuple{" TagListDz "}"    -> VariableDz    {cons("TypeTuple1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "OptConstrs"    -> VariableDz    {cons("OptConstrs1Cast")}
     K CastTypeDz "OptConstrs{" TagListDz "}"    -> VariableDz    {cons("OptConstrs1CastAttr")}
     K CastTypeDz "Expent"    -> VariableDz    {cons("Expent1Cast")}
     K CastTypeDz "Expent{" TagListDz "}"    -> VariableDz    {cons("Expent1CastAttr")}
     K CastTypeDz "Stmts"    -> VariableDz    {cons("Stmts1Cast")}
     K CastTypeDz "Stmts{" TagListDz "}"    -> VariableDz    {cons("Stmts1CastAttr")}
     K CastTypeDz "Inst"    -> VariableDz    {cons("Inst1Cast")}
     K CastTypeDz "Inst{" TagListDz "}"    -> VariableDz    {cons("Inst1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "FaType"    -> VariableDz    {cons("FaType1Cast")}
     K CastTypeDz "FaType{" TagListDz "}"    -> VariableDz    {cons("FaType1CastAttr")}
     K CastTypeDz "Guards"    -> VariableDz    {cons("Guards1Cast")}
     K CastTypeDz "Guards{" TagListDz "}"    -> VariableDz    {cons("Guards1CastAttr")}
     K CastTypeDz "GTyCon"    -> VariableDz    {cons("GTyCon1Cast")}
     K CastTypeDz "GTyCon{" TagListDz "}"    -> VariableDz    {cons("GTyCon1CastAttr")}
     K CastTypeDz "TyCon"    -> VariableDz    {cons("TyCon1Cast")}
     K CastTypeDz "TyCon{" TagListDz "}"    -> VariableDz    {cons("TyCon1CastAttr")}
     K CastTypeDz "APatList"    -> VariableDz    {cons("APatList1Cast")}
     K CastTypeDz "APatList{" TagListDz "}"    -> VariableDz    {cons("APatList1CastAttr")}
     K CastTypeDz "CDeclsList"    -> VariableDz    {cons("CDdeclsList1Cast")}
     K CastTypeDz "CDeclsList{" TagListDz "}"    -> VariableDz    {cons("CDdeclsList1CastAttr")}
     K CastTypeDz "SubConstr"    -> VariableDz    {cons("SubConstr1Cast")}
     K CastTypeDz "SubConstr{" TagListDz "}"    -> VariableDz    {cons("SubConstr1CastAttr")}
     K CastTypeDz "SimpleType"    -> VariableDz    {cons("SimpleType1Cast")}
     K CastTypeDz "SimpleType{" TagListDz "}"    -> VariableDz    {cons("SimpleType1CastAttr")}
     K CastTypeDz "QVarList"    -> VariableDz    {cons("QVarList1Cast")}
     K CastTypeDz "QVarList{" TagListDz "}"    -> VariableDz    {cons("QVarList1CastAttr")}
     K CastTypeDz "QCon"    -> VariableDz    {cons("QCon1Cast")}
     K CastTypeDz "QCon{" TagListDz "}"    -> VariableDz    {cons("QCon1CastAttr")}
     K CastTypeDz "NewConstr"    -> VariableDz    {cons("NewConstr1Cast")}
     K CastTypeDz "NewConstr{" TagListDz "}"    -> VariableDz    {cons("NewConstr1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "BType"    -> VariableDz    {cons("BType1Cast")}
     K CastTypeDz "BType{" TagListDz "}"    -> VariableDz    {cons("BType1CastAttr")}
     K CastTypeDz "OptSemicolon"    -> VariableDz    {cons("OptSemicolon1Cast")}
     K CastTypeDz "OptSemicolon{" TagListDz "}"    -> VariableDz    {cons("OptSemicolon1CastAttr")}
     K CastTypeDz "CNameList"    -> VariableDz    {cons("CNameList1Cast")}
     K CastTypeDz "CNameList{" TagListDz "}"    -> VariableDz    {cons("CNameList1CastAttr")}
     K CastTypeDz "TyVars"    -> VariableDz    {cons("TyVars1Cast")}
     K CastTypeDz "TyVars{" TagListDz "}"    -> VariableDz    {cons("TyVars1CastAttr")}
     K CastTypeDz "Export"    -> VariableDz    {cons("Export1Cast")}
     K CastTypeDz "Export{" TagListDz "}"    -> VariableDz    {cons("Export1CastAttr")}
     K CastTypeDz "ExpTuple"    -> VariableDz    {cons("ExpTuple1Cast")}
     K CastTypeDz "ExpTuple{" TagListDz "}"    -> VariableDz    {cons("ExpTuple1CastAttr")}
     K CastTypeDz "OptQVarList"    -> VariableDz    {cons("OptQVarList1Cast")}
     K CastTypeDz "OptQVarList{" TagListDz "}"    -> VariableDz    {cons("OptQVarList1CastAttr")}
     K CastTypeDz "CallConv"    -> VariableDz    {cons("CallConv1Cast")}
     K CastTypeDz "CallConv{" TagListDz "}"    -> VariableDz    {cons("CallConv1CastAttr")}
     K CastTypeDz "FPat"    -> VariableDz    {cons("FPat1Cast")}
     K CastTypeDz "FPat{" TagListDz "}"    -> VariableDz    {cons("FPat1CastAttr")}
     K CastTypeDz "CDecl"    -> VariableDz    {cons("CDdecl1Cast")}
     K CastTypeDz "CDecl{" TagListDz "}"    -> VariableDz    {cons("CDdecl1CastAttr")}
     K CastTypeDz "OptAsModId"    -> VariableDz    {cons("OptAsModId1Cast")}
     K CastTypeDz "OptAsModId{" TagListDz "}"    -> VariableDz    {cons("OptAsModId1CastAttr")}
     K CastTypeDz "Context"    -> VariableDz    {cons("Context1Cast")}
     K CastTypeDz "Context{" TagListDz "}"    -> VariableDz    {cons("Context1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "Con"    -> VariableDz    {cons("Con1Cast")}
     K CastTypeDz "Con{" TagListDz "}"    -> VariableDz    {cons("Con1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "Vars"    -> VariableDz    {cons("Vars1Cast")}
     K CastTypeDz "Vars{" TagListDz "}"    -> VariableDz    {cons("Vars1CastAttr")}
     K CastTypeDz "OptCNameList"    -> VariableDz    {cons("OptCNameList1Cast")}
     K CastTypeDz "OptCNameList{" TagListDz "}"    -> VariableDz    {cons("OptCNameList1CastAttr")}
     K CastTypeDz "PatTuple"    -> VariableDz    {cons("PatTuple1Cast")}
     K CastTypeDz "PatTuple{" TagListDz "}"    -> VariableDz    {cons("PatTuple1CastAttr")}
     K CastTypeDz "SimpleClassList"    -> VariableDz    {cons("SimpleClassList1Cast")}
     K CastTypeDz "SimpleClassList{" TagListDz "}"    -> VariableDz    {cons("SimpleClassList1CastAttr")}
     K CastTypeDz "Deriving"    -> VariableDz    {cons("Dderiving1Cast")}
     K CastTypeDz "Deriving{" TagListDz "}"    -> VariableDz    {cons("Dderiving1CastAttr")}
     K CastTypeDz "VarId"    -> VariableDz    {cons("VarId1Cast")}
     K CastTypeDz "VarId{" TagListDz "}"    -> VariableDz    {cons("VarId1CastAttr")}
     K CastTypeDz "QConId"    -> VariableDz    {cons("QConId1Cast")}
     K CastTypeDz "QConId{" TagListDz "}"    -> VariableDz    {cons("QConId1CastAttr")}
     K CastTypeDz "FieldDecl"    -> VariableDz    {cons("FieldDdecl1Cast")}
     K CastTypeDz "FieldDecl{" TagListDz "}"    -> VariableDz    {cons("FieldDdecl1CastAttr")}
     K CastTypeDz "Type"    -> VariableDz    {cons("Type1Cast")}
     K CastTypeDz "Type{" TagListDz "}"    -> VariableDz    {cons("Type1CastAttr")}
     K CastTypeDz "GConSym"    -> VariableDz    {cons("GConSym1Cast")}
     K CastTypeDz "GConSym{" TagListDz "}"    -> VariableDz    {cons("GConSym1CastAttr")}
     K CastTypeDz "ImportList"    -> VariableDz    {cons("ImportList1Cast")}
     K CastTypeDz "ImportList{" TagListDz "}"    -> VariableDz    {cons("ImportList1CastAttr")}
     K CastTypeDz "DClass"    -> VariableDz    {cons("DdClass1Cast")}
     K CastTypeDz "DClass{" TagListDz "}"    -> VariableDz    {cons("DdClass1CastAttr")}
     K CastTypeDz "Impent"    -> VariableDz    {cons("Impent1Cast")}
     K CastTypeDz "Impent{" TagListDz "}"    -> VariableDz    {cons("Impent1CastAttr")}
     K CastTypeDz "ATypes"    -> VariableDz    {cons("ATypes1Cast")}
     K CastTypeDz "ATypes{" TagListDz "}"    -> VariableDz    {cons("ATypes1CastAttr")}
     K CastTypeDz "InfixExp"    -> VariableDz    {cons("InfixExp1Cast")}
     K CastTypeDz "InfixExp{" TagListDz "}"    -> VariableDz    {cons("InfixExp1CastAttr")}
     K CastTypeDz "StmtList"    -> VariableDz    {cons("StmtList1Cast")}
     K CastTypeDz "StmtList{" TagListDz "}"    -> VariableDz    {cons("StmtList1CastAttr")}
     K CastTypeDz "OptQualified"    -> VariableDz    {cons("OptQualified1Cast")}
     K CastTypeDz "OptQualified{" TagListDz "}"    -> VariableDz    {cons("OptQualified1CastAttr")}
     K CastTypeDz "ImpSpec"    -> VariableDz    {cons("ImpSpec1Cast")}
     K CastTypeDz "ImpSpec{" TagListDz "}"    -> VariableDz    {cons("ImpSpec1CastAttr")}
     K CastTypeDz "Types"    -> VariableDz    {cons("Types1Cast")}
     K CastTypeDz "Types{" TagListDz "}"    -> VariableDz    {cons("Types1CastAttr")}
     K CastTypeDz "Pat"    -> VariableDz    {cons("Pat1Cast")}
     K CastTypeDz "Pat{" TagListDz "}"    -> VariableDz    {cons("Pat1CastAttr")}
     K CastTypeDz "QTyCls"    -> VariableDz    {cons("QTyCls1Cast")}
     K CastTypeDz "QTyCls{" TagListDz "}"    -> VariableDz    {cons("QTyCls1CastAttr")}
     K CastTypeDz "ImpDecl"    -> VariableDz    {cons("ImpDdecl1Cast")}
     K CastTypeDz "ImpDecl{" TagListDz "}"    -> VariableDz    {cons("ImpDdecl1CastAttr")}
     K CastTypeDz "Alt"    -> VariableDz    {cons("Alt1Cast")}
     K CastTypeDz "Alt{" TagListDz "}"    -> VariableDz    {cons("Alt1CastAttr")}
     K CastTypeDz "GuardList"    -> VariableDz    {cons("GuardList1Cast")}
     K CastTypeDz "GuardList{" TagListDz "}"    -> VariableDz    {cons("GuardList1CastAttr")}
     K CastTypeDz "SimpleClass"    -> VariableDz    {cons("SimpleClass1Cast")}
     K CastTypeDz "SimpleClass{" TagListDz "}"    -> VariableDz    {cons("SimpleClass1CastAttr")}
     K CastTypeDz "FunLhs"    -> VariableDz    {cons("FunLhs1Cast")}
     K CastTypeDz "FunLhs{" TagListDz "}"    -> VariableDz    {cons("FunLhs1CastAttr")}
     K CastTypeDz "TyCls"    -> VariableDz    {cons("TyCls1Cast")}
     K CastTypeDz "TyCls{" TagListDz "}"    -> VariableDz    {cons("TyCls1CastAttr")}
     K CastTypeDz "Ops"    -> VariableDz    {cons("Ops1Cast")}
     K CastTypeDz "Ops{" TagListDz "}"    -> VariableDz    {cons("Ops1CastAttr")}
     K CastTypeDz "LPat"    -> VariableDz    {cons("LPat1Cast")}
     K CastTypeDz "LPat{" TagListDz "}"    -> VariableDz    {cons("LPat1CastAttr")}
     K CastTypeDz "FPats"    -> VariableDz    {cons("FPats1Cast")}
     K CastTypeDz "FPats{" TagListDz "}"    -> VariableDz    {cons("FPats1CastAttr")}
     K CastTypeDz "Literal"    -> VariableDz    {cons("Literal1Cast")}
     K CastTypeDz "Literal{" TagListDz "}"    -> VariableDz    {cons("Literal1CastAttr")}
     K CastTypeDz "VarIdInner"    -> VariableDz    {cons("VarIdInner1Cast")}
     K CastTypeDz "VarIdInner{" TagListDz "}"    -> VariableDz    {cons("VarIdInner1CastAttr")}
     K CastTypeDz "GenDecl"    -> VariableDz    {cons("GenDdecl1Cast")}
     K CastTypeDz "GenDecl{" TagListDz "}"    -> VariableDz    {cons("GenDdecl1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "TyVar"    -> VariableDz    {cons("TyVar1Cast")}
     K CastTypeDz "TyVar{" TagListDz "}"    -> VariableDz    {cons("TyVar1CastAttr")}
     K CastTypeDz "Guard"    -> VariableDz    {cons("Guard1Cast")}
     K CastTypeDz "Guard{" TagListDz "}"    -> VariableDz    {cons("Guard1CastAttr")}
     K CastTypeDz "GCon"    -> VariableDz    {cons("GCon1Cast")}
     K CastTypeDz "GCon{" TagListDz "}"    -> VariableDz    {cons("GCon1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "AType"    -> VariableDz    {cons("AType1Cast")}
     K CastTypeDz "AType{" TagListDz "}"    -> VariableDz    {cons("AType1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "ConSym"    -> VariableDz    {cons("ConSym1Cast")}
     K CastTypeDz "ConSym{" TagListDz "}"    -> VariableDz    {cons("ConSym1CastAttr")}
     K CastTypeDz "VarOp"    -> VariableDz    {cons("VarOp1Cast")}
     K CastTypeDz "VarOp{" TagListDz "}"    -> VariableDz    {cons("VarOp1CastAttr")}
     K CastTypeDz "FType"    -> VariableDz    {cons("FType1Cast")}
     K CastTypeDz "FType{" TagListDz "}"    -> VariableDz    {cons("FType1CastAttr")}
     K CastTypeDz "OptExp"    -> VariableDz    {cons("OptExp1Cast")}
     K CastTypeDz "OptExp{" TagListDz "}"    -> VariableDz    {cons("OptExp1CastAttr")}
     K CastTypeDz "FrType"    -> VariableDz    {cons("FrType1Cast")}
     K CastTypeDz "FrType{" TagListDz "}"    -> VariableDz    {cons("FrType1CastAttr")}
     K CastTypeDz "APats"    -> VariableDz    {cons("APats1Cast")}
     K CastTypeDz "APats{" TagListDz "}"    -> VariableDz    {cons("APats1CastAttr")}
     K CastTypeDz "QVarOp"    -> VariableDz    {cons("QVarOp1Cast")}
     K CastTypeDz "QVarOp{" TagListDz "}"    -> VariableDz    {cons("QVarOp1CastAttr")}
     K CastTypeDz "IDecl"    -> VariableDz    {cons("IDdecl1Cast")}
     K CastTypeDz "IDecl{" TagListDz "}"    -> VariableDz    {cons("IDdecl1CastAttr")}
     K CastTypeDz "OptVarList"    -> VariableDz    {cons("OptVarList1Cast")}
     K CastTypeDz "OptVarList{" TagListDz "}"    -> VariableDz    {cons("OptVarList1CastAttr")}
     K CastTypeDz "Class"    -> VariableDz    {cons("Class1Cast")}
     K CastTypeDz "Class{" TagListDz "}"    -> VariableDz    {cons("Class1CastAttr")}
     K CastTypeDz "CName"    -> VariableDz    {cons("CName1Cast")}
     K CastTypeDz "CName{" TagListDz "}"    -> VariableDz    {cons("CName1CastAttr")}
     K CastTypeDz "APat"    -> VariableDz    {cons("APat1Cast")}
     K CastTypeDz "APat{" TagListDz "}"    -> VariableDz    {cons("APat1CastAttr")}
     K CastTypeDz "ATypeList"    -> VariableDz    {cons("ATypeList1Cast")}
     K CastTypeDz "ATypeList{" TagListDz "}"    -> VariableDz    {cons("ATypeList1CastAttr")}
     K CastTypeDz "CDecls"    -> VariableDz    {cons("CDdecls1Cast")}
     K CastTypeDz "CDecls{" TagListDz "}"    -> VariableDz    {cons("CDdecls1CastAttr")}
     K CastTypeDz "OptBang"    -> VariableDz    {cons("OptBang1Cast")}
     K CastTypeDz "OptBang{" TagListDz "}"    -> VariableDz    {cons("OptBang1CastAttr")}
     K CastTypeDz "OptSContext"    -> VariableDz    {cons("OptSContext1Cast")}
     K CastTypeDz "OptSContext{" TagListDz "}"    -> VariableDz    {cons("OptSContext1CastAttr")}
     K CastTypeDz "CusFloat"    -> VariableDz    {cons("CusFloat1Cast")}
     K CastTypeDz "CusFloat{" TagListDz "}"    -> VariableDz    {cons("CusFloat1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "Stmt"    -> VariableDz    {cons("Stmt1Cast")}
     K CastTypeDz "Stmt{" TagListDz "}"    -> VariableDz    {cons("Stmt1CastAttr")}
     K CastTypeDz "LiteralInner"    -> VariableDz    {cons("LiteralInner1Cast")}
     K CastTypeDz "LiteralInner{" TagListDz "}"    -> VariableDz    {cons("LiteralInner1CastAttr")}
     K CastTypeDz "AAPat"    -> VariableDz    {cons("AAPat1Cast")}
     K CastTypeDz "AAPat{" TagListDz "}"    -> VariableDz    {cons("AAPat1CastAttr")}
     K CastTypeDz "ExportList"    -> VariableDz    {cons("ExportList1Cast")}
     K CastTypeDz "ExportList{" TagListDz "}"    -> VariableDz    {cons("ExportList1CastAttr")}
     K CastTypeDz "GdRhs"    -> VariableDz    {cons("GdRhs1Cast")}
     K CastTypeDz "GdRhs{" TagListDz "}"    -> VariableDz    {cons("GdRhs1CastAttr")}
     K CastTypeDz "Safety"    -> VariableDz    {cons("Safety1Cast")}
     K CastTypeDz "Safety{" TagListDz "}"    -> VariableDz    {cons("Safety1CastAttr")}
     K CastTypeDz "Rhs"    -> VariableDz    {cons("Rhs1Cast")}
     K CastTypeDz "Rhs{" TagListDz "}"    -> VariableDz    {cons("Rhs1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "Body"    -> VariableDz    {cons("Body1Cast")}
     K CastTypeDz "Body{" TagListDz "}"    -> VariableDz    {cons("Body1CastAttr")}
     K CastTypeDz "OptIDecls"    -> VariableDz    {cons("OptIDdecls1Cast")}
     K CastTypeDz "OptIDecls{" TagListDz "}"    -> VariableDz    {cons("OptIDdecls1CastAttr")}
     K CastTypeDz "QConSym"    -> VariableDz    {cons("QConSym1Cast")}
     K CastTypeDz "QConSym{" TagListDz "}"    -> VariableDz    {cons("QConSym1CastAttr")}
     K CastTypeDz "Decl"    -> VariableDz    {cons("Ddecl1Cast")}
     K CastTypeDz "Decl{" TagListDz "}"    -> VariableDz    {cons("Ddecl1CastAttr")}
     K CastTypeDz "Fixity"    -> VariableDz    {cons("Fixity1Cast")}
     K CastTypeDz "Fixity{" TagListDz "}"    -> VariableDz    {cons("Fixity1CastAttr")}
     K CastTypeDz "FDecl"    -> VariableDz    {cons("FDdecl1Cast")}
     K CastTypeDz "FDecl{" TagListDz "}"    -> VariableDz    {cons("FDdecl1CastAttr")}
     K CastTypeDz "ModId"    -> VariableDz    {cons("ModId1Cast")}
     K CastTypeDz "ModId{" TagListDz "}"    -> VariableDz    {cons("ModId1CastAttr")}
     K CastTypeDz "OptCDecls"    -> VariableDz    {cons("OptCDdecls1Cast")}
     K CastTypeDz "OptCDecls{" TagListDz "}"    -> VariableDz    {cons("OptCDdecls1CastAttr")}
     K CastTypeDz "Integer"    -> VariableDz    {cons("Integer1Cast")}
     K CastTypeDz "Integer{" TagListDz "}"    -> VariableDz    {cons("Integer1CastAttr")}
     K CastTypeDz "QVarId"    -> VariableDz    {cons("QVarId1Cast")}
     K CastTypeDz "QVarId{" TagListDz "}"    -> VariableDz    {cons("QVarId1CastAttr")}
     K CastTypeDz "QVarSym"    -> VariableDz    {cons("QVarSym1Cast")}
     K CastTypeDz "QVarSym{" TagListDz "}"    -> VariableDz    {cons("QVarSym1CastAttr")}
     K CastTypeDz "ImpDecls"    -> VariableDz    {cons("ImpDdecls1Cast")}
     K CastTypeDz "ImpDecls{" TagListDz "}"    -> VariableDz    {cons("ImpDdecls1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "DeclsList"    -> VariableDz    {cons("DdeclsList1Cast")}
     K CastTypeDz "DeclsList{" TagListDz "}"    -> VariableDz    {cons("DdeclsList1CastAttr")}
     K CastTypeDz "ConId"    -> VariableDz    {cons("ConId1Cast")}
     K CastTypeDz "ConId{" TagListDz "}"    -> VariableDz    {cons("ConId1CastAttr")}
     K CastTypeDz "QTyCon"    -> VariableDz    {cons("QTyCon1Cast")}
     K CastTypeDz "QTyCon{" TagListDz "}"    -> VariableDz    {cons("QTyCon1CastAttr")}
     K CastTypeDz "Exp"    -> VariableDz    {cons("Exp1Cast")}
     K CastTypeDz "Exp{" TagListDz "}"    -> VariableDz    {cons("Exp1CastAttr")}
     NatDzVar   -> Nat
     OpDzVar   -> Op
     AExpDzVar   -> AExp
     ImportDzVar   -> Import
     DdeclsDzVar   -> Ddecls
     VarDzVar   -> Var
     ConOpDzVar   -> ConOp
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     StringDzVar   -> String
     VarSymDzVar   -> VarSym
     VarListDzVar   -> VarList
     OptContextDzVar   -> OptContext
     DdClassListDzVar   -> DdClassList
     OptImpSpecDzVar   -> OptImpSpec
     OptCommaDzVar   -> OptComma
     ConIdInnerDzVar   -> ConIdInner
     LExpDzVar   -> LExp
     QOpDzVar   -> QOp
     TyVarTupleDzVar   -> TyVarTuple
     BoolDzVar   -> Bool
     AltsDzVar   -> Alts
     TopDdeclsDzVar   -> TopDdecls
     OptBangATypeDzVar   -> OptBangAType
     ExpListDzVar   -> ExpList
     ClassesDzVar   -> Classes
     OptDdeclsDzVar   -> OptDdecls
     ConstrsDzVar   -> Constrs
     ConstrDzVar   -> Constr
     SContextDzVar   -> SContext
     ExportsDzVar   -> Exports
     QConOpDzVar   -> QConOp
     OptBangATypesDzVar   -> OptBangATypes
     FieldDdeclListDzVar   -> FieldDdeclList
     QVarDzVar   -> QVar
     FloatDzVar   -> Float
     OptDderivingDzVar   -> OptDderiving
     FexpDzVar   -> Fexp
     IdDzVar   -> Id
     ModuleDzVar   -> Module
     IDdeclsListDzVar   -> IDdeclsList
     MapDzVar   -> Map
     OptExpCommaDzVar   -> OptExpComma
     PatListDzVar   -> PatList
     DzFloatDzVar   -> DzFloat
     TopDdeclDzVar   -> TopDdecl
     IDdeclsDzVar   -> IDdecls
     TypeTupleDzVar   -> TypeTuple
     SetDzVar   -> Set
     OptConstrsDzVar   -> OptConstrs
     ExpentDzVar   -> Expent
     StmtsDzVar   -> Stmts
     InstDzVar   -> Inst
     MIntDzVar   -> MInt
     FaTypeDzVar   -> FaType
     GuardsDzVar   -> Guards
     GTyConDzVar   -> GTyCon
     TyConDzVar   -> TyCon
     APatListDzVar   -> APatList
     CDdeclsListDzVar   -> CDdeclsList
     SubConstrDzVar   -> SubConstr
     SimpleTypeDzVar   -> SimpleType
     QVarListDzVar   -> QVarList
     QConDzVar   -> QCon
     NewConstrDzVar   -> NewConstr
     CharDzVar   -> Char
     BTypeDzVar   -> BType
     OptSemicolonDzVar   -> OptSemicolon
     CNameListDzVar   -> CNameList
     TyVarsDzVar   -> TyVars
     ExportDzVar   -> Export
     ExpTupleDzVar   -> ExpTuple
     OptQVarListDzVar   -> OptQVarList
     CallConvDzVar   -> CallConv
     FPatDzVar   -> FPat
     CDdeclDzVar   -> CDdecl
     OptAsModIdDzVar   -> OptAsModId
     ContextDzVar   -> Context
     PascalCaseIdDzVar   -> PascalCaseId
     ConDzVar   -> Con
     UpperCaseDzVar   -> UpperCase
     VarsDzVar   -> Vars
     OptCNameListDzVar   -> OptCNameList
     PatTupleDzVar   -> PatTuple
     SimpleClassListDzVar   -> SimpleClassList
     DderivingDzVar   -> Dderiving
     VarIdDzVar   -> VarId
     QConIdDzVar   -> QConId
     FieldDdeclDzVar   -> FieldDdecl
     TypeDzVar   -> Type
     GConSymDzVar   -> GConSym
     ImportListDzVar   -> ImportList
     DdClassDzVar   -> DdClass
     ImpentDzVar   -> Impent
     ATypesDzVar   -> ATypes
     InfixExpDzVar   -> InfixExp
     StmtListDzVar   -> StmtList
     OptQualifiedDzVar   -> OptQualified
     ImpSpecDzVar   -> ImpSpec
     TypesDzVar   -> Types
     PatDzVar   -> Pat
     QTyClsDzVar   -> QTyCls
     ImpDdeclDzVar   -> ImpDdecl
     AltDzVar   -> Alt
     GuardListDzVar   -> GuardList
     SimpleClassDzVar   -> SimpleClass
     FunLhsDzVar   -> FunLhs
     TyClsDzVar   -> TyCls
     OpsDzVar   -> Ops
     LPatDzVar   -> LPat
     FPatsDzVar   -> FPats
     LiteralDzVar   -> Literal
     VarIdInnerDzVar   -> VarIdInner
     GenDdeclDzVar   -> GenDdecl
     ListDzVar   -> List
     StreamDzVar   -> Stream
     TyVarDzVar   -> TyVar
     GuardDzVar   -> Guard
     GConDzVar   -> GCon
     DzStringDzVar   -> DzString
     ATypeDzVar   -> AType
     DzBoolDzVar   -> DzBool
     ConSymDzVar   -> ConSym
     VarOpDzVar   -> VarOp
     FTypeDzVar   -> FType
     OptExpDzVar   -> OptExp
     FrTypeDzVar   -> FrType
     APatsDzVar   -> APats
     QVarOpDzVar   -> QVarOp
     IDdeclDzVar   -> IDdecl
     OptVarListDzVar   -> OptVarList
     ClassDzVar   -> Class
     CNameDzVar   -> CName
     APatDzVar   -> APat
     ATypeListDzVar   -> ATypeList
     CDdeclsDzVar   -> CDdecls
     OptBangDzVar   -> OptBang
     OptSContextDzVar   -> OptSContext
     CusFloatDzVar   -> CusFloat
     IntDzVar   -> Int
     StmtDzVar   -> Stmt
     LiteralInnerDzVar   -> LiteralInner
     AAPatDzVar   -> AAPat
     ExportListDzVar   -> ExportList
     GdRhsDzVar   -> GdRhs
     SafetyDzVar   -> Safety
     RhsDzVar   -> Rhs
     DzIntDzVar   -> DzInt
     BodyDzVar   -> Body
     OptIDdeclsDzVar   -> OptIDdecls
     QConSymDzVar   -> QConSym
     DdeclDzVar   -> Ddecl
     FixityDzVar   -> Fixity
     FDdeclDzVar   -> FDdecl
     ModIdDzVar   -> ModId
     OptCDdeclsDzVar   -> OptCDdecls
     IntegerDzVar   -> Integer
     QVarIdDzVar   -> QVarId
     QVarSymDzVar   -> QVarSym
     ImpDdeclsDzVar   -> ImpDdecls
     IOErrorDzVar   -> IOError
     DdeclsListDzVar   -> DdeclsList
     ConIdDzVar   -> ConId
     QTyConDzVar   -> QTyCon
     ExpDzVar   -> Exp
     K CastTypeDz "K"                         -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"                     -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


context-free restrictions
    NatDzVar -/- [a-zA-Z0-9]
    OpDzVar -/- [a-zA-Z0-9]
    AExpDzVar -/- [a-zA-Z0-9]
    ImportDzVar -/- [a-zA-Z0-9]
    DdeclsDzVar -/- [a-zA-Z0-9]
    VarDzVar -/- [a-zA-Z0-9]
    ConOpDzVar -/- [a-zA-Z0-9]
    LowerCaseDzVar -/- [a-zA-Z0-9]
    CamelCaseIdDzVar -/- [a-zA-Z0-9]
    StringDzVar -/- [a-zA-Z0-9]
    VarSymDzVar -/- [a-zA-Z0-9]
    VarListDzVar -/- [a-zA-Z0-9]
    OptContextDzVar -/- [a-zA-Z0-9]
    DdClassListDzVar -/- [a-zA-Z0-9]
    OptImpSpecDzVar -/- [a-zA-Z0-9]
    OptCommaDzVar -/- [a-zA-Z0-9]
    ConIdInnerDzVar -/- [a-zA-Z0-9]
    LExpDzVar -/- [a-zA-Z0-9]
    QOpDzVar -/- [a-zA-Z0-9]
    TyVarTupleDzVar -/- [a-zA-Z0-9]
    BoolDzVar -/- [a-zA-Z0-9]
    AltsDzVar -/- [a-zA-Z0-9]
    TopDdeclsDzVar -/- [a-zA-Z0-9]
    OptBangATypeDzVar -/- [a-zA-Z0-9]
    ExpListDzVar -/- [a-zA-Z0-9]
    ClassesDzVar -/- [a-zA-Z0-9]
    OptDdeclsDzVar -/- [a-zA-Z0-9]
    ConstrsDzVar -/- [a-zA-Z0-9]
    ConstrDzVar -/- [a-zA-Z0-9]
    SContextDzVar -/- [a-zA-Z0-9]
    ExportsDzVar -/- [a-zA-Z0-9]
    QConOpDzVar -/- [a-zA-Z0-9]
    OptBangATypesDzVar -/- [a-zA-Z0-9]
    FieldDdeclListDzVar -/- [a-zA-Z0-9]
    QVarDzVar -/- [a-zA-Z0-9]
    FloatDzVar -/- [a-zA-Z0-9]
    OptDderivingDzVar -/- [a-zA-Z0-9]
    FexpDzVar -/- [a-zA-Z0-9]
    IdDzVar -/- [a-zA-Z0-9]
    ModuleDzVar -/- [a-zA-Z0-9]
    IDdeclsListDzVar -/- [a-zA-Z0-9]
    MapDzVar -/- [a-zA-Z0-9]
    OptExpCommaDzVar -/- [a-zA-Z0-9]
    PatListDzVar -/- [a-zA-Z0-9]
    DzFloatDzVar -/- [a-zA-Z0-9]
    TopDdeclDzVar -/- [a-zA-Z0-9]
    IDdeclsDzVar -/- [a-zA-Z0-9]
    TypeTupleDzVar -/- [a-zA-Z0-9]
    SetDzVar -/- [a-zA-Z0-9]
    OptConstrsDzVar -/- [a-zA-Z0-9]
    ExpentDzVar -/- [a-zA-Z0-9]
    StmtsDzVar -/- [a-zA-Z0-9]
    InstDzVar -/- [a-zA-Z0-9]
    MIntDzVar -/- [a-zA-Z0-9]
    FaTypeDzVar -/- [a-zA-Z0-9]
    GuardsDzVar -/- [a-zA-Z0-9]
    GTyConDzVar -/- [a-zA-Z0-9]
    TyConDzVar -/- [a-zA-Z0-9]
    APatListDzVar -/- [a-zA-Z0-9]
    CDdeclsListDzVar -/- [a-zA-Z0-9]
    SubConstrDzVar -/- [a-zA-Z0-9]
    SimpleTypeDzVar -/- [a-zA-Z0-9]
    QVarListDzVar -/- [a-zA-Z0-9]
    QConDzVar -/- [a-zA-Z0-9]
    NewConstrDzVar -/- [a-zA-Z0-9]
    CharDzVar -/- [a-zA-Z0-9]
    BTypeDzVar -/- [a-zA-Z0-9]
    OptSemicolonDzVar -/- [a-zA-Z0-9]
    CNameListDzVar -/- [a-zA-Z0-9]
    TyVarsDzVar -/- [a-zA-Z0-9]
    ExportDzVar -/- [a-zA-Z0-9]
    ExpTupleDzVar -/- [a-zA-Z0-9]
    OptQVarListDzVar -/- [a-zA-Z0-9]
    CallConvDzVar -/- [a-zA-Z0-9]
    FPatDzVar -/- [a-zA-Z0-9]
    CDdeclDzVar -/- [a-zA-Z0-9]
    OptAsModIdDzVar -/- [a-zA-Z0-9]
    ContextDzVar -/- [a-zA-Z0-9]
    PascalCaseIdDzVar -/- [a-zA-Z0-9]
    ConDzVar -/- [a-zA-Z0-9]
    UpperCaseDzVar -/- [a-zA-Z0-9]
    VarsDzVar -/- [a-zA-Z0-9]
    OptCNameListDzVar -/- [a-zA-Z0-9]
    PatTupleDzVar -/- [a-zA-Z0-9]
    SimpleClassListDzVar -/- [a-zA-Z0-9]
    DderivingDzVar -/- [a-zA-Z0-9]
    VarIdDzVar -/- [a-zA-Z0-9]
    QConIdDzVar -/- [a-zA-Z0-9]
    FieldDdeclDzVar -/- [a-zA-Z0-9]
    TypeDzVar -/- [a-zA-Z0-9]
    GConSymDzVar -/- [a-zA-Z0-9]
    ImportListDzVar -/- [a-zA-Z0-9]
    DdClassDzVar -/- [a-zA-Z0-9]
    ImpentDzVar -/- [a-zA-Z0-9]
    ATypesDzVar -/- [a-zA-Z0-9]
    InfixExpDzVar -/- [a-zA-Z0-9]
    StmtListDzVar -/- [a-zA-Z0-9]
    OptQualifiedDzVar -/- [a-zA-Z0-9]
    ImpSpecDzVar -/- [a-zA-Z0-9]
    TypesDzVar -/- [a-zA-Z0-9]
    PatDzVar -/- [a-zA-Z0-9]
    QTyClsDzVar -/- [a-zA-Z0-9]
    ImpDdeclDzVar -/- [a-zA-Z0-9]
    AltDzVar -/- [a-zA-Z0-9]
    GuardListDzVar -/- [a-zA-Z0-9]
    SimpleClassDzVar -/- [a-zA-Z0-9]
    FunLhsDzVar -/- [a-zA-Z0-9]
    TyClsDzVar -/- [a-zA-Z0-9]
    OpsDzVar -/- [a-zA-Z0-9]
    LPatDzVar -/- [a-zA-Z0-9]
    FPatsDzVar -/- [a-zA-Z0-9]
    LiteralDzVar -/- [a-zA-Z0-9]
    VarIdInnerDzVar -/- [a-zA-Z0-9]
    GenDdeclDzVar -/- [a-zA-Z0-9]
    ListDzVar -/- [a-zA-Z0-9]
    StreamDzVar -/- [a-zA-Z0-9]
    TyVarDzVar -/- [a-zA-Z0-9]
    GuardDzVar -/- [a-zA-Z0-9]
    GConDzVar -/- [a-zA-Z0-9]
    DzStringDzVar -/- [a-zA-Z0-9]
    ATypeDzVar -/- [a-zA-Z0-9]
    DzBoolDzVar -/- [a-zA-Z0-9]
    ConSymDzVar -/- [a-zA-Z0-9]
    VarOpDzVar -/- [a-zA-Z0-9]
    FTypeDzVar -/- [a-zA-Z0-9]
    OptExpDzVar -/- [a-zA-Z0-9]
    FrTypeDzVar -/- [a-zA-Z0-9]
    APatsDzVar -/- [a-zA-Z0-9]
    QVarOpDzVar -/- [a-zA-Z0-9]
    IDdeclDzVar -/- [a-zA-Z0-9]
    OptVarListDzVar -/- [a-zA-Z0-9]
    ClassDzVar -/- [a-zA-Z0-9]
    CNameDzVar -/- [a-zA-Z0-9]
    APatDzVar -/- [a-zA-Z0-9]
    ATypeListDzVar -/- [a-zA-Z0-9]
    CDdeclsDzVar -/- [a-zA-Z0-9]
    OptBangDzVar -/- [a-zA-Z0-9]
    OptSContextDzVar -/- [a-zA-Z0-9]
    CusFloatDzVar -/- [a-zA-Z0-9]
    IntDzVar -/- [a-zA-Z0-9]
    StmtDzVar -/- [a-zA-Z0-9]
    LiteralInnerDzVar -/- [a-zA-Z0-9]
    AAPatDzVar -/- [a-zA-Z0-9]
    ExportListDzVar -/- [a-zA-Z0-9]
    GdRhsDzVar -/- [a-zA-Z0-9]
    SafetyDzVar -/- [a-zA-Z0-9]
    RhsDzVar -/- [a-zA-Z0-9]
    DzIntDzVar -/- [a-zA-Z0-9]
    BodyDzVar -/- [a-zA-Z0-9]
    OptIDdeclsDzVar -/- [a-zA-Z0-9]
    QConSymDzVar -/- [a-zA-Z0-9]
    DdeclDzVar -/- [a-zA-Z0-9]
    FixityDzVar -/- [a-zA-Z0-9]
    FDdeclDzVar -/- [a-zA-Z0-9]
    ModIdDzVar -/- [a-zA-Z0-9]
    OptCDdeclsDzVar -/- [a-zA-Z0-9]
    IntegerDzVar -/- [a-zA-Z0-9]
    QVarIdDzVar -/- [a-zA-Z0-9]
    QVarSymDzVar -/- [a-zA-Z0-9]
    ImpDdeclsDzVar -/- [a-zA-Z0-9]
    IOErrorDzVar -/- [a-zA-Z0-9]
    DdeclsListDzVar -/- [a-zA-Z0-9]
    ConIdDzVar -/- [a-zA-Z0-9]
    QTyConDzVar -/- [a-zA-Z0-9]
    ExpDzVar -/- [a-zA-Z0-9]
    VariableDz -/- [a-zA-Z0-9]
lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isOp"      -> DzKLabel
    "isSymbolicOp"      -> DzKLabel
    "#symOp"      -> DzKLabel
    "isAExp"      -> DzKLabel
    "isSymbolicAExp"      -> DzKLabel
    "#symAExp"      -> DzKLabel
    "isImport"      -> DzKLabel
    "isSymbolicImport"      -> DzKLabel
    "#symImport"      -> DzKLabel
    "isDecls"      -> DzKLabel
    "isSymbolicDecls"      -> DzKLabel
    "#symDecls"      -> DzKLabel
    "isVar"      -> DzKLabel
    "isSymbolicVar"      -> DzKLabel
    "#symVar"      -> DzKLabel
    "isConOp"      -> DzKLabel
    "isSymbolicConOp"      -> DzKLabel
    "#symConOp"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isVarSym"      -> DzKLabel
    "isSymbolicVarSym"      -> DzKLabel
    "#symVarSym"      -> DzKLabel
    "isVarList"      -> DzKLabel
    "isSymbolicVarList"      -> DzKLabel
    "#symVarList"      -> DzKLabel
    "isOptContext"      -> DzKLabel
    "isSymbolicOptContext"      -> DzKLabel
    "#symOptContext"      -> DzKLabel
    "isDClassList"      -> DzKLabel
    "isSymbolicDClassList"      -> DzKLabel
    "#symDClassList"      -> DzKLabel
    "isOptImpSpec"      -> DzKLabel
    "isSymbolicOptImpSpec"      -> DzKLabel
    "#symOptImpSpec"      -> DzKLabel
    "isOptComma"      -> DzKLabel
    "isSymbolicOptComma"      -> DzKLabel
    "#symOptComma"      -> DzKLabel
    "isConIdInner"      -> DzKLabel
    "isSymbolicConIdInner"      -> DzKLabel
    "#symConIdInner"      -> DzKLabel
    "isLExp"      -> DzKLabel
    "isSymbolicLExp"      -> DzKLabel
    "#symLExp"      -> DzKLabel
    "isQOp"      -> DzKLabel
    "isSymbolicQOp"      -> DzKLabel
    "#symQOp"      -> DzKLabel
    "isTyVarTuple"      -> DzKLabel
    "isSymbolicTyVarTuple"      -> DzKLabel
    "#symTyVarTuple"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isAlts"      -> DzKLabel
    "isSymbolicAlts"      -> DzKLabel
    "#symAlts"      -> DzKLabel
    "isTopDecls"      -> DzKLabel
    "isSymbolicTopDecls"      -> DzKLabel
    "#symTopDecls"      -> DzKLabel
    "isOptBangAType"      -> DzKLabel
    "isSymbolicOptBangAType"      -> DzKLabel
    "#symOptBangAType"      -> DzKLabel
    "isExpList"      -> DzKLabel
    "isSymbolicExpList"      -> DzKLabel
    "#symExpList"      -> DzKLabel
    "isClasses"      -> DzKLabel
    "isSymbolicClasses"      -> DzKLabel
    "#symClasses"      -> DzKLabel
    "isOptDecls"      -> DzKLabel
    "isSymbolicOptDecls"      -> DzKLabel
    "#symOptDecls"      -> DzKLabel
    "isConstrs"      -> DzKLabel
    "isSymbolicConstrs"      -> DzKLabel
    "#symConstrs"      -> DzKLabel
    "isConstr"      -> DzKLabel
    "isSymbolicConstr"      -> DzKLabel
    "#symConstr"      -> DzKLabel
    "isSContext"      -> DzKLabel
    "isSymbolicSContext"      -> DzKLabel
    "#symSContext"      -> DzKLabel
    "isExports"      -> DzKLabel
    "isSymbolicExports"      -> DzKLabel
    "#symExports"      -> DzKLabel
    "isQConOp"      -> DzKLabel
    "isSymbolicQConOp"      -> DzKLabel
    "#symQConOp"      -> DzKLabel
    "isOptBangATypes"      -> DzKLabel
    "isSymbolicOptBangATypes"      -> DzKLabel
    "#symOptBangATypes"      -> DzKLabel
    "isFieldDeclList"      -> DzKLabel
    "isSymbolicFieldDeclList"      -> DzKLabel
    "#symFieldDeclList"      -> DzKLabel
    "isQVar"      -> DzKLabel
    "isSymbolicQVar"      -> DzKLabel
    "#symQVar"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isOptDeriving"      -> DzKLabel
    "isSymbolicOptDeriving"      -> DzKLabel
    "#symOptDeriving"      -> DzKLabel
    "isFexp"      -> DzKLabel
    "isSymbolicFexp"      -> DzKLabel
    "#symFexp"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isModule"      -> DzKLabel
    "isSymbolicModule"      -> DzKLabel
    "#symModule"      -> DzKLabel
    "isIDeclsList"      -> DzKLabel
    "isSymbolicIDeclsList"      -> DzKLabel
    "#symIDeclsList"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "isOptExpComma"      -> DzKLabel
    "isSymbolicOptExpComma"      -> DzKLabel
    "#symOptExpComma"      -> DzKLabel
    "isPatList"      -> DzKLabel
    "isSymbolicPatList"      -> DzKLabel
    "#symPatList"      -> DzKLabel
    "is#Float"      -> DzKLabel
    "isTopDecl"      -> DzKLabel
    "isSymbolicTopDecl"      -> DzKLabel
    "#symTopDecl"      -> DzKLabel
    "isIDecls"      -> DzKLabel
    "isSymbolicIDecls"      -> DzKLabel
    "#symIDecls"      -> DzKLabel
    "isTypeTuple"      -> DzKLabel
    "isSymbolicTypeTuple"      -> DzKLabel
    "#symTypeTuple"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isOptConstrs"      -> DzKLabel
    "isSymbolicOptConstrs"      -> DzKLabel
    "#symOptConstrs"      -> DzKLabel
    "isExpent"      -> DzKLabel
    "isSymbolicExpent"      -> DzKLabel
    "#symExpent"      -> DzKLabel
    "isStmts"      -> DzKLabel
    "isSymbolicStmts"      -> DzKLabel
    "#symStmts"      -> DzKLabel
    "isInst"      -> DzKLabel
    "isSymbolicInst"      -> DzKLabel
    "#symInst"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isFaType"      -> DzKLabel
    "isSymbolicFaType"      -> DzKLabel
    "#symFaType"      -> DzKLabel
    "isGuards"      -> DzKLabel
    "isSymbolicGuards"      -> DzKLabel
    "#symGuards"      -> DzKLabel
    "isGTyCon"      -> DzKLabel
    "isSymbolicGTyCon"      -> DzKLabel
    "#symGTyCon"      -> DzKLabel
    "isTyCon"      -> DzKLabel
    "isSymbolicTyCon"      -> DzKLabel
    "#symTyCon"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isAPatList"      -> DzKLabel
    "isSymbolicAPatList"      -> DzKLabel
    "#symAPatList"      -> DzKLabel
    "isCDeclsList"      -> DzKLabel
    "isSymbolicCDeclsList"      -> DzKLabel
    "#symCDeclsList"      -> DzKLabel
    "isSubConstr"      -> DzKLabel
    "isSymbolicSubConstr"      -> DzKLabel
    "#symSubConstr"      -> DzKLabel
    "isSimpleType"      -> DzKLabel
    "isSymbolicSimpleType"      -> DzKLabel
    "#symSimpleType"      -> DzKLabel
    "isQVarList"      -> DzKLabel
    "isSymbolicQVarList"      -> DzKLabel
    "#symQVarList"      -> DzKLabel
    "isQCon"      -> DzKLabel
    "isSymbolicQCon"      -> DzKLabel
    "#symQCon"      -> DzKLabel
    "isNewConstr"      -> DzKLabel
    "isSymbolicNewConstr"      -> DzKLabel
    "#symNewConstr"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isBType"      -> DzKLabel
    "isSymbolicBType"      -> DzKLabel
    "#symBType"      -> DzKLabel
    "isOptSemicolon"      -> DzKLabel
    "isSymbolicOptSemicolon"      -> DzKLabel
    "#symOptSemicolon"      -> DzKLabel
    "isCNameList"      -> DzKLabel
    "isSymbolicCNameList"      -> DzKLabel
    "#symCNameList"      -> DzKLabel
    "isTyVars"      -> DzKLabel
    "isSymbolicTyVars"      -> DzKLabel
    "#symTyVars"      -> DzKLabel
    "isExport"      -> DzKLabel
    "isSymbolicExport"      -> DzKLabel
    "#symExport"      -> DzKLabel
    "isExpTuple"      -> DzKLabel
    "isSymbolicExpTuple"      -> DzKLabel
    "#symExpTuple"      -> DzKLabel
    "isOptQVarList"      -> DzKLabel
    "isSymbolicOptQVarList"      -> DzKLabel
    "#symOptQVarList"      -> DzKLabel
    "isCallConv"      -> DzKLabel
    "isSymbolicCallConv"      -> DzKLabel
    "#symCallConv"      -> DzKLabel
    "isFPat"      -> DzKLabel
    "isSymbolicFPat"      -> DzKLabel
    "#symFPat"      -> DzKLabel
    "isCDecl"      -> DzKLabel
    "isSymbolicCDecl"      -> DzKLabel
    "#symCDecl"      -> DzKLabel
    "isOptAsModId"      -> DzKLabel
    "isSymbolicOptAsModId"      -> DzKLabel
    "#symOptAsModId"      -> DzKLabel
    "isContext"      -> DzKLabel
    "isSymbolicContext"      -> DzKLabel
    "#symContext"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isCon"      -> DzKLabel
    "isSymbolicCon"      -> DzKLabel
    "#symCon"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isVars"      -> DzKLabel
    "isSymbolicVars"      -> DzKLabel
    "#symVars"      -> DzKLabel
    "isOptCNameList"      -> DzKLabel
    "isSymbolicOptCNameList"      -> DzKLabel
    "#symOptCNameList"      -> DzKLabel
    "isPatTuple"      -> DzKLabel
    "isSymbolicPatTuple"      -> DzKLabel
    "#symPatTuple"      -> DzKLabel
    "isSimpleClassList"      -> DzKLabel
    "isSymbolicSimpleClassList"      -> DzKLabel
    "#symSimpleClassList"      -> DzKLabel
    "isDeriving"      -> DzKLabel
    "isSymbolicDeriving"      -> DzKLabel
    "#symDeriving"      -> DzKLabel
    "isVarId"      -> DzKLabel
    "isSymbolicVarId"      -> DzKLabel
    "#symVarId"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isQConId"      -> DzKLabel
    "isSymbolicQConId"      -> DzKLabel
    "#symQConId"      -> DzKLabel
    "isFieldDecl"      -> DzKLabel
    "isSymbolicFieldDecl"      -> DzKLabel
    "#symFieldDecl"      -> DzKLabel
    "isType"      -> DzKLabel
    "isSymbolicType"      -> DzKLabel
    "#symType"      -> DzKLabel
    "isGConSym"      -> DzKLabel
    "isSymbolicGConSym"      -> DzKLabel
    "#symGConSym"      -> DzKLabel
    "isImportList"      -> DzKLabel
    "isSymbolicImportList"      -> DzKLabel
    "#symImportList"      -> DzKLabel
    "isDClass"      -> DzKLabel
    "isSymbolicDClass"      -> DzKLabel
    "#symDClass"      -> DzKLabel
    "isImpent"      -> DzKLabel
    "isSymbolicImpent"      -> DzKLabel
    "#symImpent"      -> DzKLabel
    "isATypes"      -> DzKLabel
    "isSymbolicATypes"      -> DzKLabel
    "#symATypes"      -> DzKLabel
    "isInfixExp"      -> DzKLabel
    "isSymbolicInfixExp"      -> DzKLabel
    "#symInfixExp"      -> DzKLabel
    "isStmtList"      -> DzKLabel
    "isSymbolicStmtList"      -> DzKLabel
    "#symStmtList"      -> DzKLabel
    "isOptQualified"      -> DzKLabel
    "isSymbolicOptQualified"      -> DzKLabel
    "#symOptQualified"      -> DzKLabel
    "isImpSpec"      -> DzKLabel
    "isSymbolicImpSpec"      -> DzKLabel
    "#symImpSpec"      -> DzKLabel
    "isTypes"      -> DzKLabel
    "isSymbolicTypes"      -> DzKLabel
    "#symTypes"      -> DzKLabel
    "isPat"      -> DzKLabel
    "isSymbolicPat"      -> DzKLabel
    "#symPat"      -> DzKLabel
    "isQTyCls"      -> DzKLabel
    "isSymbolicQTyCls"      -> DzKLabel
    "#symQTyCls"      -> DzKLabel
    "isImpDecl"      -> DzKLabel
    "isSymbolicImpDecl"      -> DzKLabel
    "#symImpDecl"      -> DzKLabel
    "isAlt"      -> DzKLabel
    "isSymbolicAlt"      -> DzKLabel
    "#symAlt"      -> DzKLabel
    "isGuardList"      -> DzKLabel
    "isSymbolicGuardList"      -> DzKLabel
    "#symGuardList"      -> DzKLabel
    "isSimpleClass"      -> DzKLabel
    "isSymbolicSimpleClass"      -> DzKLabel
    "#symSimpleClass"      -> DzKLabel
    "isFunLhs"      -> DzKLabel
    "isSymbolicFunLhs"      -> DzKLabel
    "#symFunLhs"      -> DzKLabel
    "isTyCls"      -> DzKLabel
    "isSymbolicTyCls"      -> DzKLabel
    "#symTyCls"      -> DzKLabel
    "isOps"      -> DzKLabel
    "isSymbolicOps"      -> DzKLabel
    "#symOps"      -> DzKLabel
    "isLPat"      -> DzKLabel
    "isSymbolicLPat"      -> DzKLabel
    "#symLPat"      -> DzKLabel
    "isFPats"      -> DzKLabel
    "isSymbolicFPats"      -> DzKLabel
    "#symFPats"      -> DzKLabel
    "isLiteral"      -> DzKLabel
    "isSymbolicLiteral"      -> DzKLabel
    "#symLiteral"      -> DzKLabel
    "isVarIdInner"      -> DzKLabel
    "isSymbolicVarIdInner"      -> DzKLabel
    "#symVarIdInner"      -> DzKLabel
    "isGenDecl"      -> DzKLabel
    "isSymbolicGenDecl"      -> DzKLabel
    "#symGenDecl"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "isTyVar"      -> DzKLabel
    "isSymbolicTyVar"      -> DzKLabel
    "#symTyVar"      -> DzKLabel
    "isGuard"      -> DzKLabel
    "isSymbolicGuard"      -> DzKLabel
    "#symGuard"      -> DzKLabel
    "isGCon"      -> DzKLabel
    "isSymbolicGCon"      -> DzKLabel
    "#symGCon"      -> DzKLabel
    "is#String"      -> DzKLabel
    "isAType"      -> DzKLabel
    "isSymbolicAType"      -> DzKLabel
    "#symAType"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isConSym"      -> DzKLabel
    "isSymbolicConSym"      -> DzKLabel
    "#symConSym"      -> DzKLabel
    "isVarOp"      -> DzKLabel
    "isSymbolicVarOp"      -> DzKLabel
    "#symVarOp"      -> DzKLabel
    "isFType"      -> DzKLabel
    "isSymbolicFType"      -> DzKLabel
    "#symFType"      -> DzKLabel
    "isOptExp"      -> DzKLabel
    "isSymbolicOptExp"      -> DzKLabel
    "#symOptExp"      -> DzKLabel
    "isFrType"      -> DzKLabel
    "isSymbolicFrType"      -> DzKLabel
    "#symFrType"      -> DzKLabel
    "isAPats"      -> DzKLabel
    "isSymbolicAPats"      -> DzKLabel
    "#symAPats"      -> DzKLabel
    "isQVarOp"      -> DzKLabel
    "isSymbolicQVarOp"      -> DzKLabel
    "#symQVarOp"      -> DzKLabel
    "isIDecl"      -> DzKLabel
    "isSymbolicIDecl"      -> DzKLabel
    "#symIDecl"      -> DzKLabel
    "isOptVarList"      -> DzKLabel
    "isSymbolicOptVarList"      -> DzKLabel
    "#symOptVarList"      -> DzKLabel
    "isClass"      -> DzKLabel
    "isSymbolicClass"      -> DzKLabel
    "#symClass"      -> DzKLabel
    "isCName"      -> DzKLabel
    "isSymbolicCName"      -> DzKLabel
    "#symCName"      -> DzKLabel
    "isAPat"      -> DzKLabel
    "isSymbolicAPat"      -> DzKLabel
    "#symAPat"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "isATypeList"      -> DzKLabel
    "isSymbolicATypeList"      -> DzKLabel
    "#symATypeList"      -> DzKLabel
    "isCDecls"      -> DzKLabel
    "isSymbolicCDecls"      -> DzKLabel
    "#symCDecls"      -> DzKLabel
    "isOptBang"      -> DzKLabel
    "isSymbolicOptBang"      -> DzKLabel
    "#symOptBang"      -> DzKLabel
    "isOptSContext"      -> DzKLabel
    "isSymbolicOptSContext"      -> DzKLabel
    "#symOptSContext"      -> DzKLabel
    "isCusFloat"      -> DzKLabel
    "isSymbolicCusFloat"      -> DzKLabel
    "#symCusFloat"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isStmt"      -> DzKLabel
    "isSymbolicStmt"      -> DzKLabel
    "#symStmt"      -> DzKLabel
    "isLiteralInner"      -> DzKLabel
    "isSymbolicLiteralInner"      -> DzKLabel
    "#symLiteralInner"      -> DzKLabel
    "isAAPat"      -> DzKLabel
    "isSymbolicAAPat"      -> DzKLabel
    "#symAAPat"      -> DzKLabel
    "isExportList"      -> DzKLabel
    "isSymbolicExportList"      -> DzKLabel
    "#symExportList"      -> DzKLabel
    "isGdRhs"      -> DzKLabel
    "isSymbolicGdRhs"      -> DzKLabel
    "#symGdRhs"      -> DzKLabel
    "isSafety"      -> DzKLabel
    "isSymbolicSafety"      -> DzKLabel
    "#symSafety"      -> DzKLabel
    "isRhs"      -> DzKLabel
    "isSymbolicRhs"      -> DzKLabel
    "#symRhs"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "isBody"      -> DzKLabel
    "isSymbolicBody"      -> DzKLabel
    "#symBody"      -> DzKLabel
    "isOptIDecls"      -> DzKLabel
    "isSymbolicOptIDecls"      -> DzKLabel
    "#symOptIDecls"      -> DzKLabel
    "isQConSym"      -> DzKLabel
    "isSymbolicQConSym"      -> DzKLabel
    "#symQConSym"      -> DzKLabel
    "isDecl"      -> DzKLabel
    "isSymbolicDecl"      -> DzKLabel
    "#symDecl"      -> DzKLabel
    "isFixity"      -> DzKLabel
    "isSymbolicFixity"      -> DzKLabel
    "#symFixity"      -> DzKLabel
    "isFDecl"      -> DzKLabel
    "isSymbolicFDecl"      -> DzKLabel
    "#symFDecl"      -> DzKLabel
    "isModId"      -> DzKLabel
    "isSymbolicModId"      -> DzKLabel
    "#symModId"      -> DzKLabel
    "isOptCDecls"      -> DzKLabel
    "isSymbolicOptCDecls"      -> DzKLabel
    "#symOptCDecls"      -> DzKLabel
    "isInteger"      -> DzKLabel
    "isSymbolicInteger"      -> DzKLabel
    "#symInteger"      -> DzKLabel
    "isQVarId"      -> DzKLabel
    "isSymbolicQVarId"      -> DzKLabel
    "#symQVarId"      -> DzKLabel
    "isQVarSym"      -> DzKLabel
    "isSymbolicQVarSym"      -> DzKLabel
    "#symQVarSym"      -> DzKLabel
    "isImpDecls"      -> DzKLabel
    "isSymbolicImpDecls"      -> DzKLabel
    "#symImpDecls"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isDeclsList"      -> DzKLabel
    "isSymbolicDeclsList"      -> DzKLabel
    "#symDeclsList"      -> DzKLabel
    "isConId"      -> DzKLabel
    "isSymbolicConId"      -> DzKLabel
    "#symConId"      -> DzKLabel
    "isQTyCon"      -> DzKLabel
    "isSymbolicQTyCon"      -> DzKLabel
    "#symQTyCon"      -> DzKLabel
    "isExp"      -> DzKLabel
    "isSymbolicExp"      -> DzKLabel
    "#symExp"      -> DzKLabel



%% terminals reject
    "Int2Float" -> VARID {reject}
    "String2Base" -> VARID {reject}
    "Base2String" -> VARID {reject}
    "KLabel2String" -> VARID {reject}
    "Infinity" -> VARID {reject}
    "NaN" -> VARID {reject}
    "String2Int" -> VARID {reject}
    "ListItem" -> VARID {reject}
    "Float2Int" -> VARID {reject}
    "EXPENT" -> VARID {reject}
    "Float2String" -> VARID {reject}
    "String2Id" -> VARID {reject}
    "IMPENT" -> VARID {reject}
    "String2Float" -> VARID {reject}
    "String2KLabel" -> VARID {reject}
    "Int2String" -> VARID {reject}
    "Char2String" -> VARID {reject}
    "String2Char" -> VARID {reject}
    "Id2String" -> VARID {reject}
    "SetItem" -> VARID {reject}

lexical restrictions
    %% follow restrictions
    "-" -/- [M].[a].[p]
    "==K" -/- [L].[i].[s].[t]
    "#" -/- [E].[S].[P].[I].[P].[E]
    "in" -/- [K].[L].[i].[s].[t]
    "#" -/- [E].[N].[O].[T].[D].[I].[R]
    "=" -/- [K].[L].[a].[b].[e].[l]
    "fresh" -/- [I].[d]
    "." -/- [M].[a].[p]
    "-" -/- [F].[l].[o].[a].[t]
    "replace" -/- [A].[l].[l]
    "=" -/- [K]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "#" -/- [E].[N].[O].[E].[N].[T]
    "#" -/- [E].[I].[S].[D].[I].[R]
    "=K" -/- [L].[a].[b].[e].[l]
    "=" -/- [L].[i].[s].[t]
    "~" -/- [I].[n].[t]
    "==K" -/- [L].[a].[b].[e].[l]
    "." -/- [L].[i].[s].[t]
    "fresh" -/- [I].[n].[t]
    "#" -/- [E].[A].[C].[C].[E].[S]
    "#" -/- [E].[O].[F]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "=" -/- [B].[a].[g]
    "=" -/- [K].[L].[i].[s].[t]
    "#" -/- [E].[N].[A].[M].[E].[T].[O].[O].[L].[O].[N].[G]
    "-" -/- [I].[n].[t]
    "#parse" -/- [I].[n].[p].[u].[t]
    "#parse" -/- [T].[o].[k].[e].[n]
    "=" -/- [I].[n].[t]
    "#" -/- [E].[L].[O].[O].[P]
    "." -/- [S].[e].[t]
    "#" -/- [E].[I].[N].[V].[A].[L]
    "-" -/- [S].[e].[t]
    "#" -/- [E].[B].[A].[D].[F]
    "=/=K" -/- [L].[i].[s].[t]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=" -/- [S].[e].[t]
    "=K" -/- [L].[i].[s].[t]
    "|" -/- [I].[n].[t]
    "=" -/- [M].[a].[p]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    DzInt -/-  [0-9]

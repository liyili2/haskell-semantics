module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

imports Variables

exports

context-free syntax
context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1287Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1365Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1276Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool184Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1266Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1363Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1359Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1297Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1323Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map156Syn")}
} > {
    Map Map -> Map {left, cons("Map197Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1368Syn")}
    K "=/=K" K -> Bool {left, cons("Bool166Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1368Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool127Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1254Syn")}
    K "=/=K" K -> Bool {left, cons("Bool166Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1359Syn")}
    "notBool" Bool -> Bool {cons("Bool1287Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1276Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1266Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1363Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool184Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1365Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool127Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1254Syn")}
}

context-free priorities
{
    "~Int" Int -> Int {cons("Int1209Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int155Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int152Syn")}
    Int "/Int" Int -> Int {left, cons("Int180Syn")}
    Int "%Int" Int -> Int {left, cons("Int1258Syn")}
    Int "divInt" Int -> Int {left, cons("Int1335Syn")}
    Int "modInt" Int -> Int {left, cons("Int153Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1273Syn")}
    Int "-Int" Int -> Int {left, cons("Int1237Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int186Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1204Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int1206Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int168Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int167Syn")}
}

context-free priorities
{
    "--Float" Float -> Float {cons("Float1270Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float16Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float188Syn")}
    Float "/Float" Float -> Float {left, cons("Float149Syn")}
    Float "%Float" Float -> Float {left, cons("Float1332Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1373Syn")}
    Float "-Float" Float -> Float {left, cons("Float1272Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    Symbol -> K
    AscSymbol -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    VarSym -> K
    Int -> K
    Bool -> K
    Char -> K
    Literal -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    ConSym -> K
    PascalCaseId -> K
    UpperCase -> K
    Integer -> K
    Float -> K
    IOError -> K
    Id -> K
    Map -> K
    DzFloat -> K
} .> {
    DzFloat -> Float
    Symbol -> VarSym
    DzInt -> Int
    DzBool -> Bool
    DzString -> String
    Integer -> Literal
    AscSymbol -> Symbol
    Literal -> AExp
    Symbol -> ConSym
} .> {
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> Symbol
    K -> AscSymbol
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> VarSym
    K -> Int
    K -> Bool
    K -> Char
    K -> Literal
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> ConSym
    K -> PascalCaseId
    K -> UpperCase
    K -> Integer
    K -> Float
    K -> IOError
    K -> Id
    K -> Map
    K -> DzFloat
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    Symbol -> K
    AscSymbol -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    VarSym -> K
    Int -> K
    Bool -> K
    Char -> K
    Literal -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    ConSym -> K
    PascalCaseId -> K
    UpperCase -> K
    Integer -> K
    Float -> K
    IOError -> K
    Id -> K
    Map -> K
    DzFloat -> K
} .> {
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> Symbol
    K -> AscSymbol
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> VarSym
    K -> Int
    K -> Bool
    K -> Char
    K -> Literal
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> ConSym
    K -> PascalCaseId
    K -> UpperCase
    K -> Integer
    K -> Float
    K -> IOError
    K -> Id
    K -> Map
    K -> DzFloat
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> Symbol
    K -> AscSymbol
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> VarSym
    K -> Int
    K -> Bool
    K -> Char
    K -> Literal
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> ConSym
    K -> PascalCaseId
    K -> UpperCase
    K -> Integer
    K -> Float
    K -> IOError
    K -> Id
    K -> Map
    K -> DzFloat
} .> {
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    Symbol -> K
    AscSymbol -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    VarSym -> K
    Int -> K
    Bool -> K
    Char -> K
    Literal -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    ConSym -> K
    PascalCaseId -> K
    UpperCase -> K
    Integer -> K
    Float -> K
    IOError -> K
    Id -> K
    Map -> K
    DzFloat -> K
}
context-free syntax
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream10Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem12Syn")}
    K "inKList" KList -> Bool {cons("Bool13Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int14Syn")}
    "#EISDIR" -> IOError {cons("IOError15Syn")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map17Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map18Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float19Syn")}
    Map "=Map" Map -> Bool {cons("Bool120Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float122Syn")}
    Set "=Set" Set -> Bool {cons("Bool123Syn")}
    String "<String" String -> Bool {cons("Bool124Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List125Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float126Syn")}
    ".List" -> List {cons("List128Syn")}
    "#EBADF" -> IOError {cons("IOError129Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream130Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String132Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool133Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool134Syn")}
    "#stderr" -> Int {cons("Int135Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool136Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int137Syn")}
    Map "-Map" Map -> Map {cons("Map138Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float139Syn")}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String140Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String142Syn")}
    Set "-Set" Set -> Set {cons("Set143Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool144Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel145Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream146Syn")}
    String "=/=String" String -> Bool {left, cons("Bool147Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id148Syn")}
    DzInt -> Int {}
    "#freezer" K -> KLabel {cons("KLabel150Syn")}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int154Syn")}
    K "|->" K -> Map {cons("Map156Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int157Syn")}
    "size" "(" InsertDzList ")" -> Int {cons("Int158Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map159Syn")}
    Int "=Int" Int -> Bool {cons("Bool160Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List162Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float163Syn")}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int164Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float165Syn")}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList169Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String170Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem172Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float173Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList174Syn")}
    Int "<Int" Int -> Bool {left, cons("Bool175Syn")}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool176Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int177Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int178Syn")}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float179Syn")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int182Syn")}
    "cool" "(" InsertDzK ")" -> K {cons("K183Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List185Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String187Syn")}
    Symbol -> VarSym {}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float189Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String190Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String192Syn")}
    DzBool -> Bool {}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool193Syn")}
    Set "<=Set" Set -> Bool {cons("Bool194Syn")}
    KList "=KList" KList -> Bool {cons("Bool195Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool196Syn")}
    Map Map -> Map {left, cons("Map197Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool198Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float199Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1200Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1202Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1203Syn")}
    "#noIO" -> Stream {cons("Stream1205Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1207Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1208Syn")}
    "#EACCES" -> IOError {cons("IOError1220Syn")}
    List "=List" List -> Bool {cons("Bool1222Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1223Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1224Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1225Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1226Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1227Syn")}
    Set Set -> Set {left, cons("Set1229Syn")}
    Map "[" InsertDzK "]" -> K {cons("K1230Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1232Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1233Syn")}
    K "#inKList" KList -> Bool {cons("Bool1234Syn")}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1235Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1236Syn")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1238Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1239Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1240Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1242Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1243Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1244Syn")}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1245Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1246Syn")}
    K -> KList {}
    KList "=/=KList" KList -> Bool {cons("Bool1247Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1248Syn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1249Syn")}
    DzString -> String {}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1250Syn")}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1253Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1255Syn")}
    DzFloat -> Float {}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1257Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1259Syn")}
    "#ELOOP" -> IOError {cons("IOError1260Syn")}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1262Syn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1263Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1264Syn")}
    "#stdin" -> Int {cons("Int1265Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1267Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1268Syn")}
    "#configuration" -> Bag {cons("Bag1269Syn")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1274Syn")}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1277Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1278Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1279Syn")}
    KItem -> K {}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1280Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1282Syn")}
    ".Set" -> Set {cons("Set1283Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1284Syn")}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1285Syn")}
    List List -> List {left, cons("List1286Syn")}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1288Syn")}
    Map "<=Map" Map -> Bool {cons("Bool1289Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1290Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1292Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1293Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1294Syn")}
    String "==String" String -> Bool {left, cons("Bool1295Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1296Syn")}
    String "+String" String -> String {left, cons("String1298Syn")}
    String ">=String" String -> Bool {cons("Bool1299Syn")}
    K "in" Set -> Bool {cons("Bool1300Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1302Syn")}
    ".Map" -> Map {cons("Map1303Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1304Syn")}
    KList "==KList" KList -> Bool {cons("Bool1305Syn")}
    Int "==Int" Int -> Bool {left, cons("Bool1306Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1308Syn")}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1309Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1320Syn")}
    "#ENOENT" -> IOError {cons("IOError1322Syn")}
    "#EINVAL" -> IOError {cons("IOError1324Syn")}
    String ">String" String -> Bool {cons("Bool1325Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1326Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1327Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1328Syn")}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1329Syn")}
    List "[" InsertDzInt "]" -> K {cons("K1330Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1333Syn")}
    "#stdout" -> Int {cons("Int1334Syn")}
    "#noparse" -> IOError {cons("IOError1336Syn")}
    Float ">Float" Float -> Bool {left, cons("Bool1337Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1338Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1339Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1340Syn")}
    Integer -> Literal {}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1342Syn")}
    "countAllOccurrences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1343Syn")}
    KResult -> KItem {}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1344Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1345Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1346Syn")}
    "getKLabel" K -> KLabel {cons("KLabel1347Syn")}
    AscSymbol -> Symbol {}
    Float "==Float" Float -> Bool {left, cons("Bool1348Syn")}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1349Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1350Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1352Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1353Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1355Syn")}
    String "<=String" String -> Bool {cons("Bool1356Syn")}
    "Float2String" "(" InsertDzFloat "," InsertDzString ")" -> String {cons("String1357Syn")}
    "#EOF" -> IOError {cons("IOError1358Syn")}
    Symbol -> ConSym {}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1360Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1362Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1364Syn")}
    K "=K" K -> Bool {cons("Bool1366Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1367Syn")}
    "#ESPIPE" -> IOError {cons("IOError1369Syn")}
    Literal -> AExp {}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1370Syn")}
    K "in" List -> Bool {cons("Bool1372Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1374Syn")}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1375Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1376Syn")}
    Set    -> InsertDzSet
    K    -> InsertDzK
    String    -> InsertDzString
    KList    -> InsertDzKList
    Int    -> InsertDzInt
    Float    -> InsertDzFloat
    KLabel    -> InsertDzKLabel
    Bool    -> InsertDzBool
    Char    -> InsertDzChar
    List    -> InsertDzList
    Id    -> InsertDzId
    Map    -> InsertDzMap
    KItem    -> InsertDzKItem


    VARID  ":Nat"        -> NatDzVar            {cons("Nat12Var")}
    VARID  ":Nat{" TagListDz "}"        -> NatDzVar            {cons("Nat12VarAttr")}
    VARID  ":AExp"        -> AExpDzVar            {cons("AExp12Var")}
    VARID  ":AExp{" TagListDz "}"        -> AExpDzVar            {cons("AExp12VarAttr")}
    VARID  ":Set"        -> SetDzVar            {cons("Set12Var")}
    VARID  ":Set{" TagListDz "}"        -> SetDzVar            {cons("Set12VarAttr")}
    VARID  ":MInt"        -> MIntDzVar            {cons("MInt12Var")}
    VARID  ":MInt{" TagListDz "}"        -> MIntDzVar            {cons("MInt12VarAttr")}
    VARID  ":Symbol"        -> SymbolDzVar            {cons("Symbol12Var")}
    VARID  ":Symbol{" TagListDz "}"        -> SymbolDzVar            {cons("Symbol12VarAttr")}
    VARID  ":AscSymbol"        -> AscSymbolDzVar            {cons("AscSymbol12Var")}
    VARID  ":AscSymbol{" TagListDz "}"        -> AscSymbolDzVar            {cons("AscSymbol12VarAttr")}
    VARID  ":LowerCase"        -> LowerCaseDzVar            {cons("LowerCase12Var")}
    VARID  ":LowerCase{" TagListDz "}"        -> LowerCaseDzVar            {cons("LowerCase12VarAttr")}
    VARID  ":CamelCaseId"        -> CamelCaseIdDzVar            {cons("CamelCaseId12Var")}
    VARID  ":CamelCaseId{" TagListDz "}"        -> CamelCaseIdDzVar            {cons("CamelCaseId12VarAttr")}
    VARID  ":String"        -> StringDzVar            {cons("String12Var")}
    VARID  ":String{" TagListDz "}"        -> StringDzVar            {cons("String12VarAttr")}
    VARID  ":VarSym"        -> VarSymDzVar            {cons("VarSym12Var")}
    VARID  ":VarSym{" TagListDz "}"        -> VarSymDzVar            {cons("VarSym12VarAttr")}
    VARID  ":Int"        -> IntDzVar            {cons("Int12Var")}
    VARID  ":Int{" TagListDz "}"        -> IntDzVar            {cons("Int12VarAttr")}
    VARID  ":Bool"        -> BoolDzVar            {cons("Bool12Var")}
    VARID  ":Bool{" TagListDz "}"        -> BoolDzVar            {cons("Bool12VarAttr")}
    VARID  ":Char"        -> CharDzVar            {cons("Char12Var")}
    VARID  ":Char{" TagListDz "}"        -> CharDzVar            {cons("Char12VarAttr")}
    VARID  ":Literal"        -> LiteralDzVar            {cons("Literal12Var")}
    VARID  ":Literal{" TagListDz "}"        -> LiteralDzVar            {cons("Literal12VarAttr")}
    VARID  ":List"        -> ListDzVar            {cons("List12Var")}
    VARID  ":List{" TagListDz "}"        -> ListDzVar            {cons("List12VarAttr")}
    VARID  ":Stream"        -> StreamDzVar            {cons("Stream12Var")}
    VARID  ":Stream{" TagListDz "}"        -> StreamDzVar            {cons("Stream12VarAttr")}
    VARID  ":#Int"        -> DzIntDzVar            {cons("DzInt12Var")}
    VARID  ":#Int{" TagListDz "}"        -> DzIntDzVar            {cons("DzInt12VarAttr")}
    VARID  ":#String"        -> DzStringDzVar            {cons("DzString12Var")}
    VARID  ":#String{" TagListDz "}"        -> DzStringDzVar            {cons("DzString12VarAttr")}
    VARID  ":#Bool"        -> DzBoolDzVar            {cons("DzBool12Var")}
    VARID  ":#Bool{" TagListDz "}"        -> DzBoolDzVar            {cons("DzBool12VarAttr")}
    VARID  ":ConSym"        -> ConSymDzVar            {cons("ConSym12Var")}
    VARID  ":ConSym{" TagListDz "}"        -> ConSymDzVar            {cons("ConSym12VarAttr")}
    VARID  ":PascalCaseId"        -> PascalCaseIdDzVar            {cons("PascalCaseId12Var")}
    VARID  ":PascalCaseId{" TagListDz "}"        -> PascalCaseIdDzVar            {cons("PascalCaseId12VarAttr")}
    VARID  ":UpperCase"        -> UpperCaseDzVar            {cons("UpperCase12Var")}
    VARID  ":UpperCase{" TagListDz "}"        -> UpperCaseDzVar            {cons("UpperCase12VarAttr")}
    VARID  ":Integer"        -> IntegerDzVar            {cons("Integer12Var")}
    VARID  ":Integer{" TagListDz "}"        -> IntegerDzVar            {cons("Integer12VarAttr")}
    VARID  ":Float"        -> FloatDzVar            {cons("Float12Var")}
    VARID  ":Float{" TagListDz "}"        -> FloatDzVar            {cons("Float12VarAttr")}
    VARID  ":IOError"        -> IOErrorDzVar            {cons("IOError12Var")}
    VARID  ":IOError{" TagListDz "}"        -> IOErrorDzVar            {cons("IOError12VarAttr")}
    VARID  ":Id"        -> IdDzVar            {cons("Id12Var")}
    VARID  ":Id{" TagListDz "}"        -> IdDzVar            {cons("Id12VarAttr")}
    VARID  ":Map"        -> MapDzVar            {cons("Map12Var")}
    VARID  ":Map{" TagListDz "}"        -> MapDzVar            {cons("Map12VarAttr")}
    VARID  ":#Float"        -> DzFloatDzVar            {cons("DzFloat12Var")}
    VARID  ":#Float{" TagListDz "}"        -> DzFloatDzVar            {cons("DzFloat12VarAttr")}

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "AExp"    -> VariableDz    {cons("AExp1Cast")}
     K CastTypeDz "AExp{" TagListDz "}"    -> VariableDz    {cons("AExp1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "Symbol"    -> VariableDz    {cons("Symbol1Cast")}
     K CastTypeDz "Symbol{" TagListDz "}"    -> VariableDz    {cons("Symbol1CastAttr")}
     K CastTypeDz "AscSymbol"    -> VariableDz    {cons("AscSymbol1Cast")}
     K CastTypeDz "AscSymbol{" TagListDz "}"    -> VariableDz    {cons("AscSymbol1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "VarSym"    -> VariableDz    {cons("VarSym1Cast")}
     K CastTypeDz "VarSym{" TagListDz "}"    -> VariableDz    {cons("VarSym1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "Literal"    -> VariableDz    {cons("Literal1Cast")}
     K CastTypeDz "Literal{" TagListDz "}"    -> VariableDz    {cons("Literal1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "ConSym"    -> VariableDz    {cons("ConSym1Cast")}
     K CastTypeDz "ConSym{" TagListDz "}"    -> VariableDz    {cons("ConSym1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "Integer"    -> VariableDz    {cons("Integer1Cast")}
     K CastTypeDz "Integer{" TagListDz "}"    -> VariableDz    {cons("Integer1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     NatDzVar   -> Nat
     AExpDzVar   -> AExp
     SetDzVar   -> Set
     MIntDzVar   -> MInt
     SymbolDzVar   -> Symbol
     AscSymbolDzVar   -> AscSymbol
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     StringDzVar   -> String
     VarSymDzVar   -> VarSym
     IntDzVar   -> Int
     BoolDzVar   -> Bool
     CharDzVar   -> Char
     LiteralDzVar   -> Literal
     ListDzVar   -> List
     StreamDzVar   -> Stream
     DzIntDzVar   -> DzInt
     DzStringDzVar   -> DzString
     DzBoolDzVar   -> DzBool
     ConSymDzVar   -> ConSym
     PascalCaseIdDzVar   -> PascalCaseId
     UpperCaseDzVar   -> UpperCase
     IntegerDzVar   -> Integer
     FloatDzVar   -> Float
     IOErrorDzVar   -> IOError
     IdDzVar   -> Id
     MapDzVar   -> Map
     DzFloatDzVar   -> DzFloat
     K CastTypeDz "K"                         -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"                     -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


context-free restrictions
    NatDzVar -/- [a-zA-Z0-9]
    AExpDzVar -/- [a-zA-Z0-9]
    SetDzVar -/- [a-zA-Z0-9]
    MIntDzVar -/- [a-zA-Z0-9]
    SymbolDzVar -/- [a-zA-Z0-9]
    AscSymbolDzVar -/- [a-zA-Z0-9]
    LowerCaseDzVar -/- [a-zA-Z0-9]
    CamelCaseIdDzVar -/- [a-zA-Z0-9]
    StringDzVar -/- [a-zA-Z0-9]
    VarSymDzVar -/- [a-zA-Z0-9]
    IntDzVar -/- [a-zA-Z0-9]
    BoolDzVar -/- [a-zA-Z0-9]
    CharDzVar -/- [a-zA-Z0-9]
    LiteralDzVar -/- [a-zA-Z0-9]
    ListDzVar -/- [a-zA-Z0-9]
    StreamDzVar -/- [a-zA-Z0-9]
    DzIntDzVar -/- [a-zA-Z0-9]
    DzStringDzVar -/- [a-zA-Z0-9]
    DzBoolDzVar -/- [a-zA-Z0-9]
    ConSymDzVar -/- [a-zA-Z0-9]
    PascalCaseIdDzVar -/- [a-zA-Z0-9]
    UpperCaseDzVar -/- [a-zA-Z0-9]
    IntegerDzVar -/- [a-zA-Z0-9]
    FloatDzVar -/- [a-zA-Z0-9]
    IOErrorDzVar -/- [a-zA-Z0-9]
    IdDzVar -/- [a-zA-Z0-9]
    MapDzVar -/- [a-zA-Z0-9]
    DzFloatDzVar -/- [a-zA-Z0-9]
    VariableDz -/- [a-zA-Z0-9]
lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isAExp"      -> DzKLabel
    "isSymbolicAExp"      -> DzKLabel
    "#symAExp"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isSymbol"      -> DzKLabel
    "isSymbolicSymbol"      -> DzKLabel
    "#symSymbol"      -> DzKLabel
    "isAscSymbol"      -> DzKLabel
    "isSymbolicAscSymbol"      -> DzKLabel
    "#symAscSymbol"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isVarSym"      -> DzKLabel
    "isSymbolicVarSym"      -> DzKLabel
    "#symVarSym"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isLiteral"      -> DzKLabel
    "isSymbolicLiteral"      -> DzKLabel
    "#symLiteral"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "is#String"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isConSym"      -> DzKLabel
    "isSymbolicConSym"      -> DzKLabel
    "#symConSym"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isInteger"      -> DzKLabel
    "isSymbolicInteger"      -> DzKLabel
    "#symInteger"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "is#Float"      -> DzKLabel



%% terminals reject
    "Int2Float" -> VARID {reject}
    "String2Base" -> VARID {reject}
    "Base2String" -> VARID {reject}
    "KLabel2String" -> VARID {reject}
    "Infinity" -> VARID {reject}
    "NaN" -> VARID {reject}
    "String2Int" -> VARID {reject}
    "ListItem" -> VARID {reject}
    "Float2Int" -> VARID {reject}
    "Float2String" -> VARID {reject}
    "String2Id" -> VARID {reject}
    "String2Float" -> VARID {reject}
    "String2KLabel" -> VARID {reject}
    "Int2String" -> VARID {reject}
    "Char2String" -> VARID {reject}
    "String2Char" -> VARID {reject}
    "Id2String" -> VARID {reject}
    "SetItem" -> VARID {reject}

lexical restrictions
    %% follow restrictions
    "fresh" -/- [I].[n].[t]
    "==K" -/- [L].[i].[s].[t]
    "in" -/- [K].[L].[i].[s].[t]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "fresh" -/- [I].[d]
    "#parse" -/- [I].[n].[p].[u].[t]
    "replace" -/- [A].[l].[l]
    "#parse" -/- [T].[o].[k].[e].[n]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "=/=K" -/- [L].[i].[s].[t]
    "=K" -/- [L].[a].[b].[e].[l]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=K" -/- [L].[i].[s].[t]
    "==K" -/- [L].[a].[b].[e].[l]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    DzInt -/-  [0-9]
